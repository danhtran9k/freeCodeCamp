export const tc_articulation = {
    tc160: {
        V: 10,
        adjs: [
            [2], // 0
            [5, 6], // 1
            [0, 9], // 2
            [5, 7], // 3
            [5, 6, 8], // 4
            [1, 3, 4, 6], // 5
            [1, 4, 5, 6, 6, 7, 9], // 6 (có self-loop: 6,6)
            [3, 6], // 7
            [4], // 8
            [2, 6] // 9
        ]
    },
    // swap lại thứ tự để control đường đi dfs
    tc8: {
        V: 8,
        adjs: [
            [1],
            [5, 2, 0],
            [1, 7, 6, 3],
            [4, 5, 2],
            [5, 3],
            [3, 4, 1],
            [2, 7],
            [6, 2]
        ]
    },
    tc8b: {
        V: 8,
        adjs: [
            [1],
            [0, 2, 5],
            [6, 3, 7, 1],
            [4, 5, 2],
            [5, 3],
            [3, 4, 1],
            [2, 7],
            [6, 2]
        ]
    }
}
export const tc_edge = {
    // https://leetcode.com/problems/shortest-cycle-in-a-graph/
    //
    tc_cycle_size_1: {
        V: 6,
        edges: [
            [2, 1],
            [4, 1],
            [5, 1],
            [5, 0],
            [4, 0],
            [3, 0],
            [3, 2]
            // [5,2] // tạo ra 3 cycle con và 1 cycle lớn
            // Thêm cạnh trên vô thì ko còn bridge hay AP nữa
            // Case đặc biệt chồng chéo SCC với nhau
        ]
    },
    // https://www.geeksforgeeks.org/problems/strongly-connected-component-tarjanss-algo-1587115621/1
    tc_gfg_scc_0: {
        V: 5,
        edges: [
            [1, 0],
            [0, 2],
            [2, 1],
            [0, 3],
            [3, 4]
        ]
    },
    tc_gfg_scc_2: {
        V: 2,
        edges: [[0, 1]]
    },
    tc_gfg_scc_6: {
        V: 20,
        edges: [
            [15, 7],
            [4, 9],
            [9, 4],
            [5, 9],
            [3, 15],
            [17, 0],
            [18, 11],
            [9, 9],
            [7, 8],
            [12, 15],
            [3, 4],
            [9, 10],
            [2, 0],
            [1, 9],
            [6, 12],
            [1, 2],
            [0, 17],
            [3, 1],
            [1, 9],
            [10, 5],
            [16, 7],
            [17, 14],
            [10, 6],
            [4, 17],
            [14, 8],
            [5, 18],
            [12, 6],
            [0, 6],
            [6, 14],
            [16, 12],
            [18, 9],
            [6, 10],
            [7, 10],
            [11, 0],
            [11, 13],
            [17, 7],
            [12, 6],
            [14, 15],
            [12, 10],
            [12, 19],
            [10, 9],
            [9, 14],
            [15, 1],
            [0, 13],
            [7, 8],
            [18, 6],
            [10, 4],
            [16, 17],
            [6, 0],
            [9, 17],
            [5, 19],
            [17, 18],
            [5, 3],
            [13, 18],
            [13, 17],
            [9, 3],
            [7, 18],
            [17, 14],
            [11, 9],
            [0, 19],
            [18, 18],
            [5, 8],
            [14, 13],
            [17, 1],
            [13, 18],
            [10, 19],
            [17, 19],
            [9, 3],
            [2, 14],
            [13, 7],
            [11, 2],
            [2, 10],
            [12, 11],
            [17, 15],
            [1, 17],
            [14, 11],
            [7, 11],
            [11, 1],
            [17, 0],
            [14, 10],
            [18, 5],
            [1, 16],
            [16, 2],
            [11, 19],
            [16, 4],
            [18, 0],
            [18, 1],
            [10, 2],
            [12, 19],
            [17, 5],
            [16, 4],
            [16, 3],
            [7, 19]
        ]
    }
}
