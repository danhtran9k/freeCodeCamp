{
  "questions": [
    {
      "title": "Two Sum",
      "problem_id": "1",
      "frontend_id": "1",
      "difficulty": "Easy",
      "problem_slug": "two-sum",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add Two Numbers",
      "problem_id": "2",
      "frontend_id": "2",
      "difficulty": "Medium",
      "problem_slug": "add-two-numbers",
      "topics": [
        "Linked List",
        "Math",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Substring Without Repeating Characters",
      "problem_id": "3",
      "frontend_id": "3",
      "difficulty": "Medium",
      "problem_slug": "longest-substring-without-repeating-characters",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Median of Two Sorted Arrays",
      "problem_id": "4",
      "frontend_id": "4",
      "difficulty": "Hard",
      "problem_slug": "median-of-two-sorted-arrays",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindromic Substring",
      "problem_id": "5",
      "frontend_id": "5",
      "difficulty": "Medium",
      "problem_slug": "longest-palindromic-substring",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Zigzag Conversion",
      "problem_id": "6",
      "frontend_id": "6",
      "difficulty": "Medium",
      "problem_slug": "zigzag-conversion",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Integer",
      "problem_id": "7",
      "frontend_id": "7",
      "difficulty": "Medium",
      "problem_slug": "reverse-integer",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "String to Integer (atoi)",
      "problem_id": "8",
      "frontend_id": "8",
      "difficulty": "Medium",
      "problem_slug": "string-to-integer-atoi",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindrome Number",
      "problem_id": "9",
      "frontend_id": "9",
      "difficulty": "Easy",
      "problem_slug": "palindrome-number",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Regular Expression Matching",
      "problem_id": "10",
      "frontend_id": "10",
      "difficulty": "Hard",
      "problem_slug": "regular-expression-matching",
      "topics": [
        "String",
        "Dynamic Programming",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Container With Most Water",
      "problem_id": "11",
      "frontend_id": "11",
      "difficulty": "Medium",
      "problem_slug": "container-with-most-water",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Integer to Roman",
      "problem_id": "12",
      "frontend_id": "12",
      "difficulty": "Medium",
      "problem_slug": "integer-to-roman",
      "topics": [
        "Hash Table",
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Roman to Integer",
      "problem_id": "13",
      "frontend_id": "13",
      "difficulty": "Easy",
      "problem_slug": "roman-to-integer",
      "topics": [
        "Hash Table",
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Common Prefix",
      "problem_id": "14",
      "frontend_id": "14",
      "difficulty": "Easy",
      "problem_slug": "longest-common-prefix",
      "topics": [
        "Array",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "3Sum",
      "problem_id": "15",
      "frontend_id": "15",
      "difficulty": "Medium",
      "problem_slug": "3sum",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "3Sum Closest",
      "problem_id": "16",
      "frontend_id": "16",
      "difficulty": "Medium",
      "problem_slug": "3sum-closest",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Letter Combinations of a Phone Number",
      "problem_id": "17",
      "frontend_id": "17",
      "difficulty": "Medium",
      "problem_slug": "letter-combinations-of-a-phone-number",
      "topics": [
        "Hash Table",
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "4Sum",
      "problem_id": "18",
      "frontend_id": "18",
      "difficulty": "Medium",
      "problem_slug": "4sum",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Nth Node From End of List",
      "problem_id": "19",
      "frontend_id": "19",
      "difficulty": "Medium",
      "problem_slug": "remove-nth-node-from-end-of-list",
      "topics": [
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Valid Parentheses",
      "problem_id": "20",
      "frontend_id": "20",
      "difficulty": "Easy",
      "problem_slug": "valid-parentheses",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Two Sorted Lists",
      "problem_id": "21",
      "frontend_id": "21",
      "difficulty": "Easy",
      "problem_slug": "merge-two-sorted-lists",
      "topics": [
        "Linked List",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Generate Parentheses",
      "problem_id": "22",
      "frontend_id": "22",
      "difficulty": "Medium",
      "problem_slug": "generate-parentheses",
      "topics": [
        "String",
        "Dynamic Programming",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge k Sorted Lists",
      "problem_id": "23",
      "frontend_id": "23",
      "difficulty": "Hard",
      "problem_slug": "merge-k-sorted-lists",
      "topics": [
        "Linked List",
        "Divide and Conquer",
        "Heap (Priority Queue)",
        "Merge Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Swap Nodes in Pairs",
      "problem_id": "24",
      "frontend_id": "24",
      "difficulty": "Medium",
      "problem_slug": "swap-nodes-in-pairs",
      "topics": [
        "Linked List",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Nodes in k-Group",
      "problem_id": "25",
      "frontend_id": "25",
      "difficulty": "Hard",
      "problem_slug": "reverse-nodes-in-k-group",
      "topics": [
        "Linked List",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Duplicates from Sorted Array",
      "problem_id": "26",
      "frontend_id": "26",
      "difficulty": "Easy",
      "problem_slug": "remove-duplicates-from-sorted-array",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Remove Element",
      "problem_id": "27",
      "frontend_id": "27",
      "difficulty": "Easy",
      "problem_slug": "remove-element",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Find the Index of the First Occurrence in a String",
      "problem_id": "28",
      "frontend_id": "28",
      "difficulty": "Easy",
      "problem_slug": "find-the-index-of-the-first-occurrence-in-a-string",
      "topics": [
        "Two Pointers",
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide Two Integers",
      "problem_id": "29",
      "frontend_id": "29",
      "difficulty": "Medium",
      "problem_slug": "divide-two-integers",
      "topics": [
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Substring with Concatenation of All Words",
      "problem_id": "30",
      "frontend_id": "30",
      "difficulty": "Hard",
      "problem_slug": "substring-with-concatenation-of-all-words",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Next Permutation",
      "problem_id": "31",
      "frontend_id": "31",
      "difficulty": "Medium",
      "problem_slug": "next-permutation",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Longest Valid Parentheses",
      "problem_id": "32",
      "frontend_id": "32",
      "difficulty": "Hard",
      "problem_slug": "longest-valid-parentheses",
      "topics": [
        "String",
        "Dynamic Programming",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Search in Rotated Sorted Array",
      "problem_id": "33",
      "frontend_id": "33",
      "difficulty": "Medium",
      "problem_slug": "search-in-rotated-sorted-array",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find First and Last Position of Element in Sorted Array",
      "problem_id": "34",
      "frontend_id": "34",
      "difficulty": "Medium",
      "problem_slug": "find-first-and-last-position-of-element-in-sorted-array",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Search Insert Position",
      "problem_id": "35",
      "frontend_id": "35",
      "difficulty": "Easy",
      "problem_slug": "search-insert-position",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Sudoku",
      "problem_id": "36",
      "frontend_id": "36",
      "difficulty": "Medium",
      "problem_slug": "valid-sudoku",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sudoku Solver",
      "problem_id": "37",
      "frontend_id": "37",
      "difficulty": "Hard",
      "problem_slug": "sudoku-solver",
      "topics": [
        "Array",
        "Hash Table",
        "Backtracking",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Count and Say",
      "problem_id": "38",
      "frontend_id": "38",
      "difficulty": "Medium",
      "problem_slug": "count-and-say",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Combination Sum",
      "problem_id": "39",
      "frontend_id": "39",
      "difficulty": "Medium",
      "problem_slug": "combination-sum",
      "topics": [
        "Array",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Combination Sum II",
      "problem_id": "40",
      "frontend_id": "40",
      "difficulty": "Medium",
      "problem_slug": "combination-sum-ii",
      "topics": [
        "Array",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "First Missing Positive",
      "problem_id": "41",
      "frontend_id": "41",
      "difficulty": "Hard",
      "problem_slug": "first-missing-positive",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Trapping Rain Water",
      "problem_id": "42",
      "frontend_id": "42",
      "difficulty": "Hard",
      "problem_slug": "trapping-rain-water",
      "topics": [
        "Array",
        "Two Pointers",
        "Dynamic Programming",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Multiply Strings",
      "problem_id": "43",
      "frontend_id": "43",
      "difficulty": "Medium",
      "problem_slug": "multiply-strings",
      "topics": [
        "Math",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Wildcard Matching",
      "problem_id": "44",
      "frontend_id": "44",
      "difficulty": "Hard",
      "problem_slug": "wildcard-matching",
      "topics": [
        "String",
        "Dynamic Programming",
        "Greedy",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jump Game II",
      "problem_id": "45",
      "frontend_id": "45",
      "difficulty": "Medium",
      "problem_slug": "jump-game-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Permutations",
      "problem_id": "46",
      "frontend_id": "46",
      "difficulty": "Medium",
      "problem_slug": "permutations",
      "topics": [
        "Array",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Permutations II",
      "problem_id": "47",
      "frontend_id": "47",
      "difficulty": "Medium",
      "problem_slug": "permutations-ii",
      "topics": [
        "Array",
        "Backtracking",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotate Image",
      "problem_id": "48",
      "frontend_id": "48",
      "difficulty": "Medium",
      "problem_slug": "rotate-image",
      "topics": [
        "Array",
        "Math",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Group Anagrams",
      "problem_id": "49",
      "frontend_id": "49",
      "difficulty": "Medium",
      "problem_slug": "group-anagrams",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pow(x, n)",
      "problem_id": "50",
      "frontend_id": "50",
      "difficulty": "Medium",
      "problem_slug": "powx-n",
      "topics": [
        "Math",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "N-Queens",
      "problem_id": "51",
      "frontend_id": "51",
      "difficulty": "Hard",
      "problem_slug": "n-queens",
      "topics": [
        "Array",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "N-Queens II",
      "problem_id": "52",
      "frontend_id": "52",
      "difficulty": "Hard",
      "problem_slug": "n-queens-ii",
      "topics": [
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Subarray",
      "problem_id": "53",
      "frontend_id": "53",
      "difficulty": "Medium",
      "problem_slug": "maximum-subarray",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Dynamic Programming"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Spiral Matrix",
      "problem_id": "54",
      "frontend_id": "54",
      "difficulty": "Medium",
      "problem_slug": "spiral-matrix",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jump Game",
      "problem_id": "55",
      "frontend_id": "55",
      "difficulty": "Medium",
      "problem_slug": "jump-game",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Intervals",
      "problem_id": "56",
      "frontend_id": "56",
      "difficulty": "Medium",
      "problem_slug": "merge-intervals",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Insert Interval",
      "problem_id": "57",
      "frontend_id": "57",
      "difficulty": "Medium",
      "problem_slug": "insert-interval",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of Last Word",
      "problem_id": "58",
      "frontend_id": "58",
      "difficulty": "Easy",
      "problem_slug": "length-of-last-word",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Spiral Matrix II",
      "problem_id": "59",
      "frontend_id": "59",
      "difficulty": "Medium",
      "problem_slug": "spiral-matrix-ii",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Permutation Sequence",
      "problem_id": "60",
      "frontend_id": "60",
      "difficulty": "Hard",
      "problem_slug": "permutation-sequence",
      "topics": [
        "Math",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotate List",
      "problem_id": "61",
      "frontend_id": "61",
      "difficulty": "Medium",
      "problem_slug": "rotate-list",
      "topics": [
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Paths",
      "problem_id": "62",
      "frontend_id": "62",
      "difficulty": "Medium",
      "problem_slug": "unique-paths",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Paths II",
      "problem_id": "63",
      "frontend_id": "63",
      "difficulty": "Medium",
      "problem_slug": "unique-paths-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Path Sum",
      "problem_id": "64",
      "frontend_id": "64",
      "difficulty": "Medium",
      "problem_slug": "minimum-path-sum",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Number",
      "problem_id": "65",
      "frontend_id": "65",
      "difficulty": "Hard",
      "problem_slug": "valid-number",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Plus One",
      "problem_id": "66",
      "frontend_id": "66",
      "difficulty": "Easy",
      "problem_slug": "plus-one",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add Binary",
      "problem_id": "67",
      "frontend_id": "67",
      "difficulty": "Easy",
      "problem_slug": "add-binary",
      "topics": [
        "Math",
        "String",
        "Bit Manipulation",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Text Justification",
      "problem_id": "68",
      "frontend_id": "68",
      "difficulty": "Hard",
      "problem_slug": "text-justification",
      "topics": [
        "Array",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sqrt(x)",
      "problem_id": "69",
      "frontend_id": "69",
      "difficulty": "Easy",
      "problem_slug": "sqrtx",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Climbing Stairs",
      "problem_id": "70",
      "frontend_id": "70",
      "difficulty": "Easy",
      "problem_slug": "climbing-stairs",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Simplify Path",
      "problem_id": "71",
      "frontend_id": "71",
      "difficulty": "Medium",
      "problem_slug": "simplify-path",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Edit Distance",
      "problem_id": "72",
      "frontend_id": "72",
      "difficulty": "Medium",
      "problem_slug": "edit-distance",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Set Matrix Zeroes",
      "problem_id": "73",
      "frontend_id": "73",
      "difficulty": "Medium",
      "problem_slug": "set-matrix-zeroes",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Search a 2D Matrix",
      "problem_id": "74",
      "frontend_id": "74",
      "difficulty": "Medium",
      "problem_slug": "search-a-2d-matrix",
      "topics": [
        "Array",
        "Binary Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Colors",
      "problem_id": "75",
      "frontend_id": "75",
      "difficulty": "Medium",
      "problem_slug": "sort-colors",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": true,
      "code_snippets": 16
    },
    {
      "title": "Minimum Window Substring",
      "problem_id": "76",
      "frontend_id": "76",
      "difficulty": "Hard",
      "problem_slug": "minimum-window-substring",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Combinations",
      "problem_id": "77",
      "frontend_id": "77",
      "difficulty": "Medium",
      "problem_slug": "combinations",
      "topics": [
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subsets",
      "problem_id": "78",
      "frontend_id": "78",
      "difficulty": "Medium",
      "problem_slug": "subsets",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Word Search",
      "problem_id": "79",
      "frontend_id": "79",
      "difficulty": "Medium",
      "problem_slug": "word-search",
      "topics": [
        "Array",
        "String",
        "Backtracking",
        "Depth-First Search",
        "Matrix"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Remove Duplicates from Sorted Array II",
      "problem_id": "80",
      "frontend_id": "80",
      "difficulty": "Medium",
      "problem_slug": "remove-duplicates-from-sorted-array-ii",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Search in Rotated Sorted Array II",
      "problem_id": "81",
      "frontend_id": "81",
      "difficulty": "Medium",
      "problem_slug": "search-in-rotated-sorted-array-ii",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Remove Duplicates from Sorted List II",
      "problem_id": "82",
      "frontend_id": "82",
      "difficulty": "Medium",
      "problem_slug": "remove-duplicates-from-sorted-list-ii",
      "topics": [
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Duplicates from Sorted List",
      "problem_id": "83",
      "frontend_id": "83",
      "difficulty": "Easy",
      "problem_slug": "remove-duplicates-from-sorted-list",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Rectangle in Histogram",
      "problem_id": "84",
      "frontend_id": "84",
      "difficulty": "Hard",
      "problem_slug": "largest-rectangle-in-histogram",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximal Rectangle",
      "problem_id": "85",
      "frontend_id": "85",
      "difficulty": "Hard",
      "problem_slug": "maximal-rectangle",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Matrix",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition List",
      "problem_id": "86",
      "frontend_id": "86",
      "difficulty": "Medium",
      "problem_slug": "partition-list",
      "topics": [
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Scramble String",
      "problem_id": "87",
      "frontend_id": "87",
      "difficulty": "Hard",
      "problem_slug": "scramble-string",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Sorted Array",
      "problem_id": "88",
      "frontend_id": "88",
      "difficulty": "Easy",
      "problem_slug": "merge-sorted-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": true,
      "code_snippets": 16
    },
    {
      "title": "Gray Code",
      "problem_id": "89",
      "frontend_id": "89",
      "difficulty": "Medium",
      "problem_slug": "gray-code",
      "topics": [
        "Math",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subsets II",
      "problem_id": "90",
      "frontend_id": "90",
      "difficulty": "Medium",
      "problem_slug": "subsets-ii",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decode Ways",
      "problem_id": "91",
      "frontend_id": "91",
      "difficulty": "Medium",
      "problem_slug": "decode-ways",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Linked List II",
      "problem_id": "92",
      "frontend_id": "92",
      "difficulty": "Medium",
      "problem_slug": "reverse-linked-list-ii",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Restore IP Addresses",
      "problem_id": "93",
      "frontend_id": "93",
      "difficulty": "Medium",
      "problem_slug": "restore-ip-addresses",
      "topics": [
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Inorder Traversal",
      "problem_id": "94",
      "frontend_id": "94",
      "difficulty": "Easy",
      "problem_slug": "binary-tree-inorder-traversal",
      "topics": [
        "Stack",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Binary Search Trees II",
      "problem_id": "95",
      "frontend_id": "95",
      "difficulty": "Medium",
      "problem_slug": "unique-binary-search-trees-ii",
      "topics": [
        "Dynamic Programming",
        "Backtracking",
        "Tree",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Binary Search Trees",
      "problem_id": "96",
      "frontend_id": "96",
      "difficulty": "Medium",
      "problem_slug": "unique-binary-search-trees",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Tree",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Interleaving String",
      "problem_id": "97",
      "frontend_id": "97",
      "difficulty": "Medium",
      "problem_slug": "interleaving-string",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Validate Binary Search Tree",
      "problem_id": "98",
      "frontend_id": "98",
      "difficulty": "Medium",
      "problem_slug": "validate-binary-search-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Recover Binary Search Tree",
      "problem_id": "99",
      "frontend_id": "99",
      "difficulty": "Medium",
      "problem_slug": "recover-binary-search-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 17
    },
    {
      "title": "Same Tree",
      "problem_id": "100",
      "frontend_id": "100",
      "difficulty": "Easy",
      "problem_slug": "same-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Symmetric Tree",
      "problem_id": "101",
      "frontend_id": "101",
      "difficulty": "Easy",
      "problem_slug": "symmetric-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Level Order Traversal",
      "problem_id": "102",
      "frontend_id": "102",
      "difficulty": "Medium",
      "problem_slug": "binary-tree-level-order-traversal",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Zigzag Level Order Traversal",
      "problem_id": "103",
      "frontend_id": "103",
      "difficulty": "Medium",
      "problem_slug": "binary-tree-zigzag-level-order-traversal",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Depth of Binary Tree",
      "problem_id": "104",
      "frontend_id": "104",
      "difficulty": "Easy",
      "problem_slug": "maximum-depth-of-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "problem_id": "105",
      "frontend_id": "105",
      "difficulty": "Medium",
      "problem_slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
      "topics": [
        "Array",
        "Hash Table",
        "Divide and Conquer",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Binary Tree from Inorder and Postorder Traversal",
      "problem_id": "106",
      "frontend_id": "106",
      "difficulty": "Medium",
      "problem_slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
      "topics": [
        "Array",
        "Hash Table",
        "Divide and Conquer",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Level Order Traversal II",
      "problem_id": "107",
      "frontend_id": "107",
      "difficulty": "Medium",
      "problem_slug": "binary-tree-level-order-traversal-ii",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert Sorted Array to Binary Search Tree",
      "problem_id": "108",
      "frontend_id": "108",
      "difficulty": "Easy",
      "problem_slug": "convert-sorted-array-to-binary-search-tree",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Tree",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert Sorted List to Binary Search Tree",
      "problem_id": "109",
      "frontend_id": "109",
      "difficulty": "Medium",
      "problem_slug": "convert-sorted-list-to-binary-search-tree",
      "topics": [
        "Linked List",
        "Divide and Conquer",
        "Tree",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Balanced Binary Tree",
      "problem_id": "110",
      "frontend_id": "110",
      "difficulty": "Easy",
      "problem_slug": "balanced-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Depth of Binary Tree",
      "problem_id": "111",
      "frontend_id": "111",
      "difficulty": "Easy",
      "problem_slug": "minimum-depth-of-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path Sum",
      "problem_id": "112",
      "frontend_id": "112",
      "difficulty": "Easy",
      "problem_slug": "path-sum",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path Sum II",
      "problem_id": "113",
      "frontend_id": "113",
      "difficulty": "Medium",
      "problem_slug": "path-sum-ii",
      "topics": [
        "Backtracking",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flatten Binary Tree to Linked List",
      "problem_id": "114",
      "frontend_id": "114",
      "difficulty": "Medium",
      "problem_slug": "flatten-binary-tree-to-linked-list",
      "topics": [
        "Linked List",
        "Stack",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 17
    },
    {
      "title": "Distinct Subsequences",
      "problem_id": "115",
      "frontend_id": "115",
      "difficulty": "Hard",
      "problem_slug": "distinct-subsequences",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Populating Next Right Pointers in Each Node",
      "problem_id": "116",
      "frontend_id": "116",
      "difficulty": "Medium",
      "problem_slug": "populating-next-right-pointers-in-each-node",
      "topics": [
        "Linked List",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Populating Next Right Pointers in Each Node II",
      "problem_id": "117",
      "frontend_id": "117",
      "difficulty": "Medium",
      "problem_slug": "populating-next-right-pointers-in-each-node-ii",
      "topics": [
        "Linked List",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Pascal's Triangle",
      "problem_id": "118",
      "frontend_id": "118",
      "difficulty": "Easy",
      "problem_slug": "pascals-triangle",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pascal's Triangle II",
      "problem_id": "119",
      "frontend_id": "119",
      "difficulty": "Easy",
      "problem_slug": "pascals-triangle-ii",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Triangle",
      "problem_id": "120",
      "frontend_id": "120",
      "difficulty": "Medium",
      "problem_slug": "triangle",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Time to Buy and Sell Stock",
      "problem_id": "121",
      "frontend_id": "121",
      "difficulty": "Easy",
      "problem_slug": "best-time-to-buy-and-sell-stock",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Time to Buy and Sell Stock II",
      "problem_id": "122",
      "frontend_id": "122",
      "difficulty": "Medium",
      "problem_slug": "best-time-to-buy-and-sell-stock-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Time to Buy and Sell Stock III",
      "problem_id": "123",
      "frontend_id": "123",
      "difficulty": "Hard",
      "problem_slug": "best-time-to-buy-and-sell-stock-iii",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Maximum Path Sum",
      "problem_id": "124",
      "frontend_id": "124",
      "difficulty": "Hard",
      "problem_slug": "binary-tree-maximum-path-sum",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Palindrome",
      "problem_id": "125",
      "frontend_id": "125",
      "difficulty": "Easy",
      "problem_slug": "valid-palindrome",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Word Ladder II",
      "problem_id": "126",
      "frontend_id": "126",
      "difficulty": "Hard",
      "problem_slug": "word-ladder-ii",
      "topics": [
        "Hash Table",
        "String",
        "Backtracking",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Word Ladder",
      "problem_id": "127",
      "frontend_id": "127",
      "difficulty": "Hard",
      "problem_slug": "word-ladder",
      "topics": [
        "Hash Table",
        "String",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Consecutive Sequence",
      "problem_id": "128",
      "frontend_id": "128",
      "difficulty": "Medium",
      "problem_slug": "longest-consecutive-sequence",
      "topics": [
        "Array",
        "Hash Table",
        "Union Find"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum Root to Leaf Numbers",
      "problem_id": "129",
      "frontend_id": "129",
      "difficulty": "Medium",
      "problem_slug": "sum-root-to-leaf-numbers",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Surrounded Regions",
      "problem_id": "130",
      "frontend_id": "130",
      "difficulty": "Medium",
      "problem_slug": "surrounded-regions",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Palindrome Partitioning",
      "problem_id": "131",
      "frontend_id": "131",
      "difficulty": "Medium",
      "problem_slug": "palindrome-partitioning",
      "topics": [
        "String",
        "Dynamic Programming",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindrome Partitioning II",
      "problem_id": "132",
      "frontend_id": "132",
      "difficulty": "Hard",
      "problem_slug": "palindrome-partitioning-ii",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Clone Graph",
      "problem_id": "133",
      "frontend_id": "133",
      "difficulty": "Medium",
      "problem_slug": "clone-graph",
      "topics": [
        "Hash Table",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Gas Station",
      "problem_id": "134",
      "frontend_id": "134",
      "difficulty": "Medium",
      "problem_slug": "gas-station",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Candy",
      "problem_id": "135",
      "frontend_id": "135",
      "difficulty": "Hard",
      "problem_slug": "candy",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Single Number",
      "problem_id": "136",
      "frontend_id": "136",
      "difficulty": "Easy",
      "problem_slug": "single-number",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Single Number II",
      "problem_id": "137",
      "frontend_id": "137",
      "difficulty": "Medium",
      "problem_slug": "single-number-ii",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Copy List with Random Pointer",
      "problem_id": "138",
      "frontend_id": "138",
      "difficulty": "Medium",
      "problem_slug": "copy-list-with-random-pointer",
      "topics": [
        "Hash Table",
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Word Break",
      "problem_id": "139",
      "frontend_id": "139",
      "difficulty": "Medium",
      "problem_slug": "word-break",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Trie",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Word Break II",
      "problem_id": "140",
      "frontend_id": "140",
      "difficulty": "Hard",
      "problem_slug": "word-break-ii",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Backtracking",
        "Trie",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Linked List Cycle",
      "problem_id": "141",
      "frontend_id": "141",
      "difficulty": "Easy",
      "problem_slug": "linked-list-cycle",
      "topics": [
        "Hash Table",
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": true,
      "code_snippets": 14
    },
    {
      "title": "Linked List Cycle II",
      "problem_id": "142",
      "frontend_id": "142",
      "difficulty": "Medium",
      "problem_slug": "linked-list-cycle-ii",
      "topics": [
        "Hash Table",
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": true,
      "code_snippets": 14
    },
    {
      "title": "Reorder List",
      "problem_id": "143",
      "frontend_id": "143",
      "difficulty": "Medium",
      "problem_slug": "reorder-list",
      "topics": [
        "Linked List",
        "Two Pointers",
        "Stack",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 17
    },
    {
      "title": "Binary Tree Preorder Traversal",
      "problem_id": "144",
      "frontend_id": "144",
      "difficulty": "Easy",
      "problem_slug": "binary-tree-preorder-traversal",
      "topics": [
        "Stack",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Postorder Traversal",
      "problem_id": "145",
      "frontend_id": "145",
      "difficulty": "Easy",
      "problem_slug": "binary-tree-postorder-traversal",
      "topics": [
        "Stack",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "LRU Cache",
      "problem_id": "146",
      "frontend_id": "146",
      "difficulty": "Medium",
      "problem_slug": "lru-cache",
      "topics": [
        "Hash Table",
        "Linked List",
        "Design",
        "Doubly-Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Insertion Sort List",
      "problem_id": "147",
      "frontend_id": "147",
      "difficulty": "Medium",
      "problem_slug": "insertion-sort-list",
      "topics": [
        "Linked List",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort List",
      "problem_id": "148",
      "frontend_id": "148",
      "difficulty": "Medium",
      "problem_slug": "sort-list",
      "topics": [
        "Linked List",
        "Two Pointers",
        "Divide and Conquer",
        "Sorting",
        "Merge Sort"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Max Points on a Line",
      "problem_id": "149",
      "frontend_id": "149",
      "difficulty": "Hard",
      "problem_slug": "max-points-on-a-line",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Evaluate Reverse Polish Notation",
      "problem_id": "150",
      "frontend_id": "150",
      "difficulty": "Medium",
      "problem_slug": "evaluate-reverse-polish-notation",
      "topics": [
        "Array",
        "Math",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Words in a String",
      "problem_id": "151",
      "frontend_id": "151",
      "difficulty": "Medium",
      "problem_slug": "reverse-words-in-a-string",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product Subarray",
      "problem_id": "152",
      "frontend_id": "152",
      "difficulty": "Medium",
      "problem_slug": "maximum-product-subarray",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum in Rotated Sorted Array",
      "problem_id": "153",
      "frontend_id": "153",
      "difficulty": "Medium",
      "problem_slug": "find-minimum-in-rotated-sorted-array",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum in Rotated Sorted Array II",
      "problem_id": "154",
      "frontend_id": "154",
      "difficulty": "Hard",
      "problem_slug": "find-minimum-in-rotated-sorted-array-ii",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Min Stack",
      "problem_id": "155",
      "frontend_id": "155",
      "difficulty": "Medium",
      "problem_slug": "min-stack",
      "topics": [
        "Stack",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Intersection of Two Linked Lists",
      "problem_id": "160",
      "frontend_id": "160",
      "difficulty": "Easy",
      "problem_slug": "intersection-of-two-linked-lists",
      "topics": [
        "Hash Table",
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Find Peak Element",
      "problem_id": "162",
      "frontend_id": "162",
      "difficulty": "Medium",
      "problem_slug": "find-peak-element",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Gap",
      "problem_id": "164",
      "frontend_id": "164",
      "difficulty": "Medium",
      "problem_slug": "maximum-gap",
      "topics": [
        "Array",
        "Sorting",
        "Bucket Sort",
        "Radix Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Compare Version Numbers",
      "problem_id": "165",
      "frontend_id": "165",
      "difficulty": "Medium",
      "problem_slug": "compare-version-numbers",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fraction to Recurring Decimal",
      "problem_id": "166",
      "frontend_id": "166",
      "difficulty": "Medium",
      "problem_slug": "fraction-to-recurring-decimal",
      "topics": [
        "Hash Table",
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Two Sum II - Input Array Is Sorted",
      "problem_id": "167",
      "frontend_id": "167",
      "difficulty": "Medium",
      "problem_slug": "two-sum-ii-input-array-is-sorted",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Excel Sheet Column Title",
      "problem_id": "168",
      "frontend_id": "168",
      "difficulty": "Easy",
      "problem_slug": "excel-sheet-column-title",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Majority Element",
      "problem_id": "169",
      "frontend_id": "169",
      "difficulty": "Easy",
      "problem_slug": "majority-element",
      "topics": [
        "Array",
        "Hash Table",
        "Divide and Conquer",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Excel Sheet Column Number",
      "problem_id": "171",
      "frontend_id": "171",
      "difficulty": "Easy",
      "problem_slug": "excel-sheet-column-number",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Factorial Trailing Zeroes",
      "problem_id": "172",
      "frontend_id": "172",
      "difficulty": "Medium",
      "problem_slug": "factorial-trailing-zeroes",
      "topics": [
        "Math"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Binary Search Tree Iterator",
      "problem_id": "173",
      "frontend_id": "173",
      "difficulty": "Medium",
      "problem_slug": "binary-search-tree-iterator",
      "topics": [
        "Stack",
        "Tree",
        "Design",
        "Binary Search Tree",
        "Binary Tree",
        "Iterator"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Dungeon Game",
      "problem_id": "174",
      "frontend_id": "174",
      "difficulty": "Hard",
      "problem_slug": "dungeon-game",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Combine Two Tables",
      "problem_id": "175",
      "frontend_id": "175",
      "difficulty": "Easy",
      "problem_slug": "combine-two-tables",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Second Highest Salary",
      "problem_id": "176",
      "frontend_id": "176",
      "difficulty": "Medium",
      "problem_slug": "second-highest-salary",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Nth Highest Salary",
      "problem_id": "177",
      "frontend_id": "177",
      "difficulty": "Medium",
      "problem_slug": "nth-highest-salary",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Rank Scores",
      "problem_id": "178",
      "frontend_id": "178",
      "difficulty": "Medium",
      "problem_slug": "rank-scores",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Largest Number",
      "problem_id": "179",
      "frontend_id": "179",
      "difficulty": "Medium",
      "problem_slug": "largest-number",
      "topics": [
        "Array",
        "String",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Consecutive Numbers",
      "problem_id": "180",
      "frontend_id": "180",
      "difficulty": "Medium",
      "problem_slug": "consecutive-numbers",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Employees Earning More Than Their Managers",
      "problem_id": "181",
      "frontend_id": "181",
      "difficulty": "Easy",
      "problem_slug": "employees-earning-more-than-their-managers",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Duplicate Emails",
      "problem_id": "182",
      "frontend_id": "182",
      "difficulty": "Easy",
      "problem_slug": "duplicate-emails",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Customers Who Never Order",
      "problem_id": "183",
      "frontend_id": "183",
      "difficulty": "Easy",
      "problem_slug": "customers-who-never-order",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Department Highest Salary",
      "problem_id": "184",
      "frontend_id": "184",
      "difficulty": "Medium",
      "problem_slug": "department-highest-salary",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Department Top Three Salaries",
      "problem_id": "185",
      "frontend_id": "185",
      "difficulty": "Hard",
      "problem_slug": "department-top-three-salaries",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Repeated DNA Sequences",
      "problem_id": "187",
      "frontend_id": "187",
      "difficulty": "Medium",
      "problem_slug": "repeated-dna-sequences",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Sliding Window",
        "Rolling Hash",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Time to Buy and Sell Stock IV",
      "problem_id": "188",
      "frontend_id": "188",
      "difficulty": "Hard",
      "problem_slug": "best-time-to-buy-and-sell-stock-iv",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotate Array",
      "problem_id": "189",
      "frontend_id": "189",
      "difficulty": "Medium",
      "problem_slug": "rotate-array",
      "topics": [
        "Array",
        "Math",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Reverse Bits",
      "problem_id": "190",
      "frontend_id": "190",
      "difficulty": "Easy",
      "problem_slug": "reverse-bits",
      "topics": [
        "Divide and Conquer",
        "Bit Manipulation"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Number of 1 Bits",
      "problem_id": "191",
      "frontend_id": "191",
      "difficulty": "Easy",
      "problem_slug": "number-of-1-bits",
      "topics": [
        "Divide and Conquer",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Word Frequency",
      "problem_id": "192",
      "frontend_id": "192",
      "difficulty": "Medium",
      "problem_slug": "word-frequency",
      "topics": [
        "Shell"
      ],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Valid Phone Numbers",
      "problem_id": "193",
      "frontend_id": "193",
      "difficulty": "Easy",
      "problem_slug": "valid-phone-numbers",
      "topics": [
        "Shell"
      ],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Transpose File",
      "problem_id": "194",
      "frontend_id": "194",
      "difficulty": "Medium",
      "problem_slug": "transpose-file",
      "topics": [
        "Shell"
      ],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Tenth Line",
      "problem_id": "195",
      "frontend_id": "195",
      "difficulty": "Easy",
      "problem_slug": "tenth-line",
      "topics": [
        "Shell"
      ],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Delete Duplicate Emails",
      "problem_id": "196",
      "frontend_id": "196",
      "difficulty": "Easy",
      "problem_slug": "delete-duplicate-emails",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Rising Temperature",
      "problem_id": "197",
      "frontend_id": "197",
      "difficulty": "Easy",
      "problem_slug": "rising-temperature",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "House Robber",
      "problem_id": "198",
      "frontend_id": "198",
      "difficulty": "Medium",
      "problem_slug": "house-robber",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Right Side View",
      "problem_id": "199",
      "frontend_id": "199",
      "difficulty": "Medium",
      "problem_slug": "binary-tree-right-side-view",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Islands",
      "problem_id": "200",
      "frontend_id": "200",
      "difficulty": "Medium",
      "problem_slug": "number-of-islands",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bitwise AND of Numbers Range",
      "problem_id": "201",
      "frontend_id": "201",
      "difficulty": "Medium",
      "problem_slug": "bitwise-and-of-numbers-range",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Happy Number",
      "problem_id": "202",
      "frontend_id": "202",
      "difficulty": "Easy",
      "problem_slug": "happy-number",
      "topics": [
        "Hash Table",
        "Math",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Linked List Elements",
      "problem_id": "203",
      "frontend_id": "203",
      "difficulty": "Easy",
      "problem_slug": "remove-linked-list-elements",
      "topics": [
        "Linked List",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Primes",
      "problem_id": "204",
      "frontend_id": "204",
      "difficulty": "Medium",
      "problem_slug": "count-primes",
      "topics": [
        "Array",
        "Math",
        "Enumeration",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Isomorphic Strings",
      "problem_id": "205",
      "frontend_id": "205",
      "difficulty": "Easy",
      "problem_slug": "isomorphic-strings",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Linked List",
      "problem_id": "206",
      "frontend_id": "206",
      "difficulty": "Easy",
      "problem_slug": "reverse-linked-list",
      "topics": [
        "Linked List",
        "Recursion"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Course Schedule",
      "problem_id": "207",
      "frontend_id": "207",
      "difficulty": "Medium",
      "problem_slug": "course-schedule",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Implement Trie (Prefix Tree)",
      "problem_id": "208",
      "frontend_id": "208",
      "difficulty": "Medium",
      "problem_slug": "implement-trie-prefix-tree",
      "topics": [
        "Hash Table",
        "String",
        "Design",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Size Subarray Sum",
      "problem_id": "209",
      "frontend_id": "209",
      "difficulty": "Medium",
      "problem_slug": "minimum-size-subarray-sum",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Course Schedule II",
      "problem_id": "210",
      "frontend_id": "210",
      "difficulty": "Medium",
      "problem_slug": "course-schedule-ii",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Add and Search Words Data Structure",
      "problem_id": "211",
      "frontend_id": "211",
      "difficulty": "Medium",
      "problem_slug": "design-add-and-search-words-data-structure",
      "topics": [
        "String",
        "Depth-First Search",
        "Design",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Word Search II",
      "problem_id": "212",
      "frontend_id": "212",
      "difficulty": "Hard",
      "problem_slug": "word-search-ii",
      "topics": [
        "Array",
        "String",
        "Backtracking",
        "Trie",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "House Robber II",
      "problem_id": "213",
      "frontend_id": "213",
      "difficulty": "Medium",
      "problem_slug": "house-robber-ii",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Palindrome",
      "problem_id": "214",
      "frontend_id": "214",
      "difficulty": "Hard",
      "problem_slug": "shortest-palindrome",
      "topics": [
        "String",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Largest Element in an Array",
      "problem_id": "215",
      "frontend_id": "215",
      "difficulty": "Medium",
      "problem_slug": "kth-largest-element-in-an-array",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Sorting",
        "Heap (Priority Queue)",
        "Quickselect"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Combination Sum III",
      "problem_id": "216",
      "frontend_id": "216",
      "difficulty": "Medium",
      "problem_slug": "combination-sum-iii",
      "topics": [
        "Array",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Contains Duplicate",
      "problem_id": "217",
      "frontend_id": "217",
      "difficulty": "Easy",
      "problem_slug": "contains-duplicate",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Skyline Problem",
      "problem_id": "218",
      "frontend_id": "218",
      "difficulty": "Hard",
      "problem_slug": "the-skyline-problem",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Line Sweep",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Contains Duplicate II",
      "problem_id": "219",
      "frontend_id": "219",
      "difficulty": "Easy",
      "problem_slug": "contains-duplicate-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Contains Duplicate III",
      "problem_id": "220",
      "frontend_id": "220",
      "difficulty": "Hard",
      "problem_slug": "contains-duplicate-iii",
      "topics": [
        "Array",
        "Sliding Window",
        "Sorting",
        "Bucket Sort",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximal Square",
      "problem_id": "221",
      "frontend_id": "221",
      "difficulty": "Medium",
      "problem_slug": "maximal-square",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Complete Tree Nodes",
      "problem_id": "222",
      "frontend_id": "222",
      "difficulty": "Easy",
      "problem_slug": "count-complete-tree-nodes",
      "topics": [
        "Binary Search",
        "Bit Manipulation",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rectangle Area",
      "problem_id": "223",
      "frontend_id": "223",
      "difficulty": "Medium",
      "problem_slug": "rectangle-area",
      "topics": [
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Basic Calculator",
      "problem_id": "224",
      "frontend_id": "224",
      "difficulty": "Hard",
      "problem_slug": "basic-calculator",
      "topics": [
        "Math",
        "String",
        "Stack",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Implement Stack using Queues",
      "problem_id": "225",
      "frontend_id": "225",
      "difficulty": "Easy",
      "problem_slug": "implement-stack-using-queues",
      "topics": [
        "Stack",
        "Design",
        "Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Invert Binary Tree",
      "problem_id": "226",
      "frontend_id": "226",
      "difficulty": "Easy",
      "problem_slug": "invert-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Basic Calculator II",
      "problem_id": "227",
      "frontend_id": "227",
      "difficulty": "Medium",
      "problem_slug": "basic-calculator-ii",
      "topics": [
        "Math",
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Summary Ranges",
      "problem_id": "228",
      "frontend_id": "228",
      "difficulty": "Easy",
      "problem_slug": "summary-ranges",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Majority Element II",
      "problem_id": "229",
      "frontend_id": "229",
      "difficulty": "Medium",
      "problem_slug": "majority-element-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Kth Smallest Element in a BST",
      "problem_id": "230",
      "frontend_id": "230",
      "difficulty": "Medium",
      "problem_slug": "kth-smallest-element-in-a-bst",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Power of Two",
      "problem_id": "231",
      "frontend_id": "231",
      "difficulty": "Easy",
      "problem_slug": "power-of-two",
      "topics": [
        "Math",
        "Bit Manipulation",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Implement Queue using Stacks",
      "problem_id": "232",
      "frontend_id": "232",
      "difficulty": "Easy",
      "problem_slug": "implement-queue-using-stacks",
      "topics": [
        "Stack",
        "Design",
        "Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Digit One",
      "problem_id": "233",
      "frontend_id": "233",
      "difficulty": "Hard",
      "problem_slug": "number-of-digit-one",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindrome Linked List",
      "problem_id": "234",
      "frontend_id": "234",
      "difficulty": "Easy",
      "problem_slug": "palindrome-linked-list",
      "topics": [
        "Linked List",
        "Two Pointers",
        "Stack",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lowest Common Ancestor of a Binary Search Tree",
      "problem_id": "235",
      "frontend_id": "235",
      "difficulty": "Medium",
      "problem_slug": "lowest-common-ancestor-of-a-binary-search-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Lowest Common Ancestor of a Binary Tree",
      "problem_id": "236",
      "frontend_id": "236",
      "difficulty": "Medium",
      "problem_slug": "lowest-common-ancestor-of-a-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Delete Node in a Linked List",
      "problem_id": "237",
      "frontend_id": "237",
      "difficulty": "Medium",
      "problem_slug": "delete-node-in-a-linked-list",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Product of Array Except Self",
      "problem_id": "238",
      "frontend_id": "238",
      "difficulty": "Medium",
      "problem_slug": "product-of-array-except-self",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Sliding Window Maximum",
      "problem_id": "239",
      "frontend_id": "239",
      "difficulty": "Hard",
      "problem_slug": "sliding-window-maximum",
      "topics": [
        "Array",
        "Queue",
        "Sliding Window",
        "Heap (Priority Queue)",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Search a 2D Matrix II",
      "problem_id": "240",
      "frontend_id": "240",
      "difficulty": "Medium",
      "problem_slug": "search-a-2d-matrix-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Different Ways to Add Parentheses",
      "problem_id": "241",
      "frontend_id": "241",
      "difficulty": "Medium",
      "problem_slug": "different-ways-to-add-parentheses",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming",
        "Recursion",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Anagram",
      "problem_id": "242",
      "frontend_id": "242",
      "difficulty": "Easy",
      "problem_slug": "valid-anagram",
      "topics": [
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Paths",
      "problem_id": "257",
      "frontend_id": "257",
      "difficulty": "Easy",
      "problem_slug": "binary-tree-paths",
      "topics": [
        "String",
        "Backtracking",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add Digits",
      "problem_id": "258",
      "frontend_id": "258",
      "difficulty": "Easy",
      "problem_slug": "add-digits",
      "topics": [
        "Math",
        "Simulation",
        "Number Theory"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Single Number III",
      "problem_id": "260",
      "frontend_id": "260",
      "difficulty": "Medium",
      "problem_slug": "single-number-iii",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Trips and Users",
      "problem_id": "262",
      "frontend_id": "262",
      "difficulty": "Hard",
      "problem_slug": "trips-and-users",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Ugly Number",
      "problem_id": "263",
      "frontend_id": "263",
      "difficulty": "Easy",
      "problem_slug": "ugly-number",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ugly Number II",
      "problem_id": "264",
      "frontend_id": "264",
      "difficulty": "Medium",
      "problem_slug": "ugly-number-ii",
      "topics": [
        "Hash Table",
        "Math",
        "Dynamic Programming",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Missing Number",
      "problem_id": "268",
      "frontend_id": "268",
      "difficulty": "Easy",
      "problem_slug": "missing-number",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Binary Search",
        "Bit Manipulation",
        "Sorting"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Integer to English Words",
      "problem_id": "273",
      "frontend_id": "273",
      "difficulty": "Hard",
      "problem_slug": "integer-to-english-words",
      "topics": [
        "Math",
        "String",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "H-Index",
      "problem_id": "274",
      "frontend_id": "274",
      "difficulty": "Medium",
      "problem_slug": "h-index",
      "topics": [
        "Array",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "H-Index II",
      "problem_id": "275",
      "frontend_id": "275",
      "difficulty": "Medium",
      "problem_slug": "h-index-ii",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "First Bad Version",
      "problem_id": "278",
      "frontend_id": "278",
      "difficulty": "Easy",
      "problem_slug": "first-bad-version",
      "topics": [
        "Binary Search",
        "Interactive"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Perfect Squares",
      "problem_id": "279",
      "frontend_id": "279",
      "difficulty": "Medium",
      "problem_slug": "perfect-squares",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Expression Add Operators",
      "problem_id": "282",
      "frontend_id": "282",
      "difficulty": "Hard",
      "problem_slug": "expression-add-operators",
      "topics": [
        "Math",
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Move Zeroes",
      "problem_id": "283",
      "frontend_id": "283",
      "difficulty": "Easy",
      "problem_slug": "move-zeroes",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Peeking Iterator",
      "problem_id": "284",
      "frontend_id": "284",
      "difficulty": "Medium",
      "problem_slug": "peeking-iterator",
      "topics": [
        "Array",
        "Design",
        "Iterator"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Find the Duplicate Number",
      "problem_id": "287",
      "frontend_id": "287",
      "difficulty": "Medium",
      "problem_slug": "find-the-duplicate-number",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Game of Life",
      "problem_id": "289",
      "frontend_id": "289",
      "difficulty": "Medium",
      "problem_slug": "game-of-life",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Word Pattern",
      "problem_id": "290",
      "frontend_id": "290",
      "difficulty": "Easy",
      "problem_slug": "word-pattern",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Nim Game",
      "problem_id": "292",
      "frontend_id": "292",
      "difficulty": "Easy",
      "problem_slug": "nim-game",
      "topics": [
        "Math",
        "Brainteaser",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Median from Data Stream",
      "problem_id": "295",
      "frontend_id": "295",
      "difficulty": "Hard",
      "problem_slug": "find-median-from-data-stream",
      "topics": [
        "Two Pointers",
        "Design",
        "Sorting",
        "Heap (Priority Queue)",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Serialize and Deserialize Binary Tree",
      "problem_id": "297",
      "frontend_id": "297",
      "difficulty": "Hard",
      "problem_slug": "serialize-and-deserialize-binary-tree",
      "topics": [
        "String",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Design",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Bulls and Cows",
      "problem_id": "299",
      "frontend_id": "299",
      "difficulty": "Medium",
      "problem_slug": "bulls-and-cows",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Increasing Subsequence",
      "problem_id": "300",
      "frontend_id": "300",
      "difficulty": "Medium",
      "problem_slug": "longest-increasing-subsequence",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Invalid Parentheses",
      "problem_id": "301",
      "frontend_id": "301",
      "difficulty": "Hard",
      "problem_slug": "remove-invalid-parentheses",
      "topics": [
        "String",
        "Backtracking",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Range Sum Query - Immutable",
      "problem_id": "303",
      "frontend_id": "303",
      "difficulty": "Easy",
      "problem_slug": "range-sum-query-immutable",
      "topics": [
        "Array",
        "Design",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Range Sum Query 2D - Immutable",
      "problem_id": "304",
      "frontend_id": "304",
      "difficulty": "Medium",
      "problem_slug": "range-sum-query-2d-immutable",
      "topics": [
        "Array",
        "Design",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Additive Number",
      "problem_id": "306",
      "frontend_id": "306",
      "difficulty": "Medium",
      "problem_slug": "additive-number",
      "topics": [
        "String",
        "Backtracking"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Range Sum Query - Mutable",
      "problem_id": "307",
      "frontend_id": "307",
      "difficulty": "Medium",
      "problem_slug": "range-sum-query-mutable",
      "topics": [
        "Array",
        "Design",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Time to Buy and Sell Stock with Cooldown",
      "problem_id": "309",
      "frontend_id": "309",
      "difficulty": "Medium",
      "problem_slug": "best-time-to-buy-and-sell-stock-with-cooldown",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Height Trees",
      "problem_id": "310",
      "frontend_id": "310",
      "difficulty": "Medium",
      "problem_slug": "minimum-height-trees",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Burst Balloons",
      "problem_id": "312",
      "frontend_id": "312",
      "difficulty": "Hard",
      "problem_slug": "burst-balloons",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Super Ugly Number",
      "problem_id": "313",
      "frontend_id": "313",
      "difficulty": "Medium",
      "problem_slug": "super-ugly-number",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Smaller Numbers After Self",
      "problem_id": "315",
      "frontend_id": "315",
      "difficulty": "Hard",
      "problem_slug": "count-of-smaller-numbers-after-self",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Merge Sort",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Duplicate Letters",
      "problem_id": "316",
      "frontend_id": "316",
      "difficulty": "Medium",
      "problem_slug": "remove-duplicate-letters",
      "topics": [
        "String",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of Word Lengths",
      "problem_id": "318",
      "frontend_id": "318",
      "difficulty": "Medium",
      "problem_slug": "maximum-product-of-word-lengths",
      "topics": [
        "Array",
        "String",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bulb Switcher",
      "problem_id": "319",
      "frontend_id": "319",
      "difficulty": "Medium",
      "problem_slug": "bulb-switcher",
      "topics": [
        "Math",
        "Brainteaser"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Create Maximum Number",
      "problem_id": "321",
      "frontend_id": "321",
      "difficulty": "Hard",
      "problem_slug": "create-maximum-number",
      "topics": [
        "Array",
        "Two Pointers",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Coin Change",
      "problem_id": "322",
      "frontend_id": "322",
      "difficulty": "Medium",
      "problem_slug": "coin-change",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Wiggle Sort II",
      "problem_id": "324",
      "frontend_id": "324",
      "difficulty": "Medium",
      "problem_slug": "wiggle-sort-ii",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Greedy",
        "Sorting",
        "Quickselect"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Power of Three",
      "problem_id": "326",
      "frontend_id": "326",
      "difficulty": "Easy",
      "problem_slug": "power-of-three",
      "topics": [
        "Math",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Range Sum",
      "problem_id": "327",
      "frontend_id": "327",
      "difficulty": "Hard",
      "problem_slug": "count-of-range-sum",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Merge Sort",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Odd Even Linked List",
      "problem_id": "328",
      "frontend_id": "328",
      "difficulty": "Medium",
      "problem_slug": "odd-even-linked-list",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Increasing Path in a Matrix",
      "problem_id": "329",
      "frontend_id": "329",
      "difficulty": "Hard",
      "problem_slug": "longest-increasing-path-in-a-matrix",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort",
        "Memoization",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Patching Array",
      "problem_id": "330",
      "frontend_id": "330",
      "difficulty": "Hard",
      "problem_slug": "patching-array",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Verify Preorder Serialization of a Binary Tree",
      "problem_id": "331",
      "frontend_id": "331",
      "difficulty": "Medium",
      "problem_slug": "verify-preorder-serialization-of-a-binary-tree",
      "topics": [
        "String",
        "Stack",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reconstruct Itinerary",
      "problem_id": "332",
      "frontend_id": "332",
      "difficulty": "Hard",
      "problem_slug": "reconstruct-itinerary",
      "topics": [
        "Depth-First Search",
        "Graph",
        "Eulerian Circuit"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Increasing Triplet Subsequence",
      "problem_id": "334",
      "frontend_id": "334",
      "difficulty": "Medium",
      "problem_slug": "increasing-triplet-subsequence",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Self Crossing",
      "problem_id": "335",
      "frontend_id": "335",
      "difficulty": "Hard",
      "problem_slug": "self-crossing",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindrome Pairs",
      "problem_id": "336",
      "frontend_id": "336",
      "difficulty": "Hard",
      "problem_slug": "palindrome-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "House Robber III",
      "problem_id": "337",
      "frontend_id": "337",
      "difficulty": "Medium",
      "problem_slug": "house-robber-iii",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Counting Bits",
      "problem_id": "338",
      "frontend_id": "338",
      "difficulty": "Easy",
      "problem_slug": "counting-bits",
      "topics": [
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flatten Nested List Iterator",
      "problem_id": "341",
      "frontend_id": "341",
      "difficulty": "Medium",
      "problem_slug": "flatten-nested-list-iterator",
      "topics": [
        "Stack",
        "Tree",
        "Depth-First Search",
        "Design",
        "Queue",
        "Iterator"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Power of Four",
      "problem_id": "342",
      "frontend_id": "342",
      "difficulty": "Easy",
      "problem_slug": "power-of-four",
      "topics": [
        "Math",
        "Bit Manipulation",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Integer Break",
      "problem_id": "343",
      "frontend_id": "343",
      "difficulty": "Medium",
      "problem_slug": "integer-break",
      "topics": [
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse String",
      "problem_id": "344",
      "frontend_id": "344",
      "difficulty": "Easy",
      "problem_slug": "reverse-string",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Reverse Vowels of a String",
      "problem_id": "345",
      "frontend_id": "345",
      "difficulty": "Easy",
      "problem_slug": "reverse-vowels-of-a-string",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Top K Frequent Elements",
      "problem_id": "347",
      "frontend_id": "347",
      "difficulty": "Medium",
      "problem_slug": "top-k-frequent-elements",
      "topics": [
        "Array",
        "Hash Table",
        "Divide and Conquer",
        "Sorting",
        "Heap (Priority Queue)",
        "Bucket Sort",
        "Counting",
        "Quickselect"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Intersection of Two Arrays",
      "problem_id": "349",
      "frontend_id": "349",
      "difficulty": "Easy",
      "problem_slug": "intersection-of-two-arrays",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Intersection of Two Arrays II",
      "problem_id": "350",
      "frontend_id": "350",
      "difficulty": "Easy",
      "problem_slug": "intersection-of-two-arrays-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Data Stream as Disjoint Intervals",
      "problem_id": "352",
      "frontend_id": "352",
      "difficulty": "Hard",
      "problem_slug": "data-stream-as-disjoint-intervals",
      "topics": [
        "Binary Search",
        "Design",
        "Ordered Set"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Russian Doll Envelopes",
      "problem_id": "354",
      "frontend_id": "354",
      "difficulty": "Hard",
      "problem_slug": "russian-doll-envelopes",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Twitter",
      "problem_id": "355",
      "frontend_id": "355",
      "difficulty": "Medium",
      "problem_slug": "design-twitter",
      "topics": [
        "Hash Table",
        "Linked List",
        "Design",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Numbers with Unique Digits",
      "problem_id": "357",
      "frontend_id": "357",
      "difficulty": "Medium",
      "problem_slug": "count-numbers-with-unique-digits",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Sum of Rectangle No Larger Than K",
      "problem_id": "363",
      "frontend_id": "363",
      "difficulty": "Hard",
      "problem_slug": "max-sum-of-rectangle-no-larger-than-k",
      "topics": [
        "Array",
        "Binary Search",
        "Matrix",
        "Prefix Sum",
        "Ordered Set"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Water and Jug Problem",
      "problem_id": "365",
      "frontend_id": "365",
      "difficulty": "Medium",
      "problem_slug": "water-and-jug-problem",
      "topics": [
        "Math",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Perfect Square",
      "problem_id": "367",
      "frontend_id": "367",
      "difficulty": "Easy",
      "problem_slug": "valid-perfect-square",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Divisible Subset",
      "problem_id": "368",
      "frontend_id": "368",
      "difficulty": "Medium",
      "problem_slug": "largest-divisible-subset",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Two Integers",
      "problem_id": "371",
      "frontend_id": "371",
      "difficulty": "Medium",
      "problem_slug": "sum-of-two-integers",
      "topics": [
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Super Pow",
      "problem_id": "372",
      "frontend_id": "372",
      "difficulty": "Medium",
      "problem_slug": "super-pow",
      "topics": [
        "Math",
        "Divide and Conquer"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find K Pairs with Smallest Sums",
      "problem_id": "373",
      "frontend_id": "373",
      "difficulty": "Medium",
      "problem_slug": "find-k-pairs-with-smallest-sums",
      "topics": [
        "Array",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Guess Number Higher or Lower",
      "problem_id": "374",
      "frontend_id": "374",
      "difficulty": "Easy",
      "problem_slug": "guess-number-higher-or-lower",
      "topics": [
        "Binary Search",
        "Interactive"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Guess Number Higher or Lower II",
      "problem_id": "375",
      "frontend_id": "375",
      "difficulty": "Medium",
      "problem_slug": "guess-number-higher-or-lower-ii",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Wiggle Subsequence",
      "problem_id": "376",
      "frontend_id": "376",
      "difficulty": "Medium",
      "problem_slug": "wiggle-subsequence",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Combination Sum IV",
      "problem_id": "377",
      "frontend_id": "377",
      "difficulty": "Medium",
      "problem_slug": "combination-sum-iv",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Kth Smallest Element in a Sorted Matrix",
      "problem_id": "378",
      "frontend_id": "378",
      "difficulty": "Medium",
      "problem_slug": "kth-smallest-element-in-a-sorted-matrix",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Insert Delete GetRandom O(1)",
      "problem_id": "380",
      "frontend_id": "380",
      "difficulty": "Medium",
      "problem_slug": "insert-delete-getrandom-o1",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Design",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
      "problem_id": "381",
      "frontend_id": "381",
      "difficulty": "Hard",
      "problem_slug": "insert-delete-getrandom-o1-duplicates-allowed",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Design",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Linked List Random Node",
      "problem_id": "382",
      "frontend_id": "382",
      "difficulty": "Medium",
      "problem_slug": "linked-list-random-node",
      "topics": [
        "Linked List",
        "Math",
        "Reservoir Sampling",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ransom Note",
      "problem_id": "383",
      "frontend_id": "383",
      "difficulty": "Easy",
      "problem_slug": "ransom-note",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shuffle an Array",
      "problem_id": "384",
      "frontend_id": "384",
      "difficulty": "Medium",
      "problem_slug": "shuffle-an-array",
      "topics": [
        "Array",
        "Math",
        "Design",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Mini Parser",
      "problem_id": "385",
      "frontend_id": "385",
      "difficulty": "Medium",
      "problem_slug": "mini-parser",
      "topics": [
        "String",
        "Stack",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographical Numbers",
      "problem_id": "386",
      "frontend_id": "386",
      "difficulty": "Medium",
      "problem_slug": "lexicographical-numbers",
      "topics": [
        "Depth-First Search",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "First Unique Character in a String",
      "problem_id": "387",
      "frontend_id": "387",
      "difficulty": "Easy",
      "problem_slug": "first-unique-character-in-a-string",
      "topics": [
        "Hash Table",
        "String",
        "Queue",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Absolute File Path",
      "problem_id": "388",
      "frontend_id": "388",
      "difficulty": "Medium",
      "problem_slug": "longest-absolute-file-path",
      "topics": [
        "String",
        "Stack",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Difference",
      "problem_id": "389",
      "frontend_id": "389",
      "difficulty": "Easy",
      "problem_slug": "find-the-difference",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Elimination Game",
      "problem_id": "390",
      "frontend_id": "390",
      "difficulty": "Medium",
      "problem_slug": "elimination-game",
      "topics": [
        "Math",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Perfect Rectangle",
      "problem_id": "391",
      "frontend_id": "391",
      "difficulty": "Hard",
      "problem_slug": "perfect-rectangle",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Geometry",
        "Line Sweep"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Is Subsequence",
      "problem_id": "392",
      "frontend_id": "392",
      "difficulty": "Easy",
      "problem_slug": "is-subsequence",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "UTF-8 Validation",
      "problem_id": "393",
      "frontend_id": "393",
      "difficulty": "Medium",
      "problem_slug": "utf-8-validation",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decode String",
      "problem_id": "394",
      "frontend_id": "394",
      "difficulty": "Medium",
      "problem_slug": "decode-string",
      "topics": [
        "String",
        "Stack",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Substring with At Least K Repeating Characters",
      "problem_id": "395",
      "frontend_id": "395",
      "difficulty": "Medium",
      "problem_slug": "longest-substring-with-at-least-k-repeating-characters",
      "topics": [
        "Hash Table",
        "String",
        "Divide and Conquer",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotate Function",
      "problem_id": "396",
      "frontend_id": "396",
      "difficulty": "Medium",
      "problem_slug": "rotate-function",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Integer Replacement",
      "problem_id": "397",
      "frontend_id": "397",
      "difficulty": "Medium",
      "problem_slug": "integer-replacement",
      "topics": [
        "Dynamic Programming",
        "Greedy",
        "Bit Manipulation",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Random Pick Index",
      "problem_id": "398",
      "frontend_id": "398",
      "difficulty": "Medium",
      "problem_slug": "random-pick-index",
      "topics": [
        "Hash Table",
        "Math",
        "Reservoir Sampling",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Evaluate Division",
      "problem_id": "399",
      "frontend_id": "399",
      "difficulty": "Medium",
      "problem_slug": "evaluate-division",
      "topics": [
        "Array",
        "String",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Nth Digit",
      "problem_id": "400",
      "frontend_id": "400",
      "difficulty": "Medium",
      "problem_slug": "nth-digit",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Watch",
      "problem_id": "401",
      "frontend_id": "401",
      "difficulty": "Easy",
      "problem_slug": "binary-watch",
      "topics": [
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove K Digits",
      "problem_id": "402",
      "frontend_id": "402",
      "difficulty": "Medium",
      "problem_slug": "remove-k-digits",
      "topics": [
        "String",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Frog Jump",
      "problem_id": "403",
      "frontend_id": "403",
      "difficulty": "Hard",
      "problem_slug": "frog-jump",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Left Leaves",
      "problem_id": "404",
      "frontend_id": "404",
      "difficulty": "Easy",
      "problem_slug": "sum-of-left-leaves",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert a Number to Hexadecimal",
      "problem_id": "405",
      "frontend_id": "405",
      "difficulty": "Easy",
      "problem_slug": "convert-a-number-to-hexadecimal",
      "topics": [
        "Math",
        "String",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Queue Reconstruction by Height",
      "problem_id": "406",
      "frontend_id": "406",
      "difficulty": "Medium",
      "problem_slug": "queue-reconstruction-by-height",
      "topics": [
        "Array",
        "Binary Indexed Tree",
        "Segment Tree",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Trapping Rain Water II",
      "problem_id": "407",
      "frontend_id": "407",
      "difficulty": "Hard",
      "problem_slug": "trapping-rain-water-ii",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindrome",
      "problem_id": "409",
      "frontend_id": "409",
      "difficulty": "Easy",
      "problem_slug": "longest-palindrome",
      "topics": [
        "Hash Table",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Array Largest Sum",
      "problem_id": "410",
      "frontend_id": "410",
      "difficulty": "Hard",
      "problem_slug": "split-array-largest-sum",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Greedy",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fizz Buzz",
      "problem_id": "412",
      "frontend_id": "412",
      "difficulty": "Easy",
      "problem_slug": "fizz-buzz",
      "topics": [
        "Math",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Arithmetic Slices",
      "problem_id": "413",
      "frontend_id": "413",
      "difficulty": "Medium",
      "problem_slug": "arithmetic-slices",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Third Maximum Number",
      "problem_id": "414",
      "frontend_id": "414",
      "difficulty": "Easy",
      "problem_slug": "third-maximum-number",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add Strings",
      "problem_id": "415",
      "frontend_id": "415",
      "difficulty": "Easy",
      "problem_slug": "add-strings",
      "topics": [
        "Math",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Equal Subset Sum",
      "problem_id": "416",
      "frontend_id": "416",
      "difficulty": "Medium",
      "problem_slug": "partition-equal-subset-sum",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pacific Atlantic Water Flow",
      "problem_id": "417",
      "frontend_id": "417",
      "difficulty": "Medium",
      "problem_slug": "pacific-atlantic-water-flow",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Battleships in a Board",
      "problem_id": "419",
      "frontend_id": "419",
      "difficulty": "Medium",
      "problem_slug": "battleships-in-a-board",
      "topics": [
        "Array",
        "Depth-First Search",
        "Matrix"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Strong Password Checker",
      "problem_id": "420",
      "frontend_id": "420",
      "difficulty": "Hard",
      "problem_slug": "strong-password-checker",
      "topics": [
        "String",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum XOR of Two Numbers in an Array",
      "problem_id": "421",
      "frontend_id": "421",
      "difficulty": "Medium",
      "problem_slug": "maximum-xor-of-two-numbers-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reconstruct Original Digits from English",
      "problem_id": "423",
      "frontend_id": "423",
      "difficulty": "Medium",
      "problem_slug": "reconstruct-original-digits-from-english",
      "topics": [
        "Hash Table",
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Repeating Character Replacement",
      "problem_id": "424",
      "frontend_id": "424",
      "difficulty": "Medium",
      "problem_slug": "longest-repeating-character-replacement",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Quad Tree",
      "problem_id": "772",
      "frontend_id": "427",
      "difficulty": "Medium",
      "problem_slug": "construct-quad-tree",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Tree",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 13
    },
    {
      "title": "N-ary Tree Level Order Traversal",
      "problem_id": "764",
      "frontend_id": "429",
      "difficulty": "Medium",
      "problem_slug": "n-ary-tree-level-order-traversal",
      "topics": [
        "Tree",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Flatten a Multilevel Doubly Linked List",
      "problem_id": "766",
      "frontend_id": "430",
      "difficulty": "Medium",
      "problem_slug": "flatten-a-multilevel-doubly-linked-list",
      "topics": [
        "Linked List",
        "Depth-First Search",
        "Doubly-Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 13
    },
    {
      "title": "All O`one Data Structure",
      "problem_id": "432",
      "frontend_id": "432",
      "difficulty": "Hard",
      "problem_slug": "all-oone-data-structure",
      "topics": [
        "Hash Table",
        "Linked List",
        "Design",
        "Doubly-Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Genetic Mutation",
      "problem_id": "433",
      "frontend_id": "433",
      "difficulty": "Medium",
      "problem_slug": "minimum-genetic-mutation",
      "topics": [
        "Hash Table",
        "String",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Segments in a String",
      "problem_id": "434",
      "frontend_id": "434",
      "difficulty": "Easy",
      "problem_slug": "number-of-segments-in-a-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Non-overlapping Intervals",
      "problem_id": "435",
      "frontend_id": "435",
      "difficulty": "Medium",
      "problem_slug": "non-overlapping-intervals",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path Sum III",
      "problem_id": "437",
      "frontend_id": "437",
      "difficulty": "Medium",
      "problem_slug": "path-sum-iii",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Anagrams in a String",
      "problem_id": "438",
      "frontend_id": "438",
      "difficulty": "Medium",
      "problem_slug": "find-all-anagrams-in-a-string",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-th Smallest in Lexicographical Order",
      "problem_id": "440",
      "frontend_id": "440",
      "difficulty": "Hard",
      "problem_slug": "k-th-smallest-in-lexicographical-order",
      "topics": [
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Arranging Coins",
      "problem_id": "441",
      "frontend_id": "441",
      "difficulty": "Easy",
      "problem_slug": "arranging-coins",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Duplicates in an Array",
      "problem_id": "442",
      "frontend_id": "442",
      "difficulty": "Medium",
      "problem_slug": "find-all-duplicates-in-an-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "String Compression",
      "problem_id": "443",
      "frontend_id": "443",
      "difficulty": "Medium",
      "problem_slug": "string-compression",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Add Two Numbers II",
      "problem_id": "445",
      "frontend_id": "445",
      "difficulty": "Medium",
      "problem_slug": "add-two-numbers-ii",
      "topics": [
        "Linked List",
        "Math",
        "Stack"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Arithmetic Slices II - Subsequence",
      "problem_id": "446",
      "frontend_id": "446",
      "difficulty": "Hard",
      "problem_slug": "arithmetic-slices-ii-subsequence",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Boomerangs",
      "problem_id": "447",
      "frontend_id": "447",
      "difficulty": "Medium",
      "problem_slug": "number-of-boomerangs",
      "topics": [
        "Array",
        "Hash Table",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Numbers Disappeared in an Array",
      "problem_id": "448",
      "frontend_id": "448",
      "difficulty": "Easy",
      "problem_slug": "find-all-numbers-disappeared-in-an-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Serialize and Deserialize BST",
      "problem_id": "449",
      "frontend_id": "449",
      "difficulty": "Medium",
      "problem_slug": "serialize-and-deserialize-bst",
      "topics": [
        "String",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Design",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Delete Node in a BST",
      "problem_id": "450",
      "frontend_id": "450",
      "difficulty": "Medium",
      "problem_slug": "delete-node-in-a-bst",
      "topics": [
        "Tree",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Sort Characters By Frequency",
      "problem_id": "451",
      "frontend_id": "451",
      "difficulty": "Medium",
      "problem_slug": "sort-characters-by-frequency",
      "topics": [
        "Hash Table",
        "String",
        "Sorting",
        "Heap (Priority Queue)",
        "Bucket Sort",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Arrows to Burst Balloons",
      "problem_id": "452",
      "frontend_id": "452",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-arrows-to-burst-balloons",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Equal Array Elements",
      "problem_id": "453",
      "frontend_id": "453",
      "difficulty": "Medium",
      "problem_slug": "minimum-moves-to-equal-array-elements",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "4Sum II",
      "problem_id": "454",
      "frontend_id": "454",
      "difficulty": "Medium",
      "problem_slug": "4sum-ii",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Assign Cookies",
      "problem_id": "455",
      "frontend_id": "455",
      "difficulty": "Easy",
      "problem_slug": "assign-cookies",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "132 Pattern",
      "problem_id": "456",
      "frontend_id": "456",
      "difficulty": "Medium",
      "problem_slug": "132-pattern",
      "topics": [
        "Array",
        "Binary Search",
        "Stack",
        "Monotonic Stack",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Circular Array Loop",
      "problem_id": "457",
      "frontend_id": "457",
      "difficulty": "Medium",
      "problem_slug": "circular-array-loop",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Poor Pigs",
      "problem_id": "458",
      "frontend_id": "458",
      "difficulty": "Hard",
      "problem_slug": "poor-pigs",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Repeated Substring Pattern",
      "problem_id": "459",
      "frontend_id": "459",
      "difficulty": "Easy",
      "problem_slug": "repeated-substring-pattern",
      "topics": [
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "LFU Cache",
      "problem_id": "460",
      "frontend_id": "460",
      "difficulty": "Hard",
      "problem_slug": "lfu-cache",
      "topics": [
        "Hash Table",
        "Linked List",
        "Design",
        "Doubly-Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Hamming Distance",
      "problem_id": "461",
      "frontend_id": "461",
      "difficulty": "Easy",
      "problem_slug": "hamming-distance",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Equal Array Elements II",
      "problem_id": "462",
      "frontend_id": "462",
      "difficulty": "Medium",
      "problem_slug": "minimum-moves-to-equal-array-elements-ii",
      "topics": [
        "Array",
        "Math",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Island Perimeter",
      "problem_id": "463",
      "frontend_id": "463",
      "difficulty": "Easy",
      "problem_slug": "island-perimeter",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Can I Win",
      "problem_id": "464",
      "frontend_id": "464",
      "difficulty": "Medium",
      "problem_slug": "can-i-win",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Bit Manipulation",
        "Memoization",
        "Game Theory",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count The Repetitions",
      "problem_id": "466",
      "frontend_id": "466",
      "difficulty": "Hard",
      "problem_slug": "count-the-repetitions",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Substrings in Wraparound String",
      "problem_id": "467",
      "frontend_id": "467",
      "difficulty": "Medium",
      "problem_slug": "unique-substrings-in-wraparound-string",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Validate IP Address",
      "problem_id": "468",
      "frontend_id": "468",
      "difficulty": "Medium",
      "problem_slug": "validate-ip-address",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Implement Rand10() Using Rand7()",
      "problem_id": "903",
      "frontend_id": "470",
      "difficulty": "Medium",
      "problem_slug": "implement-rand10-using-rand7",
      "topics": [
        "Math",
        "Rejection Sampling",
        "Randomized",
        "Probability and Statistics"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Concatenated Words",
      "problem_id": "472",
      "frontend_id": "472",
      "difficulty": "Hard",
      "problem_slug": "concatenated-words",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Depth-First Search",
        "Trie",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Matchsticks to Square",
      "problem_id": "473",
      "frontend_id": "473",
      "difficulty": "Medium",
      "problem_slug": "matchsticks-to-square",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ones and Zeroes",
      "problem_id": "474",
      "frontend_id": "474",
      "difficulty": "Medium",
      "problem_slug": "ones-and-zeroes",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Heaters",
      "problem_id": "475",
      "frontend_id": "475",
      "difficulty": "Medium",
      "problem_slug": "heaters",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number Complement",
      "problem_id": "476",
      "frontend_id": "476",
      "difficulty": "Easy",
      "problem_slug": "number-complement",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Total Hamming Distance",
      "problem_id": "477",
      "frontend_id": "477",
      "difficulty": "Medium",
      "problem_slug": "total-hamming-distance",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Generate Random Point in a Circle",
      "problem_id": "915",
      "frontend_id": "478",
      "difficulty": "Medium",
      "problem_slug": "generate-random-point-in-a-circle",
      "topics": [
        "Math",
        "Geometry",
        "Rejection Sampling",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Palindrome Product",
      "problem_id": "479",
      "frontend_id": "479",
      "difficulty": "Hard",
      "problem_slug": "largest-palindrome-product",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sliding Window Median",
      "problem_id": "480",
      "frontend_id": "480",
      "difficulty": "Hard",
      "problem_slug": "sliding-window-median",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Magical String",
      "problem_id": "481",
      "frontend_id": "481",
      "difficulty": "Medium",
      "problem_slug": "magical-string",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "License Key Formatting",
      "problem_id": "482",
      "frontend_id": "482",
      "difficulty": "Easy",
      "problem_slug": "license-key-formatting",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Good Base",
      "problem_id": "483",
      "frontend_id": "483",
      "difficulty": "Hard",
      "problem_slug": "smallest-good-base",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Consecutive Ones",
      "problem_id": "485",
      "frontend_id": "485",
      "difficulty": "Easy",
      "problem_slug": "max-consecutive-ones",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Predict the Winner",
      "problem_id": "486",
      "frontend_id": "486",
      "difficulty": "Medium",
      "problem_slug": "predict-the-winner",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Recursion",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Zuma Game",
      "problem_id": "488",
      "frontend_id": "488",
      "difficulty": "Hard",
      "problem_slug": "zuma-game",
      "topics": [
        "String",
        "Dynamic Programming",
        "Stack",
        "Breadth-First Search",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Non-decreasing Subsequences",
      "problem_id": "491",
      "frontend_id": "491",
      "difficulty": "Medium",
      "problem_slug": "non-decreasing-subsequences",
      "topics": [
        "Array",
        "Hash Table",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct the Rectangle",
      "problem_id": "492",
      "frontend_id": "492",
      "difficulty": "Easy",
      "problem_slug": "construct-the-rectangle",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Pairs",
      "problem_id": "493",
      "frontend_id": "493",
      "difficulty": "Hard",
      "problem_slug": "reverse-pairs",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Merge Sort",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Target Sum",
      "problem_id": "494",
      "frontend_id": "494",
      "difficulty": "Medium",
      "problem_slug": "target-sum",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Teemo Attacking",
      "problem_id": "495",
      "frontend_id": "495",
      "difficulty": "Easy",
      "problem_slug": "teemo-attacking",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Next Greater Element I",
      "problem_id": "496",
      "frontend_id": "496",
      "difficulty": "Easy",
      "problem_slug": "next-greater-element-i",
      "topics": [
        "Array",
        "Hash Table",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Random Point in Non-overlapping Rectangles",
      "problem_id": "914",
      "frontend_id": "497",
      "difficulty": "Medium",
      "problem_slug": "random-point-in-non-overlapping-rectangles",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Reservoir Sampling",
        "Prefix Sum",
        "Ordered Set",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Diagonal Traverse",
      "problem_id": "498",
      "frontend_id": "498",
      "difficulty": "Medium",
      "problem_slug": "diagonal-traverse",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Keyboard Row",
      "problem_id": "500",
      "frontend_id": "500",
      "difficulty": "Easy",
      "problem_slug": "keyboard-row",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Mode in Binary Search Tree",
      "problem_id": "501",
      "frontend_id": "501",
      "difficulty": "Easy",
      "problem_slug": "find-mode-in-binary-search-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "IPO",
      "problem_id": "502",
      "frontend_id": "502",
      "difficulty": "Hard",
      "problem_slug": "ipo",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Next Greater Element II",
      "problem_id": "503",
      "frontend_id": "503",
      "difficulty": "Medium",
      "problem_slug": "next-greater-element-ii",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Base 7",
      "problem_id": "504",
      "frontend_id": "504",
      "difficulty": "Easy",
      "problem_slug": "base-7",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Relative Ranks",
      "problem_id": "506",
      "frontend_id": "506",
      "difficulty": "Easy",
      "problem_slug": "relative-ranks",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Perfect Number",
      "problem_id": "507",
      "frontend_id": "507",
      "difficulty": "Easy",
      "problem_slug": "perfect-number",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Frequent Subtree Sum",
      "problem_id": "508",
      "frontend_id": "508",
      "difficulty": "Medium",
      "problem_slug": "most-frequent-subtree-sum",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fibonacci Number",
      "problem_id": "1013",
      "frontend_id": "509",
      "difficulty": "Easy",
      "problem_slug": "fibonacci-number",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Recursion",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Game Play Analysis I",
      "problem_id": "1179",
      "frontend_id": "511",
      "difficulty": "Easy",
      "problem_slug": "game-play-analysis-i",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find Bottom Left Tree Value",
      "problem_id": "513",
      "frontend_id": "513",
      "difficulty": "Medium",
      "problem_slug": "find-bottom-left-tree-value",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Freedom Trail",
      "problem_id": "514",
      "frontend_id": "514",
      "difficulty": "Hard",
      "problem_slug": "freedom-trail",
      "topics": [
        "String",
        "Dynamic Programming",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Largest Value in Each Tree Row",
      "problem_id": "515",
      "frontend_id": "515",
      "difficulty": "Medium",
      "problem_slug": "find-largest-value-in-each-tree-row",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindromic Subsequence",
      "problem_id": "516",
      "frontend_id": "516",
      "difficulty": "Medium",
      "problem_slug": "longest-palindromic-subsequence",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Super Washing Machines",
      "problem_id": "517",
      "frontend_id": "517",
      "difficulty": "Hard",
      "problem_slug": "super-washing-machines",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Coin Change II",
      "problem_id": "518",
      "frontend_id": "518",
      "difficulty": "Medium",
      "problem_slug": "coin-change-ii",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Random Flip Matrix",
      "problem_id": "913",
      "frontend_id": "519",
      "difficulty": "Medium",
      "problem_slug": "random-flip-matrix",
      "topics": [
        "Hash Table",
        "Math",
        "Reservoir Sampling",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Detect Capital",
      "problem_id": "520",
      "frontend_id": "520",
      "difficulty": "Easy",
      "problem_slug": "detect-capital",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Uncommon Subsequence I",
      "problem_id": "521",
      "frontend_id": "521",
      "difficulty": "Easy",
      "problem_slug": "longest-uncommon-subsequence-i",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Uncommon Subsequence II",
      "problem_id": "522",
      "frontend_id": "522",
      "difficulty": "Medium",
      "problem_slug": "longest-uncommon-subsequence-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Continuous Subarray Sum",
      "problem_id": "523",
      "frontend_id": "523",
      "difficulty": "Medium",
      "problem_slug": "continuous-subarray-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Word in Dictionary through Deleting",
      "problem_id": "524",
      "frontend_id": "524",
      "difficulty": "Medium",
      "problem_slug": "longest-word-in-dictionary-through-deleting",
      "topics": [
        "Array",
        "Two Pointers",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Contiguous Array",
      "problem_id": "525",
      "frontend_id": "525",
      "difficulty": "Medium",
      "problem_slug": "contiguous-array",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Beautiful Arrangement",
      "problem_id": "526",
      "frontend_id": "526",
      "difficulty": "Medium",
      "problem_slug": "beautiful-arrangement",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Random Pick with Weight",
      "problem_id": "912",
      "frontend_id": "528",
      "difficulty": "Medium",
      "problem_slug": "random-pick-with-weight",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Prefix Sum",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minesweeper",
      "problem_id": "529",
      "frontend_id": "529",
      "difficulty": "Medium",
      "problem_slug": "minesweeper",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Absolute Difference in BST",
      "problem_id": "530",
      "frontend_id": "530",
      "difficulty": "Easy",
      "problem_slug": "minimum-absolute-difference-in-bst",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-diff Pairs in an Array",
      "problem_id": "532",
      "frontend_id": "532",
      "difficulty": "Medium",
      "problem_slug": "k-diff-pairs-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Encode and Decode TinyURL",
      "problem_id": "535",
      "frontend_id": "535",
      "difficulty": "Medium",
      "problem_slug": "encode-and-decode-tinyurl",
      "topics": [
        "Hash Table",
        "String",
        "Design",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Complex Number Multiplication",
      "problem_id": "537",
      "frontend_id": "537",
      "difficulty": "Medium",
      "problem_slug": "complex-number-multiplication",
      "topics": [
        "Math",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert BST to Greater Tree",
      "problem_id": "538",
      "frontend_id": "538",
      "difficulty": "Medium",
      "problem_slug": "convert-bst-to-greater-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time Difference",
      "problem_id": "539",
      "frontend_id": "539",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-difference",
      "topics": [
        "Array",
        "Math",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Single Element in a Sorted Array",
      "problem_id": "540",
      "frontend_id": "540",
      "difficulty": "Medium",
      "problem_slug": "single-element-in-a-sorted-array",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse String II",
      "problem_id": "541",
      "frontend_id": "541",
      "difficulty": "Easy",
      "problem_slug": "reverse-string-ii",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "01 Matrix",
      "problem_id": "542",
      "frontend_id": "542",
      "difficulty": "Medium",
      "problem_slug": "01-matrix",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Diameter of Binary Tree",
      "problem_id": "543",
      "frontend_id": "543",
      "difficulty": "Easy",
      "problem_slug": "diameter-of-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Boxes",
      "problem_id": "546",
      "frontend_id": "546",
      "difficulty": "Hard",
      "problem_slug": "remove-boxes",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Provinces",
      "problem_id": "547",
      "frontend_id": "547",
      "difficulty": "Medium",
      "problem_slug": "number-of-provinces",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Game Play Analysis IV",
      "problem_id": "1182",
      "frontend_id": "550",
      "difficulty": "Medium",
      "problem_slug": "game-play-analysis-iv",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Student Attendance Record I",
      "problem_id": "551",
      "frontend_id": "551",
      "difficulty": "Easy",
      "problem_slug": "student-attendance-record-i",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Student Attendance Record II",
      "problem_id": "552",
      "frontend_id": "552",
      "difficulty": "Hard",
      "problem_slug": "student-attendance-record-ii",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Optimal Division",
      "problem_id": "553",
      "frontend_id": "553",
      "difficulty": "Medium",
      "problem_slug": "optimal-division",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Brick Wall",
      "problem_id": "554",
      "frontend_id": "554",
      "difficulty": "Medium",
      "problem_slug": "brick-wall",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Next Greater Element III",
      "problem_id": "556",
      "frontend_id": "556",
      "difficulty": "Medium",
      "problem_slug": "next-greater-element-iii",
      "topics": [
        "Math",
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Words in a String III",
      "problem_id": "557",
      "frontend_id": "557",
      "difficulty": "Easy",
      "problem_slug": "reverse-words-in-a-string-iii",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
      "problem_id": "773",
      "frontend_id": "558",
      "difficulty": "Medium",
      "problem_slug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
      "topics": [
        "Divide and Conquer",
        "Tree"
      ],
      "follow_ups": false,
      "code_snippets": 13
    },
    {
      "title": "Maximum Depth of N-ary Tree",
      "problem_id": "774",
      "frontend_id": "559",
      "difficulty": "Easy",
      "problem_slug": "maximum-depth-of-n-ary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 14
    },
    {
      "title": "Subarray Sum Equals K",
      "problem_id": "560",
      "frontend_id": "560",
      "difficulty": "Medium",
      "problem_slug": "subarray-sum-equals-k",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Array Partition",
      "problem_id": "561",
      "frontend_id": "561",
      "difficulty": "Easy",
      "problem_slug": "array-partition",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Tilt",
      "problem_id": "563",
      "frontend_id": "563",
      "difficulty": "Easy",
      "problem_slug": "binary-tree-tilt",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Closest Palindrome",
      "problem_id": "564",
      "frontend_id": "564",
      "difficulty": "Hard",
      "problem_slug": "find-the-closest-palindrome",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Array Nesting",
      "problem_id": "565",
      "frontend_id": "565",
      "difficulty": "Medium",
      "problem_slug": "array-nesting",
      "topics": [
        "Array",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reshape the Matrix",
      "problem_id": "566",
      "frontend_id": "566",
      "difficulty": "Easy",
      "problem_slug": "reshape-the-matrix",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Permutation in String",
      "problem_id": "567",
      "frontend_id": "567",
      "difficulty": "Medium",
      "problem_slug": "permutation-in-string",
      "topics": [
        "Hash Table",
        "Two Pointers",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Managers with at Least 5 Direct Reports",
      "problem_id": "570",
      "frontend_id": "570",
      "difficulty": "Medium",
      "problem_slug": "managers-with-at-least-5-direct-reports",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Subtree of Another Tree",
      "problem_id": "572",
      "frontend_id": "572",
      "difficulty": "Easy",
      "problem_slug": "subtree-of-another-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "String Matching",
        "Binary Tree",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Candies",
      "problem_id": "575",
      "frontend_id": "575",
      "difficulty": "Easy",
      "problem_slug": "distribute-candies",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Out of Boundary Paths",
      "problem_id": "576",
      "frontend_id": "576",
      "difficulty": "Medium",
      "problem_slug": "out-of-boundary-paths",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Employee Bonus",
      "problem_id": "577",
      "frontend_id": "577",
      "difficulty": "Easy",
      "problem_slug": "employee-bonus",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Shortest Unsorted Continuous Subarray",
      "problem_id": "581",
      "frontend_id": "581",
      "difficulty": "Medium",
      "problem_slug": "shortest-unsorted-continuous-subarray",
      "topics": [
        "Array",
        "Two Pointers",
        "Stack",
        "Greedy",
        "Sorting",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Operation for Two Strings",
      "problem_id": "583",
      "frontend_id": "583",
      "difficulty": "Medium",
      "problem_slug": "delete-operation-for-two-strings",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Customer Referee",
      "problem_id": "584",
      "frontend_id": "584",
      "difficulty": "Easy",
      "problem_slug": "find-customer-referee",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Investments in 2016",
      "problem_id": "585",
      "frontend_id": "585",
      "difficulty": "Medium",
      "problem_slug": "investments-in-2016",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Customer Placing the Largest Number of Orders",
      "problem_id": "586",
      "frontend_id": "586",
      "difficulty": "Easy",
      "problem_slug": "customer-placing-the-largest-number-of-orders",
      "topics": [
        "Database"
      ],
      "follow_ups": true,
      "code_snippets": 5
    },
    {
      "title": "Erect the Fence",
      "problem_id": "587",
      "frontend_id": "587",
      "difficulty": "Hard",
      "problem_slug": "erect-the-fence",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "N-ary Tree Preorder Traversal",
      "problem_id": "775",
      "frontend_id": "589",
      "difficulty": "Easy",
      "problem_slug": "n-ary-tree-preorder-traversal",
      "topics": [
        "Stack",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": true,
      "code_snippets": 14
    },
    {
      "title": "N-ary Tree Postorder Traversal",
      "problem_id": "776",
      "frontend_id": "590",
      "difficulty": "Easy",
      "problem_slug": "n-ary-tree-postorder-traversal",
      "topics": [
        "Stack",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": true,
      "code_snippets": 14
    },
    {
      "title": "Tag Validator",
      "problem_id": "591",
      "frontend_id": "591",
      "difficulty": "Hard",
      "problem_slug": "tag-validator",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fraction Addition and Subtraction",
      "problem_id": "592",
      "frontend_id": "592",
      "difficulty": "Medium",
      "problem_slug": "fraction-addition-and-subtraction",
      "topics": [
        "Math",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Square",
      "problem_id": "593",
      "frontend_id": "593",
      "difficulty": "Medium",
      "problem_slug": "valid-square",
      "topics": [
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Harmonious Subsequence",
      "problem_id": "594",
      "frontend_id": "594",
      "difficulty": "Easy",
      "problem_slug": "longest-harmonious-subsequence",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Big Countries",
      "problem_id": "595",
      "frontend_id": "595",
      "difficulty": "Easy",
      "problem_slug": "big-countries",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Classes With at Least 5 Students",
      "problem_id": "596",
      "frontend_id": "596",
      "difficulty": "Easy",
      "problem_slug": "classes-with-at-least-5-students",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Range Addition II",
      "problem_id": "598",
      "frontend_id": "598",
      "difficulty": "Easy",
      "problem_slug": "range-addition-ii",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Index Sum of Two Lists",
      "problem_id": "599",
      "frontend_id": "599",
      "difficulty": "Easy",
      "problem_slug": "minimum-index-sum-of-two-lists",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Non-negative Integers without Consecutive Ones",
      "problem_id": "600",
      "frontend_id": "600",
      "difficulty": "Hard",
      "problem_slug": "non-negative-integers-without-consecutive-ones",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Human Traffic of Stadium",
      "problem_id": "601",
      "frontend_id": "601",
      "difficulty": "Hard",
      "problem_slug": "human-traffic-of-stadium",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Friend Requests II: Who Has the Most Friends",
      "problem_id": "602",
      "frontend_id": "602",
      "difficulty": "Medium",
      "problem_slug": "friend-requests-ii-who-has-the-most-friends",
      "topics": [
        "Database"
      ],
      "follow_ups": true,
      "code_snippets": 5
    },
    {
      "title": "Can Place Flowers",
      "problem_id": "605",
      "frontend_id": "605",
      "difficulty": "Easy",
      "problem_slug": "can-place-flowers",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct String from Binary Tree",
      "problem_id": "606",
      "frontend_id": "606",
      "difficulty": "Medium",
      "problem_slug": "construct-string-from-binary-tree",
      "topics": [
        "String",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sales Person",
      "problem_id": "607",
      "frontend_id": "607",
      "difficulty": "Easy",
      "problem_slug": "sales-person",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Tree Node",
      "problem_id": "608",
      "frontend_id": "608",
      "difficulty": "Medium",
      "problem_slug": "tree-node",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find Duplicate File in System",
      "problem_id": "609",
      "frontend_id": "609",
      "difficulty": "Medium",
      "problem_slug": "find-duplicate-file-in-system",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Triangle Judgement",
      "problem_id": "610",
      "frontend_id": "610",
      "difficulty": "Easy",
      "problem_slug": "triangle-judgement",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Valid Triangle Number",
      "problem_id": "611",
      "frontend_id": "611",
      "difficulty": "Medium",
      "problem_slug": "valid-triangle-number",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Two Binary Trees",
      "problem_id": "617",
      "frontend_id": "617",
      "difficulty": "Easy",
      "problem_slug": "merge-two-binary-trees",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Biggest Single Number",
      "problem_id": "619",
      "frontend_id": "619",
      "difficulty": "Easy",
      "problem_slug": "biggest-single-number",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Not Boring Movies",
      "problem_id": "620",
      "frontend_id": "620",
      "difficulty": "Easy",
      "problem_slug": "not-boring-movies",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Task Scheduler",
      "problem_id": "621",
      "frontend_id": "621",
      "difficulty": "Medium",
      "problem_slug": "task-scheduler",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Circular Queue",
      "problem_id": "860",
      "frontend_id": "622",
      "difficulty": "Medium",
      "problem_slug": "design-circular-queue",
      "topics": [
        "Array",
        "Linked List",
        "Design",
        "Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add One Row to Tree",
      "problem_id": "623",
      "frontend_id": "623",
      "difficulty": "Medium",
      "problem_slug": "add-one-row-to-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Distance in Arrays",
      "problem_id": "624",
      "frontend_id": "624",
      "difficulty": "Medium",
      "problem_slug": "maximum-distance-in-arrays",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Exchange Seats",
      "problem_id": "626",
      "frontend_id": "626",
      "difficulty": "Medium",
      "problem_slug": "exchange-seats",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Swap Salary",
      "problem_id": "627",
      "frontend_id": "627",
      "difficulty": "Easy",
      "problem_slug": "swap-salary",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximum Product of Three Numbers",
      "problem_id": "628",
      "frontend_id": "628",
      "difficulty": "Easy",
      "problem_slug": "maximum-product-of-three-numbers",
      "topics": [
        "Array",
        "Math",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K Inverse Pairs Array",
      "problem_id": "629",
      "frontend_id": "629",
      "difficulty": "Hard",
      "problem_slug": "k-inverse-pairs-array",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Course Schedule III",
      "problem_id": "630",
      "frontend_id": "630",
      "difficulty": "Hard",
      "problem_slug": "course-schedule-iii",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Range Covering Elements from K Lists",
      "problem_id": "632",
      "frontend_id": "632",
      "difficulty": "Hard",
      "problem_slug": "smallest-range-covering-elements-from-k-lists",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sliding Window",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Square Numbers",
      "problem_id": "633",
      "frontend_id": "633",
      "difficulty": "Medium",
      "problem_slug": "sum-of-square-numbers",
      "topics": [
        "Math",
        "Two Pointers",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Exclusive Time of Functions",
      "problem_id": "636",
      "frontend_id": "636",
      "difficulty": "Medium",
      "problem_slug": "exclusive-time-of-functions",
      "topics": [
        "Array",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Average of Levels in Binary Tree",
      "problem_id": "637",
      "frontend_id": "637",
      "difficulty": "Easy",
      "problem_slug": "average-of-levels-in-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shopping Offers",
      "problem_id": "638",
      "frontend_id": "638",
      "difficulty": "Medium",
      "problem_slug": "shopping-offers",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Memoization",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decode Ways II",
      "problem_id": "639",
      "frontend_id": "639",
      "difficulty": "Hard",
      "problem_slug": "decode-ways-ii",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Solve the Equation",
      "problem_id": "640",
      "frontend_id": "640",
      "difficulty": "Medium",
      "problem_slug": "solve-the-equation",
      "topics": [
        "Math",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Circular Deque",
      "problem_id": "859",
      "frontend_id": "641",
      "difficulty": "Medium",
      "problem_slug": "design-circular-deque",
      "topics": [
        "Array",
        "Linked List",
        "Design",
        "Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Average Subarray I",
      "problem_id": "643",
      "frontend_id": "643",
      "difficulty": "Easy",
      "problem_slug": "maximum-average-subarray-i",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Set Mismatch",
      "problem_id": "645",
      "frontend_id": "645",
      "difficulty": "Easy",
      "problem_slug": "set-mismatch",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Length of Pair Chain",
      "problem_id": "646",
      "frontend_id": "646",
      "difficulty": "Medium",
      "problem_slug": "maximum-length-of-pair-chain",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindromic Substrings",
      "problem_id": "647",
      "frontend_id": "647",
      "difficulty": "Medium",
      "problem_slug": "palindromic-substrings",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace Words",
      "problem_id": "648",
      "frontend_id": "648",
      "difficulty": "Medium",
      "problem_slug": "replace-words",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Dota2 Senate",
      "problem_id": "649",
      "frontend_id": "649",
      "difficulty": "Medium",
      "problem_slug": "dota2-senate",
      "topics": [
        "String",
        "Greedy",
        "Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "2 Keys Keyboard",
      "problem_id": "650",
      "frontend_id": "650",
      "difficulty": "Medium",
      "problem_slug": "2-keys-keyboard",
      "topics": [
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Duplicate Subtrees",
      "problem_id": "652",
      "frontend_id": "652",
      "difficulty": "Medium",
      "problem_slug": "find-duplicate-subtrees",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Two Sum IV - Input is a BST",
      "problem_id": "653",
      "frontend_id": "653",
      "difficulty": "Easy",
      "problem_slug": "two-sum-iv-input-is-a-bst",
      "topics": [
        "Hash Table",
        "Two Pointers",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Binary Tree",
      "problem_id": "654",
      "frontend_id": "654",
      "difficulty": "Medium",
      "problem_slug": "maximum-binary-tree",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Stack",
        "Tree",
        "Monotonic Stack",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Print Binary Tree",
      "problem_id": "655",
      "frontend_id": "655",
      "difficulty": "Medium",
      "problem_slug": "print-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Robot Return to Origin",
      "problem_id": "657",
      "frontend_id": "657",
      "difficulty": "Easy",
      "problem_slug": "robot-return-to-origin",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find K Closest Elements",
      "problem_id": "658",
      "frontend_id": "658",
      "difficulty": "Medium",
      "problem_slug": "find-k-closest-elements",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sliding Window",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Array into Consecutive Subsequences",
      "problem_id": "659",
      "frontend_id": "659",
      "difficulty": "Medium",
      "problem_slug": "split-array-into-consecutive-subsequences",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Image Smoother",
      "problem_id": "661",
      "frontend_id": "661",
      "difficulty": "Easy",
      "problem_slug": "image-smoother",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Width of Binary Tree",
      "problem_id": "662",
      "frontend_id": "662",
      "difficulty": "Medium",
      "problem_slug": "maximum-width-of-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Strange Printer",
      "problem_id": "664",
      "frontend_id": "664",
      "difficulty": "Hard",
      "problem_slug": "strange-printer",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Non-decreasing Array",
      "problem_id": "665",
      "frontend_id": "665",
      "difficulty": "Medium",
      "problem_slug": "non-decreasing-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Beautiful Arrangement II",
      "problem_id": "667",
      "frontend_id": "667",
      "difficulty": "Medium",
      "problem_slug": "beautiful-arrangement-ii",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Smallest Number in Multiplication Table",
      "problem_id": "668",
      "frontend_id": "668",
      "difficulty": "Hard",
      "problem_slug": "kth-smallest-number-in-multiplication-table",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Trim a Binary Search Tree",
      "problem_id": "669",
      "frontend_id": "669",
      "difficulty": "Medium",
      "problem_slug": "trim-a-binary-search-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Swap",
      "problem_id": "670",
      "frontend_id": "670",
      "difficulty": "Medium",
      "problem_slug": "maximum-swap",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Second Minimum Node In a Binary Tree",
      "problem_id": "671",
      "frontend_id": "671",
      "difficulty": "Easy",
      "problem_slug": "second-minimum-node-in-a-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bulb Switcher II",
      "problem_id": "672",
      "frontend_id": "672",
      "difficulty": "Medium",
      "problem_slug": "bulb-switcher-ii",
      "topics": [
        "Math",
        "Bit Manipulation",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Longest Increasing Subsequence",
      "problem_id": "673",
      "frontend_id": "673",
      "difficulty": "Medium",
      "problem_slug": "number-of-longest-increasing-subsequence",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Continuous Increasing Subsequence",
      "problem_id": "674",
      "frontend_id": "674",
      "difficulty": "Easy",
      "problem_slug": "longest-continuous-increasing-subsequence",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cut Off Trees for Golf Event",
      "problem_id": "675",
      "frontend_id": "675",
      "difficulty": "Hard",
      "problem_slug": "cut-off-trees-for-golf-event",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Implement Magic Dictionary",
      "problem_id": "676",
      "frontend_id": "676",
      "difficulty": "Medium",
      "problem_slug": "implement-magic-dictionary",
      "topics": [
        "Hash Table",
        "String",
        "Depth-First Search",
        "Design",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Map Sum Pairs",
      "problem_id": "677",
      "frontend_id": "677",
      "difficulty": "Medium",
      "problem_slug": "map-sum-pairs",
      "topics": [
        "Hash Table",
        "String",
        "Design",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Parenthesis String",
      "problem_id": "678",
      "frontend_id": "678",
      "difficulty": "Medium",
      "problem_slug": "valid-parenthesis-string",
      "topics": [
        "String",
        "Dynamic Programming",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "24 Game",
      "problem_id": "679",
      "frontend_id": "679",
      "difficulty": "Hard",
      "problem_slug": "24-game",
      "topics": [
        "Array",
        "Math",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Palindrome II",
      "problem_id": "680",
      "frontend_id": "680",
      "difficulty": "Easy",
      "problem_slug": "valid-palindrome-ii",
      "topics": [
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Baseball Game",
      "problem_id": "682",
      "frontend_id": "682",
      "difficulty": "Easy",
      "problem_slug": "baseball-game",
      "topics": [
        "Array",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Redundant Connection",
      "problem_id": "684",
      "frontend_id": "684",
      "difficulty": "Medium",
      "problem_slug": "redundant-connection",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Redundant Connection II",
      "problem_id": "685",
      "frontend_id": "685",
      "difficulty": "Hard",
      "problem_slug": "redundant-connection-ii",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Repeated String Match",
      "problem_id": "686",
      "frontend_id": "686",
      "difficulty": "Medium",
      "problem_slug": "repeated-string-match",
      "topics": [
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Univalue Path",
      "problem_id": "687",
      "frontend_id": "687",
      "difficulty": "Medium",
      "problem_slug": "longest-univalue-path",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Knight Probability in Chessboard",
      "problem_id": "688",
      "frontend_id": "688",
      "difficulty": "Medium",
      "problem_slug": "knight-probability-in-chessboard",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
      "problem_id": "689",
      "frontend_id": "689",
      "difficulty": "Hard",
      "problem_slug": "maximum-sum-of-3-non-overlapping-subarrays",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Employee Importance",
      "problem_id": "690",
      "frontend_id": "690",
      "difficulty": "Medium",
      "problem_slug": "employee-importance",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 13
    },
    {
      "title": "Stickers to Spell Word",
      "problem_id": "691",
      "frontend_id": "691",
      "difficulty": "Hard",
      "problem_slug": "stickers-to-spell-word",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Memoization",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Top K Frequent Words",
      "problem_id": "692",
      "frontend_id": "692",
      "difficulty": "Medium",
      "problem_slug": "top-k-frequent-words",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie",
        "Sorting",
        "Heap (Priority Queue)",
        "Bucket Sort",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Number with Alternating Bits",
      "problem_id": "693",
      "frontend_id": "693",
      "difficulty": "Easy",
      "problem_slug": "binary-number-with-alternating-bits",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Area of Island",
      "problem_id": "695",
      "frontend_id": "695",
      "difficulty": "Medium",
      "problem_slug": "max-area-of-island",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Binary Substrings",
      "problem_id": "696",
      "frontend_id": "696",
      "difficulty": "Easy",
      "problem_slug": "count-binary-substrings",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Degree of an Array",
      "problem_id": "697",
      "frontend_id": "697",
      "difficulty": "Easy",
      "problem_slug": "degree-of-an-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition to K Equal Sum Subsets",
      "problem_id": "698",
      "frontend_id": "698",
      "difficulty": "Medium",
      "problem_slug": "partition-to-k-equal-sum-subsets",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Memoization",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Falling Squares",
      "problem_id": "699",
      "frontend_id": "699",
      "difficulty": "Hard",
      "problem_slug": "falling-squares",
      "topics": [
        "Array",
        "Segment Tree",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Search in a Binary Search Tree",
      "problem_id": "783",
      "frontend_id": "700",
      "difficulty": "Easy",
      "problem_slug": "search-in-a-binary-search-tree",
      "topics": [
        "Tree",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Insert into a Binary Search Tree",
      "problem_id": "784",
      "frontend_id": "701",
      "difficulty": "Medium",
      "problem_slug": "insert-into-a-binary-search-tree",
      "topics": [
        "Tree",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Largest Element in a Stream",
      "problem_id": "789",
      "frontend_id": "703",
      "difficulty": "Easy",
      "problem_slug": "kth-largest-element-in-a-stream",
      "topics": [
        "Tree",
        "Design",
        "Binary Search Tree",
        "Heap (Priority Queue)",
        "Binary Tree",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Search",
      "problem_id": "792",
      "frontend_id": "704",
      "difficulty": "Easy",
      "problem_slug": "binary-search",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design HashSet",
      "problem_id": "816",
      "frontend_id": "705",
      "difficulty": "Easy",
      "problem_slug": "design-hashset",
      "topics": [
        "Array",
        "Hash Table",
        "Linked List",
        "Design",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design HashMap",
      "problem_id": "817",
      "frontend_id": "706",
      "difficulty": "Easy",
      "problem_slug": "design-hashmap",
      "topics": [
        "Array",
        "Hash Table",
        "Linked List",
        "Design",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Linked List",
      "problem_id": "838",
      "frontend_id": "707",
      "difficulty": "Medium",
      "problem_slug": "design-linked-list",
      "topics": [
        "Linked List",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "To Lower Case",
      "problem_id": "742",
      "frontend_id": "709",
      "difficulty": "Easy",
      "problem_slug": "to-lower-case",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Random Pick with Blacklist",
      "problem_id": "894",
      "frontend_id": "710",
      "difficulty": "Hard",
      "problem_slug": "random-pick-with-blacklist",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Binary Search",
        "Sorting",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum ASCII Delete Sum for Two Strings",
      "problem_id": "712",
      "frontend_id": "712",
      "difficulty": "Medium",
      "problem_slug": "minimum-ascii-delete-sum-for-two-strings",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subarray Product Less Than K",
      "problem_id": "713",
      "frontend_id": "713",
      "difficulty": "Medium",
      "problem_slug": "subarray-product-less-than-k",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Time to Buy and Sell Stock with Transaction Fee",
      "problem_id": "714",
      "frontend_id": "714",
      "difficulty": "Medium",
      "problem_slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Range Module",
      "problem_id": "715",
      "frontend_id": "715",
      "difficulty": "Hard",
      "problem_slug": "range-module",
      "topics": [
        "Design",
        "Segment Tree",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "1-bit and 2-bit Characters",
      "problem_id": "717",
      "frontend_id": "717",
      "difficulty": "Easy",
      "problem_slug": "1-bit-and-2-bit-characters",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Length of Repeated Subarray",
      "problem_id": "718",
      "frontend_id": "718",
      "difficulty": "Medium",
      "problem_slug": "maximum-length-of-repeated-subarray",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Sliding Window",
        "Rolling Hash",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find K-th Smallest Pair Distance",
      "problem_id": "719",
      "frontend_id": "719",
      "difficulty": "Hard",
      "problem_slug": "find-k-th-smallest-pair-distance",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Word in Dictionary",
      "problem_id": "720",
      "frontend_id": "720",
      "difficulty": "Medium",
      "problem_slug": "longest-word-in-dictionary",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Accounts Merge",
      "problem_id": "721",
      "frontend_id": "721",
      "difficulty": "Medium",
      "problem_slug": "accounts-merge",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Comments",
      "problem_id": "722",
      "frontend_id": "722",
      "difficulty": "Medium",
      "problem_slug": "remove-comments",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Pivot Index",
      "problem_id": "724",
      "frontend_id": "724",
      "difficulty": "Easy",
      "problem_slug": "find-pivot-index",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Linked List in Parts",
      "problem_id": "725",
      "frontend_id": "725",
      "difficulty": "Medium",
      "problem_slug": "split-linked-list-in-parts",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Atoms",
      "problem_id": "726",
      "frontend_id": "726",
      "difficulty": "Hard",
      "problem_slug": "number-of-atoms",
      "topics": [
        "Hash Table",
        "String",
        "Stack",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Self Dividing Numbers",
      "problem_id": "728",
      "frontend_id": "728",
      "difficulty": "Easy",
      "problem_slug": "self-dividing-numbers",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "My Calendar I",
      "problem_id": "729",
      "frontend_id": "729",
      "difficulty": "Medium",
      "problem_slug": "my-calendar-i",
      "topics": [
        "Array",
        "Binary Search",
        "Design",
        "Segment Tree",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Different Palindromic Subsequences",
      "problem_id": "730",
      "frontend_id": "730",
      "difficulty": "Hard",
      "problem_slug": "count-different-palindromic-subsequences",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "My Calendar II",
      "problem_id": "731",
      "frontend_id": "731",
      "difficulty": "Medium",
      "problem_slug": "my-calendar-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Design",
        "Segment Tree",
        "Prefix Sum",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "My Calendar III",
      "problem_id": "732",
      "frontend_id": "732",
      "difficulty": "Hard",
      "problem_slug": "my-calendar-iii",
      "topics": [
        "Binary Search",
        "Design",
        "Segment Tree",
        "Prefix Sum",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flood Fill",
      "problem_id": "733",
      "frontend_id": "733",
      "difficulty": "Easy",
      "problem_slug": "flood-fill",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Asteroid Collision",
      "problem_id": "735",
      "frontend_id": "735",
      "difficulty": "Medium",
      "problem_slug": "asteroid-collision",
      "topics": [
        "Array",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Parse Lisp Expression",
      "problem_id": "736",
      "frontend_id": "736",
      "difficulty": "Hard",
      "problem_slug": "parse-lisp-expression",
      "topics": [
        "Hash Table",
        "String",
        "Stack",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Monotone Increasing Digits",
      "problem_id": "738",
      "frontend_id": "738",
      "difficulty": "Medium",
      "problem_slug": "monotone-increasing-digits",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Daily Temperatures",
      "problem_id": "739",
      "frontend_id": "739",
      "difficulty": "Medium",
      "problem_slug": "daily-temperatures",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete and Earn",
      "problem_id": "740",
      "frontend_id": "740",
      "difficulty": "Medium",
      "problem_slug": "delete-and-earn",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cherry Pickup",
      "problem_id": "741",
      "frontend_id": "741",
      "difficulty": "Hard",
      "problem_slug": "cherry-pickup",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Network Delay Time",
      "problem_id": "744",
      "frontend_id": "743",
      "difficulty": "Medium",
      "problem_slug": "network-delay-time",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Smallest Letter Greater Than Target",
      "problem_id": "745",
      "frontend_id": "744",
      "difficulty": "Easy",
      "problem_slug": "find-smallest-letter-greater-than-target",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Prefix and Suffix Search",
      "problem_id": "746",
      "frontend_id": "745",
      "difficulty": "Hard",
      "problem_slug": "prefix-and-suffix-search",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Design",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Min Cost Climbing Stairs",
      "problem_id": "747",
      "frontend_id": "746",
      "difficulty": "Easy",
      "problem_slug": "min-cost-climbing-stairs",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Number At Least Twice of Others",
      "problem_id": "748",
      "frontend_id": "747",
      "difficulty": "Easy",
      "problem_slug": "largest-number-at-least-twice-of-others",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Completing Word",
      "problem_id": "749",
      "frontend_id": "748",
      "difficulty": "Easy",
      "problem_slug": "shortest-completing-word",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Contain Virus",
      "problem_id": "750",
      "frontend_id": "749",
      "difficulty": "Hard",
      "problem_slug": "contain-virus",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Open the Lock",
      "problem_id": "753",
      "frontend_id": "752",
      "difficulty": "Medium",
      "problem_slug": "open-the-lock",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cracking the Safe",
      "problem_id": "754",
      "frontend_id": "753",
      "difficulty": "Hard",
      "problem_slug": "cracking-the-safe",
      "topics": [
        "Depth-First Search",
        "Graph",
        "Eulerian Circuit"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reach a Number",
      "problem_id": "755",
      "frontend_id": "754",
      "difficulty": "Medium",
      "problem_slug": "reach-a-number",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pyramid Transition Matrix",
      "problem_id": "757",
      "frontend_id": "756",
      "difficulty": "Medium",
      "problem_slug": "pyramid-transition-matrix",
      "topics": [
        "Bit Manipulation",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Set Intersection Size At Least Two",
      "problem_id": "759",
      "frontend_id": "757",
      "difficulty": "Hard",
      "problem_slug": "set-intersection-size-at-least-two",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Special Binary String",
      "problem_id": "763",
      "frontend_id": "761",
      "difficulty": "Hard",
      "problem_slug": "special-binary-string",
      "topics": [
        "String",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Prime Number of Set Bits in Binary Representation",
      "problem_id": "767",
      "frontend_id": "762",
      "difficulty": "Easy",
      "problem_slug": "prime-number-of-set-bits-in-binary-representation",
      "topics": [
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Labels",
      "problem_id": "768",
      "frontend_id": "763",
      "difficulty": "Medium",
      "problem_slug": "partition-labels",
      "topics": [
        "Hash Table",
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Plus Sign",
      "problem_id": "769",
      "frontend_id": "764",
      "difficulty": "Medium",
      "problem_slug": "largest-plus-sign",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Couples Holding Hands",
      "problem_id": "770",
      "frontend_id": "765",
      "difficulty": "Hard",
      "problem_slug": "couples-holding-hands",
      "topics": [
        "Greedy",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Toeplitz Matrix",
      "problem_id": "777",
      "frontend_id": "766",
      "difficulty": "Easy",
      "problem_slug": "toeplitz-matrix",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reorganize String",
      "problem_id": "778",
      "frontend_id": "767",
      "difficulty": "Medium",
      "problem_slug": "reorganize-string",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Chunks To Make Sorted II",
      "problem_id": "779",
      "frontend_id": "768",
      "difficulty": "Hard",
      "problem_slug": "max-chunks-to-make-sorted-ii",
      "topics": [
        "Array",
        "Stack",
        "Greedy",
        "Sorting",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Chunks To Make Sorted",
      "problem_id": "780",
      "frontend_id": "769",
      "difficulty": "Medium",
      "problem_slug": "max-chunks-to-make-sorted",
      "topics": [
        "Array",
        "Stack",
        "Greedy",
        "Sorting",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Basic Calculator IV",
      "problem_id": "781",
      "frontend_id": "770",
      "difficulty": "Hard",
      "problem_slug": "basic-calculator-iv",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Stack",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jewels and Stones",
      "problem_id": "782",
      "frontend_id": "771",
      "difficulty": "Easy",
      "problem_slug": "jewels-and-stones",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sliding Puzzle",
      "problem_id": "787",
      "frontend_id": "773",
      "difficulty": "Hard",
      "problem_slug": "sliding-puzzle",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Breadth-First Search",
        "Memoization",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Global and Local Inversions",
      "problem_id": "790",
      "frontend_id": "775",
      "difficulty": "Medium",
      "problem_slug": "global-and-local-inversions",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Swap Adjacent in LR String",
      "problem_id": "793",
      "frontend_id": "777",
      "difficulty": "Medium",
      "problem_slug": "swap-adjacent-in-lr-string",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Swim in Rising Water",
      "problem_id": "794",
      "frontend_id": "778",
      "difficulty": "Hard",
      "problem_slug": "swim-in-rising-water",
      "topics": [
        "Array",
        "Binary Search",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-th Symbol in Grammar",
      "problem_id": "795",
      "frontend_id": "779",
      "difficulty": "Medium",
      "problem_slug": "k-th-symbol-in-grammar",
      "topics": [
        "Math",
        "Bit Manipulation",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reaching Points",
      "problem_id": "796",
      "frontend_id": "780",
      "difficulty": "Hard",
      "problem_slug": "reaching-points",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rabbits in Forest",
      "problem_id": "797",
      "frontend_id": "781",
      "difficulty": "Medium",
      "problem_slug": "rabbits-in-forest",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Transform to Chessboard",
      "problem_id": "798",
      "frontend_id": "782",
      "difficulty": "Hard",
      "problem_slug": "transform-to-chessboard",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Distance Between BST Nodes",
      "problem_id": "799",
      "frontend_id": "783",
      "difficulty": "Easy",
      "problem_slug": "minimum-distance-between-bst-nodes",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Letter Case Permutation",
      "problem_id": "800",
      "frontend_id": "784",
      "difficulty": "Medium",
      "problem_slug": "letter-case-permutation",
      "topics": [
        "String",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Is Graph Bipartite?",
      "problem_id": "801",
      "frontend_id": "785",
      "difficulty": "Medium",
      "problem_slug": "is-graph-bipartite",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-th Smallest Prime Fraction",
      "problem_id": "802",
      "frontend_id": "786",
      "difficulty": "Medium",
      "problem_slug": "k-th-smallest-prime-fraction",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cheapest Flights Within K Stops",
      "problem_id": "803",
      "frontend_id": "787",
      "difficulty": "Medium",
      "problem_slug": "cheapest-flights-within-k-stops",
      "topics": [
        "Dynamic Programming",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotated Digits",
      "problem_id": "804",
      "frontend_id": "788",
      "difficulty": "Medium",
      "problem_slug": "rotated-digits",
      "topics": [
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Escape The Ghosts",
      "problem_id": "805",
      "frontend_id": "789",
      "difficulty": "Medium",
      "problem_slug": "escape-the-ghosts",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Domino and Tromino Tiling",
      "problem_id": "806",
      "frontend_id": "790",
      "difficulty": "Medium",
      "problem_slug": "domino-and-tromino-tiling",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Custom Sort String",
      "problem_id": "807",
      "frontend_id": "791",
      "difficulty": "Medium",
      "problem_slug": "custom-sort-string",
      "topics": [
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Matching Subsequences",
      "problem_id": "808",
      "frontend_id": "792",
      "difficulty": "Medium",
      "problem_slug": "number-of-matching-subsequences",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Binary Search",
        "Dynamic Programming",
        "Trie",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Preimage Size of Factorial Zeroes Function",
      "problem_id": "809",
      "frontend_id": "793",
      "difficulty": "Hard",
      "problem_slug": "preimage-size-of-factorial-zeroes-function",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Tic-Tac-Toe State",
      "problem_id": "810",
      "frontend_id": "794",
      "difficulty": "Medium",
      "problem_slug": "valid-tic-tac-toe-state",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Subarrays with Bounded Maximum",
      "problem_id": "811",
      "frontend_id": "795",
      "difficulty": "Medium",
      "problem_slug": "number-of-subarrays-with-bounded-maximum",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotate String",
      "problem_id": "812",
      "frontend_id": "796",
      "difficulty": "Easy",
      "problem_slug": "rotate-string",
      "topics": [
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "All Paths From Source to Target",
      "problem_id": "813",
      "frontend_id": "797",
      "difficulty": "Medium",
      "problem_slug": "all-paths-from-source-to-target",
      "topics": [
        "Backtracking",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Rotation with Highest Score",
      "problem_id": "814",
      "frontend_id": "798",
      "difficulty": "Hard",
      "problem_slug": "smallest-rotation-with-highest-score",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Champagne Tower",
      "problem_id": "815",
      "frontend_id": "799",
      "difficulty": "Medium",
      "problem_slug": "champagne-tower",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Minimum Swaps To Make Sequences Increasing",
      "problem_id": "819",
      "frontend_id": "801",
      "difficulty": "Hard",
      "problem_slug": "minimum-swaps-to-make-sequences-increasing",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Eventual Safe States",
      "problem_id": "820",
      "frontend_id": "802",
      "difficulty": "Medium",
      "problem_slug": "find-eventual-safe-states",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bricks Falling When Hit",
      "problem_id": "821",
      "frontend_id": "803",
      "difficulty": "Hard",
      "problem_slug": "bricks-falling-when-hit",
      "topics": [
        "Array",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Morse Code Words",
      "problem_id": "822",
      "frontend_id": "804",
      "difficulty": "Easy",
      "problem_slug": "unique-morse-code-words",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Array With Same Average",
      "problem_id": "823",
      "frontend_id": "805",
      "difficulty": "Hard",
      "problem_slug": "split-array-with-same-average",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Lines To Write String",
      "problem_id": "824",
      "frontend_id": "806",
      "difficulty": "Easy",
      "problem_slug": "number-of-lines-to-write-string",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Max Increase to Keep City Skyline",
      "problem_id": "825",
      "frontend_id": "807",
      "difficulty": "Medium",
      "problem_slug": "max-increase-to-keep-city-skyline",
      "topics": [
        "Array",
        "Greedy",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Soup Servings",
      "problem_id": "826",
      "frontend_id": "808",
      "difficulty": "Medium",
      "problem_slug": "soup-servings",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Probability and Statistics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Expressive Words",
      "problem_id": "827",
      "frontend_id": "809",
      "difficulty": "Medium",
      "problem_slug": "expressive-words",
      "topics": [
        "Array",
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Chalkboard XOR Game",
      "problem_id": "828",
      "frontend_id": "810",
      "difficulty": "Hard",
      "problem_slug": "chalkboard-xor-game",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation",
        "Brainteaser",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subdomain Visit Count",
      "problem_id": "829",
      "frontend_id": "811",
      "difficulty": "Medium",
      "problem_slug": "subdomain-visit-count",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Triangle Area",
      "problem_id": "830",
      "frontend_id": "812",
      "difficulty": "Easy",
      "problem_slug": "largest-triangle-area",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Sum of Averages",
      "problem_id": "831",
      "frontend_id": "813",
      "difficulty": "Medium",
      "problem_slug": "largest-sum-of-averages",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Pruning",
      "problem_id": "832",
      "frontend_id": "814",
      "difficulty": "Medium",
      "problem_slug": "binary-tree-pruning",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bus Routes",
      "problem_id": "833",
      "frontend_id": "815",
      "difficulty": "Hard",
      "problem_slug": "bus-routes",
      "topics": [
        "Array",
        "Hash Table",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ambiguous Coordinates",
      "problem_id": "834",
      "frontend_id": "816",
      "difficulty": "Medium",
      "problem_slug": "ambiguous-coordinates",
      "topics": [
        "String",
        "Backtracking",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Linked List Components",
      "problem_id": "835",
      "frontend_id": "817",
      "difficulty": "Medium",
      "problem_slug": "linked-list-components",
      "topics": [
        "Array",
        "Hash Table",
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Race Car",
      "problem_id": "836",
      "frontend_id": "818",
      "difficulty": "Hard",
      "problem_slug": "race-car",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Common Word",
      "problem_id": "837",
      "frontend_id": "819",
      "difficulty": "Easy",
      "problem_slug": "most-common-word",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Short Encoding of Words",
      "problem_id": "839",
      "frontend_id": "820",
      "difficulty": "Medium",
      "problem_slug": "short-encoding-of-words",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Distance to a Character",
      "problem_id": "841",
      "frontend_id": "821",
      "difficulty": "Easy",
      "problem_slug": "shortest-distance-to-a-character",
      "topics": [
        "Array",
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Card Flipping Game",
      "problem_id": "842",
      "frontend_id": "822",
      "difficulty": "Medium",
      "problem_slug": "card-flipping-game",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Trees With Factors",
      "problem_id": "843",
      "frontend_id": "823",
      "difficulty": "Medium",
      "problem_slug": "binary-trees-with-factors",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Goat Latin",
      "problem_id": "851",
      "frontend_id": "824",
      "difficulty": "Easy",
      "problem_slug": "goat-latin",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Friends Of Appropriate Ages",
      "problem_id": "852",
      "frontend_id": "825",
      "difficulty": "Medium",
      "problem_slug": "friends-of-appropriate-ages",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Profit Assigning Work",
      "problem_id": "853",
      "frontend_id": "826",
      "difficulty": "Medium",
      "problem_slug": "most-profit-assigning-work",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Making A Large Island",
      "problem_id": "854",
      "frontend_id": "827",
      "difficulty": "Hard",
      "problem_slug": "making-a-large-island",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Unique Characters of All Substrings of a Given String",
      "problem_id": "855",
      "frontend_id": "828",
      "difficulty": "Hard",
      "problem_slug": "count-unique-characters-of-all-substrings-of-a-given-string",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Consecutive Numbers Sum",
      "problem_id": "856",
      "frontend_id": "829",
      "difficulty": "Hard",
      "problem_slug": "consecutive-numbers-sum",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Positions of Large Groups",
      "problem_id": "857",
      "frontend_id": "830",
      "difficulty": "Easy",
      "problem_slug": "positions-of-large-groups",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Masking Personal Information",
      "problem_id": "858",
      "frontend_id": "831",
      "difficulty": "Medium",
      "problem_slug": "masking-personal-information",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flipping an Image",
      "problem_id": "861",
      "frontend_id": "832",
      "difficulty": "Easy",
      "problem_slug": "flipping-an-image",
      "topics": [
        "Array",
        "Two Pointers",
        "Bit Manipulation",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find And Replace in String",
      "problem_id": "862",
      "frontend_id": "833",
      "difficulty": "Medium",
      "problem_slug": "find-and-replace-in-string",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Distances in Tree",
      "problem_id": "863",
      "frontend_id": "834",
      "difficulty": "Hard",
      "problem_slug": "sum-of-distances-in-tree",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Image Overlap",
      "problem_id": "864",
      "frontend_id": "835",
      "difficulty": "Medium",
      "problem_slug": "image-overlap",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rectangle Overlap",
      "problem_id": "866",
      "frontend_id": "836",
      "difficulty": "Easy",
      "problem_slug": "rectangle-overlap",
      "topics": [
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "New 21 Game",
      "problem_id": "867",
      "frontend_id": "837",
      "difficulty": "Medium",
      "problem_slug": "new-21-game",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Sliding Window",
        "Probability and Statistics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Push Dominoes",
      "problem_id": "868",
      "frontend_id": "838",
      "difficulty": "Medium",
      "problem_slug": "push-dominoes",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Similar String Groups",
      "problem_id": "869",
      "frontend_id": "839",
      "difficulty": "Hard",
      "problem_slug": "similar-string-groups",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Magic Squares In Grid",
      "problem_id": "870",
      "frontend_id": "840",
      "difficulty": "Medium",
      "problem_slug": "magic-squares-in-grid",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Keys and Rooms",
      "problem_id": "871",
      "frontend_id": "841",
      "difficulty": "Medium",
      "problem_slug": "keys-and-rooms",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Array into Fibonacci Sequence",
      "problem_id": "872",
      "frontend_id": "842",
      "difficulty": "Medium",
      "problem_slug": "split-array-into-fibonacci-sequence",
      "topics": [
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Guess the Word",
      "problem_id": "873",
      "frontend_id": "843",
      "difficulty": "Hard",
      "problem_slug": "guess-the-word",
      "topics": [
        "Array",
        "Math",
        "String",
        "Interactive",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Backspace String Compare",
      "problem_id": "874",
      "frontend_id": "844",
      "difficulty": "Easy",
      "problem_slug": "backspace-string-compare",
      "topics": [
        "Two Pointers",
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Longest Mountain in Array",
      "problem_id": "875",
      "frontend_id": "845",
      "difficulty": "Medium",
      "problem_slug": "longest-mountain-in-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Dynamic Programming",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Hand of Straights",
      "problem_id": "876",
      "frontend_id": "846",
      "difficulty": "Medium",
      "problem_slug": "hand-of-straights",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Path Visiting All Nodes",
      "problem_id": "877",
      "frontend_id": "847",
      "difficulty": "Hard",
      "problem_slug": "shortest-path-visiting-all-nodes",
      "topics": [
        "Dynamic Programming",
        "Bit Manipulation",
        "Breadth-First Search",
        "Graph",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shifting Letters",
      "problem_id": "878",
      "frontend_id": "848",
      "difficulty": "Medium",
      "problem_slug": "shifting-letters",
      "topics": [
        "Array",
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Distance to Closest Person",
      "problem_id": "879",
      "frontend_id": "849",
      "difficulty": "Medium",
      "problem_slug": "maximize-distance-to-closest-person",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rectangle Area II",
      "problem_id": "880",
      "frontend_id": "850",
      "difficulty": "Hard",
      "problem_slug": "rectangle-area-ii",
      "topics": [
        "Array",
        "Segment Tree",
        "Line Sweep",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Loud and Rich",
      "problem_id": "881",
      "frontend_id": "851",
      "difficulty": "Medium",
      "problem_slug": "loud-and-rich",
      "topics": [
        "Array",
        "Depth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Peak Index in a Mountain Array",
      "problem_id": "882",
      "frontend_id": "852",
      "difficulty": "Medium",
      "problem_slug": "peak-index-in-a-mountain-array",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Car Fleet",
      "problem_id": "883",
      "frontend_id": "853",
      "difficulty": "Medium",
      "problem_slug": "car-fleet",
      "topics": [
        "Array",
        "Stack",
        "Sorting",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-Similar Strings",
      "problem_id": "884",
      "frontend_id": "854",
      "difficulty": "Hard",
      "problem_slug": "k-similar-strings",
      "topics": [
        "Hash Table",
        "String",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Exam Room",
      "problem_id": "885",
      "frontend_id": "855",
      "difficulty": "Medium",
      "problem_slug": "exam-room",
      "topics": [
        "Design",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Score of Parentheses",
      "problem_id": "886",
      "frontend_id": "856",
      "difficulty": "Medium",
      "problem_slug": "score-of-parentheses",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Hire K Workers",
      "problem_id": "887",
      "frontend_id": "857",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-hire-k-workers",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Mirror Reflection",
      "problem_id": "888",
      "frontend_id": "858",
      "difficulty": "Medium",
      "problem_slug": "mirror-reflection",
      "topics": [
        "Math",
        "Geometry",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Buddy Strings",
      "problem_id": "889",
      "frontend_id": "859",
      "difficulty": "Easy",
      "problem_slug": "buddy-strings",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lemonade Change",
      "problem_id": "890",
      "frontend_id": "860",
      "difficulty": "Easy",
      "problem_slug": "lemonade-change",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Score After Flipping Matrix",
      "problem_id": "891",
      "frontend_id": "861",
      "difficulty": "Medium",
      "problem_slug": "score-after-flipping-matrix",
      "topics": [
        "Array",
        "Greedy",
        "Bit Manipulation",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Subarray with Sum at Least K",
      "problem_id": "892",
      "frontend_id": "862",
      "difficulty": "Hard",
      "problem_slug": "shortest-subarray-with-sum-at-least-k",
      "topics": [
        "Array",
        "Binary Search",
        "Queue",
        "Sliding Window",
        "Heap (Priority Queue)",
        "Prefix Sum",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "All Nodes Distance K in Binary Tree",
      "problem_id": "893",
      "frontend_id": "863",
      "difficulty": "Medium",
      "problem_slug": "all-nodes-distance-k-in-binary-tree",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Shortest Path to Get All Keys",
      "problem_id": "895",
      "frontend_id": "864",
      "difficulty": "Hard",
      "problem_slug": "shortest-path-to-get-all-keys",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Subtree with all the Deepest Nodes",
      "problem_id": "896",
      "frontend_id": "865",
      "difficulty": "Medium",
      "problem_slug": "smallest-subtree-with-all-the-deepest-nodes",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Prime Palindrome",
      "problem_id": "897",
      "frontend_id": "866",
      "difficulty": "Medium",
      "problem_slug": "prime-palindrome",
      "topics": [
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Transpose Matrix",
      "problem_id": "898",
      "frontend_id": "867",
      "difficulty": "Easy",
      "problem_slug": "transpose-matrix",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Gap",
      "problem_id": "899",
      "frontend_id": "868",
      "difficulty": "Easy",
      "problem_slug": "binary-gap",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reordered Power of 2",
      "problem_id": "900",
      "frontend_id": "869",
      "difficulty": "Medium",
      "problem_slug": "reordered-power-of-2",
      "topics": [
        "Hash Table",
        "Math",
        "Sorting",
        "Counting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Advantage Shuffle",
      "problem_id": "901",
      "frontend_id": "870",
      "difficulty": "Medium",
      "problem_slug": "advantage-shuffle",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Refueling Stops",
      "problem_id": "902",
      "frontend_id": "871",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-refueling-stops",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Leaf-Similar Trees",
      "problem_id": "904",
      "frontend_id": "872",
      "difficulty": "Easy",
      "problem_slug": "leaf-similar-trees",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of Longest Fibonacci Subsequence",
      "problem_id": "905",
      "frontend_id": "873",
      "difficulty": "Medium",
      "problem_slug": "length-of-longest-fibonacci-subsequence",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Walking Robot Simulation",
      "problem_id": "906",
      "frontend_id": "874",
      "difficulty": "Medium",
      "problem_slug": "walking-robot-simulation",
      "topics": [
        "Array",
        "Hash Table",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Koko Eating Bananas",
      "problem_id": "907",
      "frontend_id": "875",
      "difficulty": "Medium",
      "problem_slug": "koko-eating-bananas",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Middle of the Linked List",
      "problem_id": "908",
      "frontend_id": "876",
      "difficulty": "Easy",
      "problem_slug": "middle-of-the-linked-list",
      "topics": [
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Game",
      "problem_id": "909",
      "frontend_id": "877",
      "difficulty": "Medium",
      "problem_slug": "stone-game",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Nth Magical Number",
      "problem_id": "910",
      "frontend_id": "878",
      "difficulty": "Hard",
      "problem_slug": "nth-magical-number",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Profitable Schemes",
      "problem_id": "911",
      "frontend_id": "879",
      "difficulty": "Hard",
      "problem_slug": "profitable-schemes",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decoded String at Index",
      "problem_id": "916",
      "frontend_id": "880",
      "difficulty": "Medium",
      "problem_slug": "decoded-string-at-index",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Boats to Save People",
      "problem_id": "917",
      "frontend_id": "881",
      "difficulty": "Medium",
      "problem_slug": "boats-to-save-people",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reachable Nodes In Subdivided Graph",
      "problem_id": "918",
      "frontend_id": "882",
      "difficulty": "Hard",
      "problem_slug": "reachable-nodes-in-subdivided-graph",
      "topics": [
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Projection Area of 3D Shapes",
      "problem_id": "919",
      "frontend_id": "883",
      "difficulty": "Easy",
      "problem_slug": "projection-area-of-3d-shapes",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Uncommon Words from Two Sentences",
      "problem_id": "920",
      "frontend_id": "884",
      "difficulty": "Easy",
      "problem_slug": "uncommon-words-from-two-sentences",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Spiral Matrix III",
      "problem_id": "921",
      "frontend_id": "885",
      "difficulty": "Medium",
      "problem_slug": "spiral-matrix-iii",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Possible Bipartition",
      "problem_id": "922",
      "frontend_id": "886",
      "difficulty": "Medium",
      "problem_slug": "possible-bipartition",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Super Egg Drop",
      "problem_id": "923",
      "frontend_id": "887",
      "difficulty": "Hard",
      "problem_slug": "super-egg-drop",
      "topics": [
        "Math",
        "Binary Search",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fair Candy Swap",
      "problem_id": "924",
      "frontend_id": "888",
      "difficulty": "Easy",
      "problem_slug": "fair-candy-swap",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Binary Tree from Preorder and Postorder Traversal",
      "problem_id": "925",
      "frontend_id": "889",
      "difficulty": "Medium",
      "problem_slug": "construct-binary-tree-from-preorder-and-postorder-traversal",
      "topics": [
        "Array",
        "Hash Table",
        "Divide and Conquer",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find and Replace Pattern",
      "problem_id": "926",
      "frontend_id": "890",
      "difficulty": "Medium",
      "problem_slug": "find-and-replace-pattern",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Subsequence Widths",
      "problem_id": "927",
      "frontend_id": "891",
      "difficulty": "Hard",
      "problem_slug": "sum-of-subsequence-widths",
      "topics": [
        "Array",
        "Math",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Surface Area of 3D Shapes",
      "problem_id": "928",
      "frontend_id": "892",
      "difficulty": "Easy",
      "problem_slug": "surface-area-of-3d-shapes",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Groups of Special-Equivalent Strings",
      "problem_id": "929",
      "frontend_id": "893",
      "difficulty": "Medium",
      "problem_slug": "groups-of-special-equivalent-strings",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "All Possible Full Binary Trees",
      "problem_id": "930",
      "frontend_id": "894",
      "difficulty": "Medium",
      "problem_slug": "all-possible-full-binary-trees",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Recursion",
        "Memoization",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Frequency Stack",
      "problem_id": "931",
      "frontend_id": "895",
      "difficulty": "Hard",
      "problem_slug": "maximum-frequency-stack",
      "topics": [
        "Hash Table",
        "Stack",
        "Design",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Monotonic Array",
      "problem_id": "932",
      "frontend_id": "896",
      "difficulty": "Easy",
      "problem_slug": "monotonic-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Increasing Order Search Tree",
      "problem_id": "933",
      "frontend_id": "897",
      "difficulty": "Easy",
      "problem_slug": "increasing-order-search-tree",
      "topics": [
        "Stack",
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bitwise ORs of Subarrays",
      "problem_id": "934",
      "frontend_id": "898",
      "difficulty": "Medium",
      "problem_slug": "bitwise-ors-of-subarrays",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Orderly Queue",
      "problem_id": "935",
      "frontend_id": "899",
      "difficulty": "Hard",
      "problem_slug": "orderly-queue",
      "topics": [
        "Math",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "RLE Iterator",
      "problem_id": "936",
      "frontend_id": "900",
      "difficulty": "Medium",
      "problem_slug": "rle-iterator",
      "topics": [
        "Array",
        "Design",
        "Counting",
        "Iterator"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Online Stock Span",
      "problem_id": "937",
      "frontend_id": "901",
      "difficulty": "Medium",
      "problem_slug": "online-stock-span",
      "topics": [
        "Stack",
        "Design",
        "Monotonic Stack",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Numbers At Most N Given Digit Set",
      "problem_id": "938",
      "frontend_id": "902",
      "difficulty": "Hard",
      "problem_slug": "numbers-at-most-n-given-digit-set",
      "topics": [
        "Array",
        "Math",
        "String",
        "Binary Search",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Permutations for DI Sequence",
      "problem_id": "939",
      "frontend_id": "903",
      "difficulty": "Hard",
      "problem_slug": "valid-permutations-for-di-sequence",
      "topics": [
        "String",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fruit Into Baskets",
      "problem_id": "940",
      "frontend_id": "904",
      "difficulty": "Medium",
      "problem_slug": "fruit-into-baskets",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Array By Parity",
      "problem_id": "941",
      "frontend_id": "905",
      "difficulty": "Easy",
      "problem_slug": "sort-array-by-parity",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Super Palindromes",
      "problem_id": "942",
      "frontend_id": "906",
      "difficulty": "Hard",
      "problem_slug": "super-palindromes",
      "topics": [
        "Math",
        "String",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Subarray Minimums",
      "problem_id": "943",
      "frontend_id": "907",
      "difficulty": "Medium",
      "problem_slug": "sum-of-subarray-minimums",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Range I",
      "problem_id": "944",
      "frontend_id": "908",
      "difficulty": "Easy",
      "problem_slug": "smallest-range-i",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Snakes and Ladders",
      "problem_id": "945",
      "frontend_id": "909",
      "difficulty": "Medium",
      "problem_slug": "snakes-and-ladders",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Range II",
      "problem_id": "946",
      "frontend_id": "910",
      "difficulty": "Medium",
      "problem_slug": "smallest-range-ii",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Online Election",
      "problem_id": "947",
      "frontend_id": "911",
      "difficulty": "Medium",
      "problem_slug": "online-election",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort an Array",
      "problem_id": "948",
      "frontend_id": "912",
      "difficulty": "Medium",
      "problem_slug": "sort-an-array",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Sorting",
        "Heap (Priority Queue)",
        "Merge Sort",
        "Bucket Sort",
        "Radix Sort",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cat and Mouse",
      "problem_id": "949",
      "frontend_id": "913",
      "difficulty": "Hard",
      "problem_slug": "cat-and-mouse",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Graph",
        "Topological Sort",
        "Memoization",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "X of a Kind in a Deck of Cards",
      "problem_id": "950",
      "frontend_id": "914",
      "difficulty": "Easy",
      "problem_slug": "x-of-a-kind-in-a-deck-of-cards",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array into Disjoint Intervals",
      "problem_id": "951",
      "frontend_id": "915",
      "difficulty": "Medium",
      "problem_slug": "partition-array-into-disjoint-intervals",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Word Subsets",
      "problem_id": "952",
      "frontend_id": "916",
      "difficulty": "Medium",
      "problem_slug": "word-subsets",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Only Letters",
      "problem_id": "953",
      "frontend_id": "917",
      "difficulty": "Easy",
      "problem_slug": "reverse-only-letters",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum Circular Subarray",
      "problem_id": "954",
      "frontend_id": "918",
      "difficulty": "Medium",
      "problem_slug": "maximum-sum-circular-subarray",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Dynamic Programming",
        "Queue",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Complete Binary Tree Inserter",
      "problem_id": "955",
      "frontend_id": "919",
      "difficulty": "Medium",
      "problem_slug": "complete-binary-tree-inserter",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Design",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Music Playlists",
      "problem_id": "956",
      "frontend_id": "920",
      "difficulty": "Hard",
      "problem_slug": "number-of-music-playlists",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Add to Make Parentheses Valid",
      "problem_id": "957",
      "frontend_id": "921",
      "difficulty": "Medium",
      "problem_slug": "minimum-add-to-make-parentheses-valid",
      "topics": [
        "String",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Array By Parity II",
      "problem_id": "958",
      "frontend_id": "922",
      "difficulty": "Easy",
      "problem_slug": "sort-array-by-parity-ii",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "3Sum With Multiplicity",
      "problem_id": "959",
      "frontend_id": "923",
      "difficulty": "Medium",
      "problem_slug": "3sum-with-multiplicity",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Malware Spread",
      "problem_id": "960",
      "frontend_id": "924",
      "difficulty": "Hard",
      "problem_slug": "minimize-malware-spread",
      "topics": [
        "Array",
        "Hash Table",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Long Pressed Name",
      "problem_id": "961",
      "frontend_id": "925",
      "difficulty": "Easy",
      "problem_slug": "long-pressed-name",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flip String to Monotone Increasing",
      "problem_id": "962",
      "frontend_id": "926",
      "difficulty": "Medium",
      "problem_slug": "flip-string-to-monotone-increasing",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Three Equal Parts",
      "problem_id": "963",
      "frontend_id": "927",
      "difficulty": "Hard",
      "problem_slug": "three-equal-parts",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Malware Spread II",
      "problem_id": "964",
      "frontend_id": "928",
      "difficulty": "Hard",
      "problem_slug": "minimize-malware-spread-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Email Addresses",
      "problem_id": "965",
      "frontend_id": "929",
      "difficulty": "Easy",
      "problem_slug": "unique-email-addresses",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Subarrays With Sum",
      "problem_id": "966",
      "frontend_id": "930",
      "difficulty": "Medium",
      "problem_slug": "binary-subarrays-with-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Falling Path Sum",
      "problem_id": "967",
      "frontend_id": "931",
      "difficulty": "Medium",
      "problem_slug": "minimum-falling-path-sum",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Beautiful Array",
      "problem_id": "968",
      "frontend_id": "932",
      "difficulty": "Medium",
      "problem_slug": "beautiful-array",
      "topics": [
        "Array",
        "Math",
        "Divide and Conquer"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Recent Calls",
      "problem_id": "969",
      "frontend_id": "933",
      "difficulty": "Easy",
      "problem_slug": "number-of-recent-calls",
      "topics": [
        "Design",
        "Queue",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Bridge",
      "problem_id": "971",
      "frontend_id": "934",
      "difficulty": "Medium",
      "problem_slug": "shortest-bridge",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Knight Dialer",
      "problem_id": "972",
      "frontend_id": "935",
      "difficulty": "Medium",
      "problem_slug": "knight-dialer",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stamping The Sequence",
      "problem_id": "973",
      "frontend_id": "936",
      "difficulty": "Hard",
      "problem_slug": "stamping-the-sequence",
      "topics": [
        "String",
        "Stack",
        "Greedy",
        "Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reorder Data in Log Files",
      "problem_id": "974",
      "frontend_id": "937",
      "difficulty": "Medium",
      "problem_slug": "reorder-data-in-log-files",
      "topics": [
        "Array",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Range Sum of BST",
      "problem_id": "975",
      "frontend_id": "938",
      "difficulty": "Easy",
      "problem_slug": "range-sum-of-bst",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Area Rectangle",
      "problem_id": "976",
      "frontend_id": "939",
      "difficulty": "Medium",
      "problem_slug": "minimum-area-rectangle",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Geometry",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distinct Subsequences II",
      "problem_id": "977",
      "frontend_id": "940",
      "difficulty": "Hard",
      "problem_slug": "distinct-subsequences-ii",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Mountain Array",
      "problem_id": "978",
      "frontend_id": "941",
      "difficulty": "Easy",
      "problem_slug": "valid-mountain-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "DI String Match",
      "problem_id": "979",
      "frontend_id": "942",
      "difficulty": "Easy",
      "problem_slug": "di-string-match",
      "topics": [
        "Array",
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Shortest Superstring",
      "problem_id": "980",
      "frontend_id": "943",
      "difficulty": "Hard",
      "problem_slug": "find-the-shortest-superstring",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Columns to Make Sorted",
      "problem_id": "981",
      "frontend_id": "944",
      "difficulty": "Easy",
      "problem_slug": "delete-columns-to-make-sorted",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Increment to Make Array Unique",
      "problem_id": "982",
      "frontend_id": "945",
      "difficulty": "Medium",
      "problem_slug": "minimum-increment-to-make-array-unique",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Validate Stack Sequences",
      "problem_id": "983",
      "frontend_id": "946",
      "difficulty": "Medium",
      "problem_slug": "validate-stack-sequences",
      "topics": [
        "Array",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Stones Removed with Same Row or Column",
      "problem_id": "984",
      "frontend_id": "947",
      "difficulty": "Medium",
      "problem_slug": "most-stones-removed-with-same-row-or-column",
      "topics": [
        "Hash Table",
        "Depth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bag of Tokens",
      "problem_id": "985",
      "frontend_id": "948",
      "difficulty": "Medium",
      "problem_slug": "bag-of-tokens",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Time for Given Digits",
      "problem_id": "986",
      "frontend_id": "949",
      "difficulty": "Medium",
      "problem_slug": "largest-time-for-given-digits",
      "topics": [
        "Array",
        "String",
        "Backtracking",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reveal Cards In Increasing Order",
      "problem_id": "987",
      "frontend_id": "950",
      "difficulty": "Medium",
      "problem_slug": "reveal-cards-in-increasing-order",
      "topics": [
        "Array",
        "Queue",
        "Sorting",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flip Equivalent Binary Trees",
      "problem_id": "988",
      "frontend_id": "951",
      "difficulty": "Medium",
      "problem_slug": "flip-equivalent-binary-trees",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Component Size by Common Factor",
      "problem_id": "989",
      "frontend_id": "952",
      "difficulty": "Hard",
      "problem_slug": "largest-component-size-by-common-factor",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Union Find",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Verifying an Alien Dictionary",
      "problem_id": "990",
      "frontend_id": "953",
      "difficulty": "Easy",
      "problem_slug": "verifying-an-alien-dictionary",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Array of Doubled Pairs",
      "problem_id": "991",
      "frontend_id": "954",
      "difficulty": "Medium",
      "problem_slug": "array-of-doubled-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Columns to Make Sorted II",
      "problem_id": "992",
      "frontend_id": "955",
      "difficulty": "Medium",
      "problem_slug": "delete-columns-to-make-sorted-ii",
      "topics": [
        "Array",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Tallest Billboard",
      "problem_id": "993",
      "frontend_id": "956",
      "difficulty": "Hard",
      "problem_slug": "tallest-billboard",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Prison Cells After N Days",
      "problem_id": "994",
      "frontend_id": "957",
      "difficulty": "Medium",
      "problem_slug": "prison-cells-after-n-days",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check Completeness of a Binary Tree",
      "problem_id": "998",
      "frontend_id": "958",
      "difficulty": "Medium",
      "problem_slug": "check-completeness-of-a-binary-tree",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Regions Cut By Slashes",
      "problem_id": "999",
      "frontend_id": "959",
      "difficulty": "Medium",
      "problem_slug": "regions-cut-by-slashes",
      "topics": [
        "Array",
        "Hash Table",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Columns to Make Sorted III",
      "problem_id": "1000",
      "frontend_id": "960",
      "difficulty": "Hard",
      "problem_slug": "delete-columns-to-make-sorted-iii",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "N-Repeated Element in Size 2N Array",
      "problem_id": "1001",
      "frontend_id": "961",
      "difficulty": "Easy",
      "problem_slug": "n-repeated-element-in-size-2n-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Width Ramp",
      "problem_id": "1002",
      "frontend_id": "962",
      "difficulty": "Medium",
      "problem_slug": "maximum-width-ramp",
      "topics": [
        "Array",
        "Two Pointers",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Area Rectangle II",
      "problem_id": "1003",
      "frontend_id": "963",
      "difficulty": "Medium",
      "problem_slug": "minimum-area-rectangle-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Least Operators to Express Number",
      "problem_id": "1004",
      "frontend_id": "964",
      "difficulty": "Hard",
      "problem_slug": "least-operators-to-express-number",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Univalued Binary Tree",
      "problem_id": "1005",
      "frontend_id": "965",
      "difficulty": "Easy",
      "problem_slug": "univalued-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Vowel Spellchecker",
      "problem_id": "1006",
      "frontend_id": "966",
      "difficulty": "Medium",
      "problem_slug": "vowel-spellchecker",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Numbers With Same Consecutive Differences",
      "problem_id": "1007",
      "frontend_id": "967",
      "difficulty": "Medium",
      "problem_slug": "numbers-with-same-consecutive-differences",
      "topics": [
        "Backtracking",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Cameras",
      "problem_id": "1008",
      "frontend_id": "968",
      "difficulty": "Hard",
      "problem_slug": "binary-tree-cameras",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pancake Sorting",
      "problem_id": "1009",
      "frontend_id": "969",
      "difficulty": "Medium",
      "problem_slug": "pancake-sorting",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Powerful Integers",
      "problem_id": "1010",
      "frontend_id": "970",
      "difficulty": "Medium",
      "problem_slug": "powerful-integers",
      "topics": [
        "Hash Table",
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flip Binary Tree To Match Preorder Traversal",
      "problem_id": "1011",
      "frontend_id": "971",
      "difficulty": "Medium",
      "problem_slug": "flip-binary-tree-to-match-preorder-traversal",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Equal Rational Numbers",
      "problem_id": "1012",
      "frontend_id": "972",
      "difficulty": "Hard",
      "problem_slug": "equal-rational-numbers",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K Closest Points to Origin",
      "problem_id": "1014",
      "frontend_id": "973",
      "difficulty": "Medium",
      "problem_slug": "k-closest-points-to-origin",
      "topics": [
        "Array",
        "Math",
        "Divide and Conquer",
        "Geometry",
        "Sorting",
        "Heap (Priority Queue)",
        "Quickselect"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subarray Sums Divisible by K",
      "problem_id": "1016",
      "frontend_id": "974",
      "difficulty": "Medium",
      "problem_slug": "subarray-sums-divisible-by-k",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Odd Even Jump",
      "problem_id": "1017",
      "frontend_id": "975",
      "difficulty": "Hard",
      "problem_slug": "odd-even-jump",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Sorting",
        "Monotonic Stack",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Perimeter Triangle",
      "problem_id": "1018",
      "frontend_id": "976",
      "difficulty": "Easy",
      "problem_slug": "largest-perimeter-triangle",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Squares of a Sorted Array",
      "problem_id": "1019",
      "frontend_id": "977",
      "difficulty": "Easy",
      "problem_slug": "squares-of-a-sorted-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Turbulent Subarray",
      "problem_id": "1020",
      "frontend_id": "978",
      "difficulty": "Medium",
      "problem_slug": "longest-turbulent-subarray",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Coins in Binary Tree",
      "problem_id": "1021",
      "frontend_id": "979",
      "difficulty": "Medium",
      "problem_slug": "distribute-coins-in-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Paths III",
      "problem_id": "1022",
      "frontend_id": "980",
      "difficulty": "Hard",
      "problem_slug": "unique-paths-iii",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Time Based Key-Value Store",
      "problem_id": "1023",
      "frontend_id": "981",
      "difficulty": "Medium",
      "problem_slug": "time-based-key-value-store",
      "topics": [
        "Hash Table",
        "String",
        "Binary Search",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Triples with Bitwise AND Equal To Zero",
      "problem_id": "1024",
      "frontend_id": "982",
      "difficulty": "Hard",
      "problem_slug": "triples-with-bitwise-and-equal-to-zero",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost For Tickets",
      "problem_id": "1025",
      "frontend_id": "983",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-for-tickets",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "String Without AAA or BBB",
      "problem_id": "1026",
      "frontend_id": "984",
      "difficulty": "Medium",
      "problem_slug": "string-without-aaa-or-bbb",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Sum of Even Numbers After Queries",
      "problem_id": "1027",
      "frontend_id": "985",
      "difficulty": "Medium",
      "problem_slug": "sum-of-even-numbers-after-queries",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Interval List Intersections",
      "problem_id": "1028",
      "frontend_id": "986",
      "difficulty": "Medium",
      "problem_slug": "interval-list-intersections",
      "topics": [
        "Array",
        "Two Pointers",
        "Line Sweep"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Vertical Order Traversal of a Binary Tree",
      "problem_id": "1029",
      "frontend_id": "987",
      "difficulty": "Hard",
      "problem_slug": "vertical-order-traversal-of-a-binary-tree",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Sorting",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest String Starting From Leaf",
      "problem_id": "1030",
      "frontend_id": "988",
      "difficulty": "Medium",
      "problem_slug": "smallest-string-starting-from-leaf",
      "topics": [
        "String",
        "Backtracking",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add to Array-Form of Integer",
      "problem_id": "1031",
      "frontend_id": "989",
      "difficulty": "Easy",
      "problem_slug": "add-to-array-form-of-integer",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Satisfiability of Equality Equations",
      "problem_id": "1032",
      "frontend_id": "990",
      "difficulty": "Medium",
      "problem_slug": "satisfiability-of-equality-equations",
      "topics": [
        "Array",
        "String",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Broken Calculator",
      "problem_id": "1033",
      "frontend_id": "991",
      "difficulty": "Medium",
      "problem_slug": "broken-calculator",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subarrays with K Different Integers",
      "problem_id": "1034",
      "frontend_id": "992",
      "difficulty": "Hard",
      "problem_slug": "subarrays-with-k-different-integers",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cousins in Binary Tree",
      "problem_id": "1035",
      "frontend_id": "993",
      "difficulty": "Easy",
      "problem_slug": "cousins-in-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotting Oranges",
      "problem_id": "1036",
      "frontend_id": "994",
      "difficulty": "Medium",
      "problem_slug": "rotting-oranges",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of K Consecutive Bit Flips",
      "problem_id": "1037",
      "frontend_id": "995",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-k-consecutive-bit-flips",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Queue",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Squareful Arrays",
      "problem_id": "1038",
      "frontend_id": "996",
      "difficulty": "Hard",
      "problem_slug": "number-of-squareful-arrays",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Town Judge",
      "problem_id": "1039",
      "frontend_id": "997",
      "difficulty": "Easy",
      "problem_slug": "find-the-town-judge",
      "topics": [
        "Array",
        "Hash Table",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Binary Tree II",
      "problem_id": "1040",
      "frontend_id": "998",
      "difficulty": "Medium",
      "problem_slug": "maximum-binary-tree-ii",
      "topics": [
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Available Captures for Rook",
      "problem_id": "1041",
      "frontend_id": "999",
      "difficulty": "Easy",
      "problem_slug": "available-captures-for-rook",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Merge Stones",
      "problem_id": "1042",
      "frontend_id": "1000",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-merge-stones",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Grid Illumination",
      "problem_id": "1043",
      "frontend_id": "1001",
      "difficulty": "Hard",
      "problem_slug": "grid-illumination",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Common Characters",
      "problem_id": "1044",
      "frontend_id": "1002",
      "difficulty": "Easy",
      "problem_slug": "find-common-characters",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If Word Is Valid After Substitutions",
      "problem_id": "1045",
      "frontend_id": "1003",
      "difficulty": "Medium",
      "problem_slug": "check-if-word-is-valid-after-substitutions",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Consecutive Ones III",
      "problem_id": "1046",
      "frontend_id": "1004",
      "difficulty": "Medium",
      "problem_slug": "max-consecutive-ones-iii",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Sum Of Array After K Negations",
      "problem_id": "1047",
      "frontend_id": "1005",
      "difficulty": "Easy",
      "problem_slug": "maximize-sum-of-array-after-k-negations",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Clumsy Factorial",
      "problem_id": "1048",
      "frontend_id": "1006",
      "difficulty": "Medium",
      "problem_slug": "clumsy-factorial",
      "topics": [
        "Math",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Domino Rotations For Equal Row",
      "problem_id": "1049",
      "frontend_id": "1007",
      "difficulty": "Medium",
      "problem_slug": "minimum-domino-rotations-for-equal-row",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Binary Search Tree from Preorder Traversal",
      "problem_id": "1050",
      "frontend_id": "1008",
      "difficulty": "Medium",
      "problem_slug": "construct-binary-search-tree-from-preorder-traversal",
      "topics": [
        "Array",
        "Stack",
        "Tree",
        "Binary Search Tree",
        "Monotonic Stack",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Complement of Base 10 Integer",
      "problem_id": "1054",
      "frontend_id": "1009",
      "difficulty": "Easy",
      "problem_slug": "complement-of-base-10-integer",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pairs of Songs With Total Durations Divisible by 60",
      "problem_id": "1055",
      "frontend_id": "1010",
      "difficulty": "Medium",
      "problem_slug": "pairs-of-songs-with-total-durations-divisible-by-60",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Capacity To Ship Packages Within D Days",
      "problem_id": "1056",
      "frontend_id": "1011",
      "difficulty": "Medium",
      "problem_slug": "capacity-to-ship-packages-within-d-days",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Numbers With Repeated Digits",
      "problem_id": "1057",
      "frontend_id": "1012",
      "difficulty": "Hard",
      "problem_slug": "numbers-with-repeated-digits",
      "topics": [
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array Into Three Parts With Equal Sum",
      "problem_id": "1062",
      "frontend_id": "1013",
      "difficulty": "Easy",
      "problem_slug": "partition-array-into-three-parts-with-equal-sum",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Sightseeing Pair",
      "problem_id": "1063",
      "frontend_id": "1014",
      "difficulty": "Medium",
      "problem_slug": "best-sightseeing-pair",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Integer Divisible by K",
      "problem_id": "1064",
      "frontend_id": "1015",
      "difficulty": "Medium",
      "problem_slug": "smallest-integer-divisible-by-k",
      "topics": [
        "Hash Table",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary String With Substrings Representing 1 To N",
      "problem_id": "1065",
      "frontend_id": "1016",
      "difficulty": "Medium",
      "problem_slug": "binary-string-with-substrings-representing-1-to-n",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert to Base -2",
      "problem_id": "1070",
      "frontend_id": "1017",
      "difficulty": "Medium",
      "problem_slug": "convert-to-base-2",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Prefix Divisible By 5",
      "problem_id": "1071",
      "frontend_id": "1018",
      "difficulty": "Easy",
      "problem_slug": "binary-prefix-divisible-by-5",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Next Greater Node In Linked List",
      "problem_id": "1072",
      "frontend_id": "1019",
      "difficulty": "Medium",
      "problem_slug": "next-greater-node-in-linked-list",
      "topics": [
        "Array",
        "Linked List",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Enclaves",
      "problem_id": "1073",
      "frontend_id": "1020",
      "difficulty": "Medium",
      "problem_slug": "number-of-enclaves",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Outermost Parentheses",
      "problem_id": "1078",
      "frontend_id": "1021",
      "difficulty": "Easy",
      "problem_slug": "remove-outermost-parentheses",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Root To Leaf Binary Numbers",
      "problem_id": "1079",
      "frontend_id": "1022",
      "difficulty": "Easy",
      "problem_slug": "sum-of-root-to-leaf-binary-numbers",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Camelcase Matching",
      "problem_id": "1080",
      "frontend_id": "1023",
      "difficulty": "Medium",
      "problem_slug": "camelcase-matching",
      "topics": [
        "Array",
        "Two Pointers",
        "String",
        "Trie",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Video Stitching",
      "problem_id": "1081",
      "frontend_id": "1024",
      "difficulty": "Medium",
      "problem_slug": "video-stitching",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divisor Game",
      "problem_id": "1086",
      "frontend_id": "1025",
      "difficulty": "Easy",
      "problem_slug": "divisor-game",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Brainteaser",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Difference Between Node and Ancestor",
      "problem_id": "1092",
      "frontend_id": "1026",
      "difficulty": "Medium",
      "problem_slug": "maximum-difference-between-node-and-ancestor",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Arithmetic Subsequence",
      "problem_id": "1087",
      "frontend_id": "1027",
      "difficulty": "Medium",
      "problem_slug": "longest-arithmetic-subsequence",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Recover a Tree From Preorder Traversal",
      "problem_id": "1093",
      "frontend_id": "1028",
      "difficulty": "Hard",
      "problem_slug": "recover-a-tree-from-preorder-traversal",
      "topics": [
        "String",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Two City Scheduling",
      "problem_id": "1095",
      "frontend_id": "1029",
      "difficulty": "Medium",
      "problem_slug": "two-city-scheduling",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Matrix Cells in Distance Order",
      "problem_id": "1094",
      "frontend_id": "1030",
      "difficulty": "Easy",
      "problem_slug": "matrix-cells-in-distance-order",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum of Two Non-Overlapping Subarrays",
      "problem_id": "1096",
      "frontend_id": "1031",
      "difficulty": "Medium",
      "problem_slug": "maximum-sum-of-two-non-overlapping-subarrays",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stream of Characters",
      "problem_id": "1097",
      "frontend_id": "1032",
      "difficulty": "Hard",
      "problem_slug": "stream-of-characters",
      "topics": [
        "Array",
        "String",
        "Design",
        "Trie",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Moving Stones Until Consecutive",
      "problem_id": "1103",
      "frontend_id": "1033",
      "difficulty": "Medium",
      "problem_slug": "moving-stones-until-consecutive",
      "topics": [
        "Math",
        "Brainteaser"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Coloring A Border",
      "problem_id": "1104",
      "frontend_id": "1034",
      "difficulty": "Medium",
      "problem_slug": "coloring-a-border",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Uncrossed Lines",
      "problem_id": "1105",
      "frontend_id": "1035",
      "difficulty": "Medium",
      "problem_slug": "uncrossed-lines",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Escape a Large Maze",
      "problem_id": "1106",
      "frontend_id": "1036",
      "difficulty": "Hard",
      "problem_slug": "escape-a-large-maze",
      "topics": [
        "Array",
        "Hash Table",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Boomerang",
      "problem_id": "1115",
      "frontend_id": "1037",
      "difficulty": "Easy",
      "problem_slug": "valid-boomerang",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Search Tree to Greater Sum Tree",
      "problem_id": "1114",
      "frontend_id": "1038",
      "difficulty": "Medium",
      "problem_slug": "binary-search-tree-to-greater-sum-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Score Triangulation of Polygon",
      "problem_id": "1111",
      "frontend_id": "1039",
      "difficulty": "Medium",
      "problem_slug": "minimum-score-triangulation-of-polygon",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Moving Stones Until Consecutive II",
      "problem_id": "1113",
      "frontend_id": "1040",
      "difficulty": "Medium",
      "problem_slug": "moving-stones-until-consecutive-ii",
      "topics": [
        "Array",
        "Math",
        "Sliding Window",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Robot Bounded In Circle",
      "problem_id": "1119",
      "frontend_id": "1041",
      "difficulty": "Medium",
      "problem_slug": "robot-bounded-in-circle",
      "topics": [
        "Math",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flower Planting With No Adjacent",
      "problem_id": "1120",
      "frontend_id": "1042",
      "difficulty": "Medium",
      "problem_slug": "flower-planting-with-no-adjacent",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array for Maximum Sum",
      "problem_id": "1121",
      "frontend_id": "1043",
      "difficulty": "Medium",
      "problem_slug": "partition-array-for-maximum-sum",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Duplicate Substring",
      "problem_id": "1122",
      "frontend_id": "1044",
      "difficulty": "Hard",
      "problem_slug": "longest-duplicate-substring",
      "topics": [
        "String",
        "Binary Search",
        "Sliding Window",
        "Rolling Hash",
        "Suffix Array",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Customers Who Bought All Products",
      "problem_id": "1135",
      "frontend_id": "1045",
      "difficulty": "Medium",
      "problem_slug": "customers-who-bought-all-products",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Last Stone Weight",
      "problem_id": "1127",
      "frontend_id": "1046",
      "difficulty": "Easy",
      "problem_slug": "last-stone-weight",
      "topics": [
        "Array",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove All Adjacent Duplicates In String",
      "problem_id": "1128",
      "frontend_id": "1047",
      "difficulty": "Easy",
      "problem_slug": "remove-all-adjacent-duplicates-in-string",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest String Chain",
      "problem_id": "1129",
      "frontend_id": "1048",
      "difficulty": "Medium",
      "problem_slug": "longest-string-chain",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "String",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Last Stone Weight II",
      "problem_id": "1130",
      "frontend_id": "1049",
      "difficulty": "Medium",
      "problem_slug": "last-stone-weight-ii",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Actors and Directors Who Cooperated At Least Three Times",
      "problem_id": "1136",
      "frontend_id": "1050",
      "difficulty": "Easy",
      "problem_slug": "actors-and-directors-who-cooperated-at-least-three-times",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Height Checker",
      "problem_id": "1137",
      "frontend_id": "1051",
      "difficulty": "Easy",
      "problem_slug": "height-checker",
      "topics": [
        "Array",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Grumpy Bookstore Owner",
      "problem_id": "1138",
      "frontend_id": "1052",
      "difficulty": "Medium",
      "problem_slug": "grumpy-bookstore-owner",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Previous Permutation With One Swap",
      "problem_id": "1139",
      "frontend_id": "1053",
      "difficulty": "Medium",
      "problem_slug": "previous-permutation-with-one-swap",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distant Barcodes",
      "problem_id": "1140",
      "frontend_id": "1054",
      "difficulty": "Medium",
      "problem_slug": "distant-barcodes",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest Equivalent String",
      "problem_id": "1058",
      "frontend_id": "1061",
      "difficulty": "Medium",
      "problem_slug": "lexicographically-smallest-equivalent-string",
      "topics": [
        "String",
        "Union Find"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Product Sales Analysis I",
      "problem_id": "1153",
      "frontend_id": "1068",
      "difficulty": "Easy",
      "problem_slug": "product-sales-analysis-i",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Product Sales Analysis III",
      "problem_id": "1155",
      "frontend_id": "1070",
      "difficulty": "Medium",
      "problem_slug": "product-sales-analysis-iii",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Greatest Common Divisor of Strings",
      "problem_id": "1146",
      "frontend_id": "1071",
      "difficulty": "Easy",
      "problem_slug": "greatest-common-divisor-of-strings",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Flip Columns For Maximum Number of Equal Rows",
      "problem_id": "1147",
      "frontend_id": "1072",
      "difficulty": "Medium",
      "problem_slug": "flip-columns-for-maximum-number-of-equal-rows",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Adding Two Negabinary Numbers",
      "problem_id": "1148",
      "frontend_id": "1073",
      "difficulty": "Medium",
      "problem_slug": "adding-two-negabinary-numbers",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Submatrices That Sum to Target",
      "problem_id": "1145",
      "frontend_id": "1074",
      "difficulty": "Hard",
      "problem_slug": "number-of-submatrices-that-sum-to-target",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Project Employees I",
      "problem_id": "1161",
      "frontend_id": "1075",
      "difficulty": "Easy",
      "problem_slug": "project-employees-i",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Occurrences After Bigram",
      "problem_id": "1156",
      "frontend_id": "1078",
      "difficulty": "Easy",
      "problem_slug": "occurrences-after-bigram",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Letter Tile Possibilities",
      "problem_id": "1160",
      "frontend_id": "1079",
      "difficulty": "Medium",
      "problem_slug": "letter-tile-possibilities",
      "topics": [
        "Hash Table",
        "String",
        "Backtracking",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Insufficient Nodes in Root to Leaf Paths",
      "problem_id": "1157",
      "frontend_id": "1080",
      "difficulty": "Medium",
      "problem_slug": "insufficient-nodes-in-root-to-leaf-paths",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Subsequence of Distinct Characters",
      "problem_id": "1159",
      "frontend_id": "1081",
      "difficulty": "Medium",
      "problem_slug": "smallest-subsequence-of-distinct-characters",
      "topics": [
        "String",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sales Analysis III",
      "problem_id": "1174",
      "frontend_id": "1084",
      "difficulty": "Easy",
      "problem_slug": "sales-analysis-iii",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Duplicate Zeros",
      "problem_id": "1168",
      "frontend_id": "1089",
      "difficulty": "Easy",
      "problem_slug": "duplicate-zeros",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Largest Values From Labels",
      "problem_id": "1169",
      "frontend_id": "1090",
      "difficulty": "Medium",
      "problem_slug": "largest-values-from-labels",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Path in Binary Matrix",
      "problem_id": "1171",
      "frontend_id": "1091",
      "difficulty": "Medium",
      "problem_slug": "shortest-path-in-binary-matrix",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Common Supersequence ",
      "problem_id": "1170",
      "frontend_id": "1092",
      "difficulty": "Hard",
      "problem_slug": "shortest-common-supersequence",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Statistics from a Large Sample",
      "problem_id": "1183",
      "frontend_id": "1093",
      "difficulty": "Medium",
      "problem_slug": "statistics-from-a-large-sample",
      "topics": [
        "Array",
        "Math",
        "Probability and Statistics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Car Pooling",
      "problem_id": "1184",
      "frontend_id": "1094",
      "difficulty": "Medium",
      "problem_slug": "car-pooling",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)",
        "Simulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find in Mountain Array",
      "problem_id": "1185",
      "frontend_id": "1095",
      "difficulty": "Hard",
      "problem_slug": "find-in-mountain-array",
      "topics": [
        "Array",
        "Binary Search",
        "Interactive"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Brace Expansion II",
      "problem_id": "1188",
      "frontend_id": "1096",
      "difficulty": "Hard",
      "problem_slug": "brace-expansion-ii",
      "topics": [
        "String",
        "Backtracking",
        "Stack",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Candies to People",
      "problem_id": "1195",
      "frontend_id": "1103",
      "difficulty": "Easy",
      "problem_slug": "distribute-candies-to-people",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path In Zigzag Labelled Binary Tree",
      "problem_id": "1194",
      "frontend_id": "1104",
      "difficulty": "Medium",
      "problem_slug": "path-in-zigzag-labelled-binary-tree",
      "topics": [
        "Math",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Filling Bookcase Shelves",
      "problem_id": "1196",
      "frontend_id": "1105",
      "difficulty": "Medium",
      "problem_slug": "filling-bookcase-shelves",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Parsing A Boolean Expression",
      "problem_id": "1197",
      "frontend_id": "1106",
      "difficulty": "Hard",
      "problem_slug": "parsing-a-boolean-expression",
      "topics": [
        "String",
        "Stack",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Defanging an IP Address",
      "problem_id": "1205",
      "frontend_id": "1108",
      "difficulty": "Easy",
      "problem_slug": "defanging-an-ip-address",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Corporate Flight Bookings",
      "problem_id": "1206",
      "frontend_id": "1109",
      "difficulty": "Medium",
      "problem_slug": "corporate-flight-bookings",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Nodes And Return Forest",
      "problem_id": "1207",
      "frontend_id": "1110",
      "difficulty": "Medium",
      "problem_slug": "delete-nodes-and-return-forest",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
      "problem_id": "1208",
      "frontend_id": "1111",
      "difficulty": "Medium",
      "problem_slug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Print in Order",
      "problem_id": "1203",
      "frontend_id": "1114",
      "difficulty": "Easy",
      "problem_slug": "print-in-order",
      "topics": [
        "Concurrency"
      ],
      "follow_ups": false,
      "code_snippets": 6
    },
    {
      "title": "Print FooBar Alternately",
      "problem_id": "1187",
      "frontend_id": "1115",
      "difficulty": "Medium",
      "problem_slug": "print-foobar-alternately",
      "topics": [
        "Concurrency"
      ],
      "follow_ups": false,
      "code_snippets": 7
    },
    {
      "title": "Print Zero Even Odd",
      "problem_id": "1216",
      "frontend_id": "1116",
      "difficulty": "Medium",
      "problem_slug": "print-zero-even-odd",
      "topics": [
        "Concurrency"
      ],
      "follow_ups": false,
      "code_snippets": 6
    },
    {
      "title": "Building H2O",
      "problem_id": "1186",
      "frontend_id": "1117",
      "difficulty": "Medium",
      "problem_slug": "building-h2o",
      "topics": [
        "Concurrency"
      ],
      "follow_ups": false,
      "code_snippets": 6
    },
    {
      "title": "Relative Sort Array",
      "problem_id": "1217",
      "frontend_id": "1122",
      "difficulty": "Easy",
      "problem_slug": "relative-sort-array",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lowest Common Ancestor of Deepest Leaves",
      "problem_id": "1218",
      "frontend_id": "1123",
      "difficulty": "Medium",
      "problem_slug": "lowest-common-ancestor-of-deepest-leaves",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Well-Performing Interval",
      "problem_id": "1219",
      "frontend_id": "1124",
      "difficulty": "Medium",
      "problem_slug": "longest-well-performing-interval",
      "topics": [
        "Array",
        "Hash Table",
        "Stack",
        "Monotonic Stack",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Sufficient Team",
      "problem_id": "1220",
      "frontend_id": "1125",
      "difficulty": "Hard",
      "problem_slug": "smallest-sufficient-team",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Equivalent Domino Pairs",
      "problem_id": "1227",
      "frontend_id": "1128",
      "difficulty": "Easy",
      "problem_slug": "number-of-equivalent-domino-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Path with Alternating Colors",
      "problem_id": "1229",
      "frontend_id": "1129",
      "difficulty": "Medium",
      "problem_slug": "shortest-path-with-alternating-colors",
      "topics": [
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost Tree From Leaf Values",
      "problem_id": "1228",
      "frontend_id": "1130",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-tree-from-leaf-values",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum of Absolute Value Expression",
      "problem_id": "1230",
      "frontend_id": "1131",
      "difficulty": "Medium",
      "problem_slug": "maximum-of-absolute-value-expression",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "N-th Tribonacci Number",
      "problem_id": "1236",
      "frontend_id": "1137",
      "difficulty": "Easy",
      "problem_slug": "n-th-tribonacci-number",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Alphabet Board Path",
      "problem_id": "1238",
      "frontend_id": "1138",
      "difficulty": "Medium",
      "problem_slug": "alphabet-board-path",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Largest 1-Bordered Square",
      "problem_id": "1239",
      "frontend_id": "1139",
      "difficulty": "Medium",
      "problem_slug": "largest-1-bordered-square",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Stone Game II",
      "problem_id": "1240",
      "frontend_id": "1140",
      "difficulty": "Medium",
      "problem_slug": "stone-game-ii",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Prefix Sum",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "User Activity for the Past 30 Days I",
      "problem_id": "1245",
      "frontend_id": "1141",
      "difficulty": "Easy",
      "problem_slug": "user-activity-for-the-past-30-days-i",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Longest Common Subsequence",
      "problem_id": "1250",
      "frontend_id": "1143",
      "difficulty": "Medium",
      "problem_slug": "longest-common-subsequence",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decrease Elements To Make Array Zigzag",
      "problem_id": "1247",
      "frontend_id": "1144",
      "difficulty": "Medium",
      "problem_slug": "decrease-elements-to-make-array-zigzag",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Binary Tree Coloring Game",
      "problem_id": "1248",
      "frontend_id": "1145",
      "difficulty": "Medium",
      "problem_slug": "binary-tree-coloring-game",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Snapshot Array",
      "problem_id": "1249",
      "frontend_id": "1146",
      "difficulty": "Medium",
      "problem_slug": "snapshot-array",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Chunked Palindrome Decomposition",
      "problem_id": "1251",
      "frontend_id": "1147",
      "difficulty": "Hard",
      "problem_slug": "longest-chunked-palindrome-decomposition",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming",
        "Greedy",
        "Rolling Hash",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Article Views I",
      "problem_id": "1258",
      "frontend_id": "1148",
      "difficulty": "Easy",
      "problem_slug": "article-views-i",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Day of the Year",
      "problem_id": "1260",
      "frontend_id": "1154",
      "difficulty": "Easy",
      "problem_slug": "day-of-the-year",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Dice Rolls With Target Sum",
      "problem_id": "1263",
      "frontend_id": "1155",
      "difficulty": "Medium",
      "problem_slug": "number-of-dice-rolls-with-target-sum",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Swap For Longest Repeated Character Substring",
      "problem_id": "1261",
      "frontend_id": "1156",
      "difficulty": "Medium",
      "problem_slug": "swap-for-longest-repeated-character-substring",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Online Majority Element In Subarray",
      "problem_id": "1262",
      "frontend_id": "1157",
      "difficulty": "Hard",
      "problem_slug": "online-majority-element-in-subarray",
      "topics": [
        "Array",
        "Binary Search",
        "Design",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Market Analysis I",
      "problem_id": "1268",
      "frontend_id": "1158",
      "difficulty": "Medium",
      "problem_slug": "market-analysis-i",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find Words That Can Be Formed by Characters",
      "problem_id": "1112",
      "frontend_id": "1160",
      "difficulty": "Easy",
      "problem_slug": "find-words-that-can-be-formed-by-characters",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Level Sum of a Binary Tree",
      "problem_id": "1116",
      "frontend_id": "1161",
      "difficulty": "Medium",
      "problem_slug": "maximum-level-sum-of-a-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "As Far from Land as Possible",
      "problem_id": "1117",
      "frontend_id": "1162",
      "difficulty": "Medium",
      "problem_slug": "as-far-from-land-as-possible",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Last Substring in Lexicographical Order",
      "problem_id": "1133",
      "frontend_id": "1163",
      "difficulty": "Hard",
      "problem_slug": "last-substring-in-lexicographical-order",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Product Price at a Given Date",
      "problem_id": "1278",
      "frontend_id": "1164",
      "difficulty": "Medium",
      "problem_slug": "product-price-at-a-given-date",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Invalid Transactions",
      "problem_id": "1272",
      "frontend_id": "1169",
      "difficulty": "Medium",
      "problem_slug": "invalid-transactions",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Compare Strings by Frequency of the Smallest Character",
      "problem_id": "1273",
      "frontend_id": "1170",
      "difficulty": "Medium",
      "problem_slug": "compare-strings-by-frequency-of-the-smallest-character",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Zero Sum Consecutive Nodes from Linked List",
      "problem_id": "1267",
      "frontend_id": "1171",
      "difficulty": "Medium",
      "problem_slug": "remove-zero-sum-consecutive-nodes-from-linked-list",
      "topics": [
        "Hash Table",
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Dinner Plate Stacks",
      "problem_id": "1270",
      "frontend_id": "1172",
      "difficulty": "Hard",
      "problem_slug": "dinner-plate-stacks",
      "topics": [
        "Hash Table",
        "Stack",
        "Design",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Immediate Food Delivery II",
      "problem_id": "1292",
      "frontend_id": "1174",
      "difficulty": "Medium",
      "problem_slug": "immediate-food-delivery-ii",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Prime Arrangements",
      "problem_id": "1279",
      "frontend_id": "1175",
      "difficulty": "Easy",
      "problem_slug": "prime-arrangements",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Can Make Palindrome from Substring",
      "problem_id": "1281",
      "frontend_id": "1177",
      "difficulty": "Medium",
      "problem_slug": "can-make-palindrome-from-substring",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Valid Words for Each Puzzle",
      "problem_id": "1282",
      "frontend_id": "1178",
      "difficulty": "Hard",
      "problem_slug": "number-of-valid-words-for-each-puzzle",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reformat Department Table",
      "problem_id": "1301",
      "frontend_id": "1179",
      "difficulty": "Easy",
      "problem_slug": "reformat-department-table",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Distance Between Bus Stops",
      "problem_id": "1287",
      "frontend_id": "1184",
      "difficulty": "Easy",
      "problem_slug": "distance-between-bus-stops",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Day of the Week",
      "problem_id": "1289",
      "frontend_id": "1185",
      "difficulty": "Easy",
      "problem_slug": "day-of-the-week",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Subarray Sum with One Deletion",
      "problem_id": "1288",
      "frontend_id": "1186",
      "difficulty": "Medium",
      "problem_slug": "maximum-subarray-sum-with-one-deletion",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Array Strictly Increasing",
      "problem_id": "1290",
      "frontend_id": "1187",
      "difficulty": "Hard",
      "problem_slug": "make-array-strictly-increasing",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Balloons",
      "problem_id": "1297",
      "frontend_id": "1189",
      "difficulty": "Easy",
      "problem_slug": "maximum-number-of-balloons",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Substrings Between Each Pair of Parentheses",
      "problem_id": "1298",
      "frontend_id": "1190",
      "difficulty": "Medium",
      "problem_slug": "reverse-substrings-between-each-pair-of-parentheses",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-Concatenation Maximum Sum",
      "problem_id": "1299",
      "frontend_id": "1191",
      "difficulty": "Medium",
      "problem_slug": "k-concatenation-maximum-sum",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Critical Connections in a Network",
      "problem_id": "1300",
      "frontend_id": "1192",
      "difficulty": "Hard",
      "problem_slug": "critical-connections-in-a-network",
      "topics": [
        "Depth-First Search",
        "Graph",
        "Biconnected Component"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Monthly Transactions I",
      "problem_id": "1317",
      "frontend_id": "1193",
      "difficulty": "Medium",
      "problem_slug": "monthly-transactions-i",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Fizz Buzz Multithreaded",
      "problem_id": "1316",
      "frontend_id": "1195",
      "difficulty": "Medium",
      "problem_slug": "fizz-buzz-multithreaded",
      "topics": [
        "Concurrency"
      ],
      "follow_ups": false,
      "code_snippets": 6
    },
    {
      "title": "Minimum Absolute Difference",
      "problem_id": "1306",
      "frontend_id": "1200",
      "difficulty": "Easy",
      "problem_slug": "minimum-absolute-difference",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ugly Number III",
      "problem_id": "1307",
      "frontend_id": "1201",
      "difficulty": "Medium",
      "problem_slug": "ugly-number-iii",
      "topics": [
        "Math",
        "Binary Search",
        "Combinatorics",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest String With Swaps",
      "problem_id": "1308",
      "frontend_id": "1202",
      "difficulty": "Medium",
      "problem_slug": "smallest-string-with-swaps",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Items by Groups Respecting Dependencies",
      "problem_id": "1309",
      "frontend_id": "1203",
      "difficulty": "Hard",
      "problem_slug": "sort-items-by-groups-respecting-dependencies",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Last Person to Fit in the Bus",
      "problem_id": "1327",
      "frontend_id": "1204",
      "difficulty": "Medium",
      "problem_slug": "last-person-to-fit-in-the-bus",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Design Skiplist",
      "problem_id": "1337",
      "frontend_id": "1206",
      "difficulty": "Hard",
      "problem_slug": "design-skiplist",
      "topics": [
        "Linked List",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Number of Occurrences",
      "problem_id": "1319",
      "frontend_id": "1207",
      "difficulty": "Easy",
      "problem_slug": "unique-number-of-occurrences",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Get Equal Substrings Within Budget",
      "problem_id": "1321",
      "frontend_id": "1208",
      "difficulty": "Medium",
      "problem_slug": "get-equal-substrings-within-budget",
      "topics": [
        "String",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove All Adjacent Duplicates in String II",
      "problem_id": "1320",
      "frontend_id": "1209",
      "difficulty": "Medium",
      "problem_slug": "remove-all-adjacent-duplicates-in-string-ii",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Reach Target with Rotations",
      "problem_id": "1322",
      "frontend_id": "1210",
      "difficulty": "Hard",
      "problem_slug": "minimum-moves-to-reach-target-with-rotations",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Queries Quality and Percentage",
      "problem_id": "1338",
      "frontend_id": "1211",
      "difficulty": "Easy",
      "problem_slug": "queries-quality-and-percentage",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Minimum Cost to Move Chips to The Same Position",
      "problem_id": "1329",
      "frontend_id": "1217",
      "difficulty": "Easy",
      "problem_slug": "minimum-cost-to-move-chips-to-the-same-position",
      "topics": [
        "Array",
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Arithmetic Subsequence of Given Difference",
      "problem_id": "1330",
      "frontend_id": "1218",
      "difficulty": "Medium",
      "problem_slug": "longest-arithmetic-subsequence-of-given-difference",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path with Maximum Gold",
      "problem_id": "1331",
      "frontend_id": "1219",
      "difficulty": "Medium",
      "problem_slug": "path-with-maximum-gold",
      "topics": [
        "Array",
        "Backtracking",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Vowels Permutation",
      "problem_id": "1332",
      "frontend_id": "1220",
      "difficulty": "Hard",
      "problem_slug": "count-vowels-permutation",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split a String in Balanced Strings",
      "problem_id": "1341",
      "frontend_id": "1221",
      "difficulty": "Easy",
      "problem_slug": "split-a-string-in-balanced-strings",
      "topics": [
        "String",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Queens That Can Attack the King",
      "problem_id": "1342",
      "frontend_id": "1222",
      "difficulty": "Medium",
      "problem_slug": "queens-that-can-attack-the-king",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Dice Roll Simulation",
      "problem_id": "1343",
      "frontend_id": "1223",
      "difficulty": "Hard",
      "problem_slug": "dice-roll-simulation",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Equal Frequency",
      "problem_id": "1344",
      "frontend_id": "1224",
      "difficulty": "Hard",
      "problem_slug": "maximum-equal-frequency",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Dining Philosophers",
      "problem_id": "1340",
      "frontend_id": "1226",
      "difficulty": "Medium",
      "problem_slug": "the-dining-philosophers",
      "topics": [
        "Concurrency"
      ],
      "follow_ups": false,
      "code_snippets": 4
    },
    {
      "title": "Airplane Seat Assignment Probability",
      "problem_id": "1362",
      "frontend_id": "1227",
      "difficulty": "Medium",
      "problem_slug": "airplane-seat-assignment-probability",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Brainteaser",
        "Probability and Statistics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If It Is a Straight Line",
      "problem_id": "1349",
      "frontend_id": "1232",
      "difficulty": "Easy",
      "problem_slug": "check-if-it-is-a-straight-line",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Sub-Folders from the Filesystem",
      "problem_id": "1350",
      "frontend_id": "1233",
      "difficulty": "Medium",
      "problem_slug": "remove-sub-folders-from-the-filesystem",
      "topics": [
        "Array",
        "String",
        "Depth-First Search",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace the Substring for Balanced String",
      "problem_id": "1351",
      "frontend_id": "1234",
      "difficulty": "Medium",
      "problem_slug": "replace-the-substring-for-balanced-string",
      "topics": [
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Profit in Job Scheduling",
      "problem_id": "1352",
      "frontend_id": "1235",
      "difficulty": "Hard",
      "problem_slug": "maximum-profit-in-job-scheduling",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Positive Integer Solution for a Given Equation",
      "problem_id": "1358",
      "frontend_id": "1237",
      "difficulty": "Medium",
      "problem_slug": "find-positive-integer-solution-for-a-given-equation",
      "topics": [
        "Math",
        "Two Pointers",
        "Binary Search",
        "Interactive"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Circular Permutation in Binary Representation",
      "problem_id": "1359",
      "frontend_id": "1238",
      "difficulty": "Medium",
      "problem_slug": "circular-permutation-in-binary-representation",
      "topics": [
        "Math",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Maximum Length of a Concatenated String with Unique Characters",
      "problem_id": "1360",
      "frontend_id": "1239",
      "difficulty": "Medium",
      "problem_slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
      "topics": [
        "Array",
        "String",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Tiling a Rectangle with the Fewest Squares",
      "problem_id": "1361",
      "frontend_id": "1240",
      "difficulty": "Hard",
      "problem_slug": "tiling-a-rectangle-with-the-fewest-squares",
      "topics": [
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Swaps to Make Strings Equal",
      "problem_id": "1369",
      "frontend_id": "1247",
      "difficulty": "Medium",
      "problem_slug": "minimum-swaps-to-make-strings-equal",
      "topics": [
        "Math",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Nice Subarrays",
      "problem_id": "1370",
      "frontend_id": "1248",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-nice-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Remove to Make Valid Parentheses",
      "problem_id": "1371",
      "frontend_id": "1249",
      "difficulty": "Medium",
      "problem_slug": "minimum-remove-to-make-valid-parentheses",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If It Is a Good Array",
      "problem_id": "1372",
      "frontend_id": "1250",
      "difficulty": "Hard",
      "problem_slug": "check-if-it-is-a-good-array",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Average Selling Price",
      "problem_id": "1390",
      "frontend_id": "1251",
      "difficulty": "Easy",
      "problem_slug": "average-selling-price",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Cells with Odd Values in a Matrix",
      "problem_id": "1378",
      "frontend_id": "1252",
      "difficulty": "Easy",
      "problem_slug": "cells-with-odd-values-in-a-matrix",
      "topics": [
        "Array",
        "Math",
        "Simulation"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Reconstruct a 2-Row Binary Matrix",
      "problem_id": "1379",
      "frontend_id": "1253",
      "difficulty": "Medium",
      "problem_slug": "reconstruct-a-2-row-binary-matrix",
      "topics": [
        "Array",
        "Greedy",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Closed Islands",
      "problem_id": "1380",
      "frontend_id": "1254",
      "difficulty": "Medium",
      "problem_slug": "number-of-closed-islands",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score Words Formed by Letters",
      "problem_id": "1381",
      "frontend_id": "1255",
      "difficulty": "Hard",
      "problem_slug": "maximum-score-words-formed-by-letters",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shift 2D Grid",
      "problem_id": "1386",
      "frontend_id": "1260",
      "difficulty": "Easy",
      "problem_slug": "shift-2d-grid",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Elements in a Contaminated Binary Tree",
      "problem_id": "1387",
      "frontend_id": "1261",
      "difficulty": "Medium",
      "problem_slug": "find-elements-in-a-contaminated-binary-tree",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Design",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Greatest Sum Divisible by Three",
      "problem_id": "1388",
      "frontend_id": "1262",
      "difficulty": "Medium",
      "problem_slug": "greatest-sum-divisible-by-three",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Move a Box to Their Target Location",
      "problem_id": "1389",
      "frontend_id": "1263",
      "difficulty": "Hard",
      "problem_slug": "minimum-moves-to-move-a-box-to-their-target-location",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time Visiting All Points",
      "problem_id": "1395",
      "frontend_id": "1266",
      "difficulty": "Easy",
      "problem_slug": "minimum-time-visiting-all-points",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Servers that Communicate",
      "problem_id": "1396",
      "frontend_id": "1267",
      "difficulty": "Medium",
      "problem_slug": "count-servers-that-communicate",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Search Suggestions System",
      "problem_id": "1397",
      "frontend_id": "1268",
      "difficulty": "Medium",
      "problem_slug": "search-suggestions-system",
      "topics": [
        "Array",
        "String",
        "Binary Search",
        "Trie",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Stay in the Same Place After Some Steps",
      "problem_id": "1398",
      "frontend_id": "1269",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Winner on a Tic Tac Toe Game",
      "problem_id": "1400",
      "frontend_id": "1275",
      "difficulty": "Easy",
      "problem_slug": "find-winner-on-a-tic-tac-toe-game",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Burgers with No Waste of Ingredients",
      "problem_id": "1401",
      "frontend_id": "1276",
      "difficulty": "Medium",
      "problem_slug": "number-of-burgers-with-no-waste-of-ingredients",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Square Submatrices with All Ones",
      "problem_id": "1402",
      "frontend_id": "1277",
      "difficulty": "Medium",
      "problem_slug": "count-square-submatrices-with-all-ones",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindrome Partitioning III",
      "problem_id": "1403",
      "frontend_id": "1278",
      "difficulty": "Hard",
      "problem_slug": "palindrome-partitioning-iii",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Students and Examinations",
      "problem_id": "1415",
      "frontend_id": "1280",
      "difficulty": "Easy",
      "problem_slug": "students-and-examinations",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Subtract the Product and Sum of Digits of an Integer",
      "problem_id": "1406",
      "frontend_id": "1281",
      "difficulty": "Easy",
      "problem_slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Group the People Given the Group Size They Belong To",
      "problem_id": "1407",
      "frontend_id": "1282",
      "difficulty": "Medium",
      "problem_slug": "group-the-people-given-the-group-size-they-belong-to",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Smallest Divisor Given a Threshold",
      "problem_id": "1408",
      "frontend_id": "1283",
      "difficulty": "Medium",
      "problem_slug": "find-the-smallest-divisor-given-a-threshold",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
      "problem_id": "1409",
      "frontend_id": "1284",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Iterator for Combination",
      "problem_id": "1211",
      "frontend_id": "1286",
      "difficulty": "Medium",
      "problem_slug": "iterator-for-combination",
      "topics": [
        "String",
        "Backtracking",
        "Design",
        "Iterator"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Element Appearing More Than 25% In Sorted Array",
      "problem_id": "1221",
      "frontend_id": "1287",
      "difficulty": "Easy",
      "problem_slug": "element-appearing-more-than-25-in-sorted-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Covered Intervals",
      "problem_id": "1222",
      "frontend_id": "1288",
      "difficulty": "Medium",
      "problem_slug": "remove-covered-intervals",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Falling Path Sum II",
      "problem_id": "1224",
      "frontend_id": "1289",
      "difficulty": "Hard",
      "problem_slug": "minimum-falling-path-sum-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert Binary Number in a Linked List to Integer",
      "problem_id": "1411",
      "frontend_id": "1290",
      "difficulty": "Easy",
      "problem_slug": "convert-binary-number-in-a-linked-list-to-integer",
      "topics": [
        "Linked List",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sequential Digits",
      "problem_id": "1212",
      "frontend_id": "1291",
      "difficulty": "Medium",
      "problem_slug": "sequential-digits",
      "topics": [
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
      "problem_id": "1413",
      "frontend_id": "1292",
      "difficulty": "Medium",
      "problem_slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
      "topics": [
        "Array",
        "Binary Search",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Path in a Grid with Obstacles Elimination",
      "problem_id": "1414",
      "frontend_id": "1293",
      "difficulty": "Hard",
      "problem_slug": "shortest-path-in-a-grid-with-obstacles-elimination",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Numbers with Even Number of Digits",
      "problem_id": "1421",
      "frontend_id": "1295",
      "difficulty": "Easy",
      "problem_slug": "find-numbers-with-even-number-of-digits",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide Array in Sets of K Consecutive Numbers",
      "problem_id": "1422",
      "frontend_id": "1296",
      "difficulty": "Medium",
      "problem_slug": "divide-array-in-sets-of-k-consecutive-numbers",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Occurrences of a Substring",
      "problem_id": "1423",
      "frontend_id": "1297",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-occurrences-of-a-substring",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Candies You Can Get from Boxes",
      "problem_id": "1424",
      "frontend_id": "1298",
      "difficulty": "Hard",
      "problem_slug": "maximum-candies-you-can-get-from-boxes",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace Elements with Greatest Element on Right Side",
      "problem_id": "1231",
      "frontend_id": "1299",
      "difficulty": "Easy",
      "problem_slug": "replace-elements-with-greatest-element-on-right-side",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Mutated Array Closest to Target",
      "problem_id": "1232",
      "frontend_id": "1300",
      "difficulty": "Medium",
      "problem_slug": "sum-of-mutated-array-closest-to-target",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Paths with Max Score",
      "problem_id": "1234",
      "frontend_id": "1301",
      "difficulty": "Hard",
      "problem_slug": "number-of-paths-with-max-score",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Deepest Leaves Sum",
      "problem_id": "1254",
      "frontend_id": "1302",
      "difficulty": "Medium",
      "problem_slug": "deepest-leaves-sum",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find N Unique Integers Sum up to Zero",
      "problem_id": "1426",
      "frontend_id": "1304",
      "difficulty": "Easy",
      "problem_slug": "find-n-unique-integers-sum-up-to-zero",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "All Elements in Two Binary Search Trees",
      "problem_id": "1427",
      "frontend_id": "1305",
      "difficulty": "Medium",
      "problem_slug": "all-elements-in-two-binary-search-trees",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Sorting",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jump Game III",
      "problem_id": "1428",
      "frontend_id": "1306",
      "difficulty": "Medium",
      "problem_slug": "jump-game-iii",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Verbal Arithmetic Puzzle",
      "problem_id": "1429",
      "frontend_id": "1307",
      "difficulty": "Hard",
      "problem_slug": "verbal-arithmetic-puzzle",
      "topics": [
        "Array",
        "Math",
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decrypt String from Alphabet to Integer Mapping",
      "problem_id": "1434",
      "frontend_id": "1309",
      "difficulty": "Easy",
      "problem_slug": "decrypt-string-from-alphabet-to-integer-mapping",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "XOR Queries of a Subarray",
      "problem_id": "1435",
      "frontend_id": "1310",
      "difficulty": "Medium",
      "problem_slug": "xor-queries-of-a-subarray",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Get Watched Videos by Your Friends",
      "problem_id": "1436",
      "frontend_id": "1311",
      "difficulty": "Medium",
      "problem_slug": "get-watched-videos-by-your-friends",
      "topics": [
        "Array",
        "Hash Table",
        "Breadth-First Search",
        "Graph",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Insertion Steps to Make a String Palindrome",
      "problem_id": "1437",
      "frontend_id": "1312",
      "difficulty": "Hard",
      "problem_slug": "minimum-insertion-steps-to-make-a-string-palindrome",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decompress Run-Length Encoded List",
      "problem_id": "1241",
      "frontend_id": "1313",
      "difficulty": "Easy",
      "problem_slug": "decompress-run-length-encoded-list",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Matrix Block Sum",
      "problem_id": "1242",
      "frontend_id": "1314",
      "difficulty": "Medium",
      "problem_slug": "matrix-block-sum",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Nodes with Even-Valued Grandparent",
      "problem_id": "1243",
      "frontend_id": "1315",
      "difficulty": "Medium",
      "problem_slug": "sum-of-nodes-with-even-valued-grandparent",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distinct Echo Substrings",
      "problem_id": "1244",
      "frontend_id": "1316",
      "difficulty": "Hard",
      "problem_slug": "distinct-echo-substrings",
      "topics": [
        "String",
        "Trie",
        "Rolling Hash",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert Integer to the Sum of Two No-Zero Integers",
      "problem_id": "1440",
      "frontend_id": "1317",
      "difficulty": "Easy",
      "problem_slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Flips to Make a OR b Equal to c",
      "problem_id": "1441",
      "frontend_id": "1318",
      "difficulty": "Medium",
      "problem_slug": "minimum-flips-to-make-a-or-b-equal-to-c",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Number of Operations to Make Network Connected",
      "problem_id": "1442",
      "frontend_id": "1319",
      "difficulty": "Medium",
      "problem_slug": "number-of-operations-to-make-network-connected",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Distance to Type a Word Using Two Fingers",
      "problem_id": "1443",
      "frontend_id": "1320",
      "difficulty": "Hard",
      "problem_slug": "minimum-distance-to-type-a-word-using-two-fingers",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Restaurant Growth",
      "problem_id": "1452",
      "frontend_id": "1321",
      "difficulty": "Medium",
      "problem_slug": "restaurant-growth",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximum 69 Number",
      "problem_id": "1448",
      "frontend_id": "1323",
      "difficulty": "Easy",
      "problem_slug": "maximum-69-number",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Print Words Vertically",
      "problem_id": "1449",
      "frontend_id": "1324",
      "difficulty": "Medium",
      "problem_slug": "print-words-vertically",
      "topics": [
        "Array",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Delete Leaves With a Given Value",
      "problem_id": "1450",
      "frontend_id": "1325",
      "difficulty": "Medium",
      "problem_slug": "delete-leaves-with-a-given-value",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "problem_id": "1451",
      "frontend_id": "1326",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "List the Products Ordered in a Period",
      "problem_id": "1462",
      "frontend_id": "1327",
      "difficulty": "Easy",
      "problem_slug": "list-the-products-ordered-in-a-period",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Break a Palindrome",
      "problem_id": "1252",
      "frontend_id": "1328",
      "difficulty": "Medium",
      "problem_slug": "break-a-palindrome",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort the Matrix Diagonally",
      "problem_id": "1253",
      "frontend_id": "1329",
      "difficulty": "Medium",
      "problem_slug": "sort-the-matrix-diagonally",
      "topics": [
        "Array",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Subarray To Maximize Array Value",
      "problem_id": "1255",
      "frontend_id": "1330",
      "difficulty": "Hard",
      "problem_slug": "reverse-subarray-to-maximize-array-value",
      "topics": [
        "Array",
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rank Transform of an Array",
      "problem_id": "1256",
      "frontend_id": "1331",
      "difficulty": "Easy",
      "problem_slug": "rank-transform-of-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Palindromic Subsequences",
      "problem_id": "1454",
      "frontend_id": "1332",
      "difficulty": "Easy",
      "problem_slug": "remove-palindromic-subsequences",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
      "problem_id": "1455",
      "frontend_id": "1333",
      "difficulty": "Medium",
      "problem_slug": "filter-restaurants-by-vegan-friendly-price-and-distance",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
      "problem_id": "1456",
      "frontend_id": "1334",
      "difficulty": "Medium",
      "problem_slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
      "topics": [
        "Dynamic Programming",
        "Graph",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Difficulty of a Job Schedule",
      "problem_id": "1457",
      "frontend_id": "1335",
      "difficulty": "Hard",
      "problem_slug": "minimum-difficulty-of-a-job-schedule",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The K Weakest Rows in a Matrix",
      "problem_id": "1463",
      "frontend_id": "1337",
      "difficulty": "Easy",
      "problem_slug": "the-k-weakest-rows-in-a-matrix",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reduce Array Size to The Half",
      "problem_id": "1464",
      "frontend_id": "1338",
      "difficulty": "Medium",
      "problem_slug": "reduce-array-size-to-the-half",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of Splitted Binary Tree",
      "problem_id": "1465",
      "frontend_id": "1339",
      "difficulty": "Medium",
      "problem_slug": "maximum-product-of-splitted-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jump Game V",
      "problem_id": "1466",
      "frontend_id": "1340",
      "difficulty": "Hard",
      "problem_slug": "jump-game-v",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Movie Rating",
      "problem_id": "1480",
      "frontend_id": "1341",
      "difficulty": "Medium",
      "problem_slug": "movie-rating",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Number of Steps to Reduce a Number to Zero",
      "problem_id": "1444",
      "frontend_id": "1342",
      "difficulty": "Easy",
      "problem_slug": "number-of-steps-to-reduce-a-number-to-zero",
      "topics": [
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
      "problem_id": "1445",
      "frontend_id": "1343",
      "difficulty": "Medium",
      "problem_slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Angle Between Hands of a Clock",
      "problem_id": "1446",
      "frontend_id": "1344",
      "difficulty": "Medium",
      "problem_slug": "angle-between-hands-of-a-clock",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jump Game IV",
      "problem_id": "1447",
      "frontend_id": "1345",
      "difficulty": "Hard",
      "problem_slug": "jump-game-iv",
      "topics": [
        "Array",
        "Hash Table",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If N and Its Double Exist",
      "problem_id": "1468",
      "frontend_id": "1346",
      "difficulty": "Easy",
      "problem_slug": "check-if-n-and-its-double-exist",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Steps to Make Two Strings Anagram",
      "problem_id": "1469",
      "frontend_id": "1347",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-steps-to-make-two-strings-anagram",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Tweet Counts Per Frequency",
      "problem_id": "1470",
      "frontend_id": "1348",
      "difficulty": "Medium",
      "problem_slug": "tweet-counts-per-frequency",
      "topics": [
        "Hash Table",
        "Binary Search",
        "Design",
        "Sorting",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Students Taking Exam",
      "problem_id": "1471",
      "frontend_id": "1349",
      "difficulty": "Hard",
      "problem_slug": "maximum-students-taking-exam",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Matrix",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Negative Numbers in a Sorted Matrix",
      "problem_id": "1476",
      "frontend_id": "1351",
      "difficulty": "Easy",
      "problem_slug": "count-negative-numbers-in-a-sorted-matrix",
      "topics": [
        "Array",
        "Binary Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Product of the Last K Numbers",
      "problem_id": "1477",
      "frontend_id": "1352",
      "difficulty": "Medium",
      "problem_slug": "product-of-the-last-k-numbers",
      "topics": [
        "Array",
        "Math",
        "Design",
        "Data Stream",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Events That Can Be Attended",
      "problem_id": "1478",
      "frontend_id": "1353",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-events-that-can-be-attended",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Target Array With Multiple Sums",
      "problem_id": "1479",
      "frontend_id": "1354",
      "difficulty": "Hard",
      "problem_slug": "construct-target-array-with-multiple-sums",
      "topics": [
        "Array",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Integers by The Number of 1 Bits",
      "problem_id": "1458",
      "frontend_id": "1356",
      "difficulty": "Easy",
      "problem_slug": "sort-integers-by-the-number-of-1-bits",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Discount Every n Orders",
      "problem_id": "1459",
      "frontend_id": "1357",
      "difficulty": "Medium",
      "problem_slug": "apply-discount-every-n-orders",
      "topics": [
        "Array",
        "Hash Table",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Substrings Containing All Three Characters",
      "problem_id": "1460",
      "frontend_id": "1358",
      "difficulty": "Medium",
      "problem_slug": "number-of-substrings-containing-all-three-characters",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count All Valid Pickup and Delivery Options",
      "problem_id": "1461",
      "frontend_id": "1359",
      "difficulty": "Hard",
      "problem_slug": "count-all-valid-pickup-and-delivery-options",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Days Between Two Dates",
      "problem_id": "1274",
      "frontend_id": "1360",
      "difficulty": "Easy",
      "problem_slug": "number-of-days-between-two-dates",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Validate Binary Tree Nodes",
      "problem_id": "1275",
      "frontend_id": "1361",
      "difficulty": "Medium",
      "problem_slug": "validate-binary-tree-nodes",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Closest Divisors",
      "problem_id": "1276",
      "frontend_id": "1362",
      "difficulty": "Medium",
      "problem_slug": "closest-divisors",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Multiple of Three",
      "problem_id": "1277",
      "frontend_id": "1363",
      "difficulty": "Hard",
      "problem_slug": "largest-multiple-of-three",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "How Many Numbers Are Smaller Than the Current Number",
      "problem_id": "1482",
      "frontend_id": "1365",
      "difficulty": "Easy",
      "problem_slug": "how-many-numbers-are-smaller-than-the-current-number",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rank Teams by Votes",
      "problem_id": "1483",
      "frontend_id": "1366",
      "difficulty": "Medium",
      "problem_slug": "rank-teams-by-votes",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Linked List in Binary Tree",
      "problem_id": "1484",
      "frontend_id": "1367",
      "difficulty": "Medium",
      "problem_slug": "linked-list-in-binary-tree",
      "topics": [
        "Linked List",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
      "problem_id": "1485",
      "frontend_id": "1368",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Graph",
        "Heap (Priority Queue)",
        "Matrix",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Increasing Decreasing String",
      "problem_id": "1472",
      "frontend_id": "1370",
      "difficulty": "Easy",
      "problem_slug": "increasing-decreasing-string",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Longest Substring Containing Vowels in Even Counts",
      "problem_id": "1473",
      "frontend_id": "1371",
      "difficulty": "Medium",
      "problem_slug": "find-the-longest-substring-containing-vowels-in-even-counts",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest ZigZag Path in a Binary Tree",
      "problem_id": "1474",
      "frontend_id": "1372",
      "difficulty": "Medium",
      "problem_slug": "longest-zigzag-path-in-a-binary-tree",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum BST in Binary Tree",
      "problem_id": "1475",
      "frontend_id": "1373",
      "difficulty": "Hard",
      "problem_slug": "maximum-sum-bst-in-binary-tree",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Generate a String With Characters That Have Odd Counts",
      "problem_id": "1490",
      "frontend_id": "1374",
      "difficulty": "Easy",
      "problem_slug": "generate-a-string-with-characters-that-have-odd-counts",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Times Binary String Is Prefix-Aligned",
      "problem_id": "1491",
      "frontend_id": "1375",
      "difficulty": "Medium",
      "problem_slug": "number-of-times-binary-string-is-prefix-aligned",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Time Needed to Inform All Employees",
      "problem_id": "1492",
      "frontend_id": "1376",
      "difficulty": "Medium",
      "problem_slug": "time-needed-to-inform-all-employees",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Frog Position After T Seconds",
      "problem_id": "1493",
      "frontend_id": "1377",
      "difficulty": "Hard",
      "problem_slug": "frog-position-after-t-seconds",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace Employee ID With The Unique Identifier",
      "problem_id": "1509",
      "frontend_id": "1378",
      "difficulty": "Easy",
      "problem_slug": "replace-employee-id-with-the-unique-identifier",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
      "problem_id": "1498",
      "frontend_id": "1379",
      "difficulty": "Easy",
      "problem_slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": true,
      "code_snippets": 7
    },
    {
      "title": "Lucky Numbers in a Matrix",
      "problem_id": "1496",
      "frontend_id": "1380",
      "difficulty": "Easy",
      "problem_slug": "lucky-numbers-in-a-matrix",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design a Stack With Increment Operation",
      "problem_id": "1497",
      "frontend_id": "1381",
      "difficulty": "Medium",
      "problem_slug": "design-a-stack-with-increment-operation",
      "topics": [
        "Array",
        "Stack",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Balance a Binary Search Tree",
      "problem_id": "1285",
      "frontend_id": "1382",
      "difficulty": "Medium",
      "problem_slug": "balance-a-binary-search-tree",
      "topics": [
        "Divide and Conquer",
        "Greedy",
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Performance of a Team",
      "problem_id": "1499",
      "frontend_id": "1383",
      "difficulty": "Hard",
      "problem_slug": "maximum-performance-of-a-team",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Distance Value Between Two Arrays",
      "problem_id": "1486",
      "frontend_id": "1385",
      "difficulty": "Easy",
      "problem_slug": "find-the-distance-value-between-two-arrays",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cinema Seat Allocation",
      "problem_id": "1487",
      "frontend_id": "1386",
      "difficulty": "Medium",
      "problem_slug": "cinema-seat-allocation",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Integers by The Power Value",
      "problem_id": "1488",
      "frontend_id": "1387",
      "difficulty": "Medium",
      "problem_slug": "sort-integers-by-the-power-value",
      "topics": [
        "Dynamic Programming",
        "Memoization",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pizza With 3n Slices",
      "problem_id": "1489",
      "frontend_id": "1388",
      "difficulty": "Hard",
      "problem_slug": "pizza-with-3n-slices",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Create Target Array in the Given Order",
      "problem_id": "1505",
      "frontend_id": "1389",
      "difficulty": "Easy",
      "problem_slug": "create-target-array-in-the-given-order",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Four Divisors",
      "problem_id": "1284",
      "frontend_id": "1390",
      "difficulty": "Medium",
      "problem_slug": "four-divisors",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if There is a Valid Path in a Grid",
      "problem_id": "1507",
      "frontend_id": "1391",
      "difficulty": "Medium",
      "problem_slug": "check-if-there-is-a-valid-path-in-a-grid",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Happy Prefix",
      "problem_id": "1508",
      "frontend_id": "1392",
      "difficulty": "Hard",
      "problem_slug": "longest-happy-prefix",
      "topics": [
        "String",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Capital Gain/Loss",
      "problem_id": "1523",
      "frontend_id": "1393",
      "difficulty": "Medium",
      "problem_slug": "capital-gainloss",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find Lucky Integer in an Array",
      "problem_id": "1510",
      "frontend_id": "1394",
      "difficulty": "Easy",
      "problem_slug": "find-lucky-integer-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Teams",
      "problem_id": "1511",
      "frontend_id": "1395",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-teams",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Underground System",
      "problem_id": "1512",
      "frontend_id": "1396",
      "difficulty": "Medium",
      "problem_slug": "design-underground-system",
      "topics": [
        "Hash Table",
        "String",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Good Strings",
      "problem_id": "1513",
      "frontend_id": "1397",
      "difficulty": "Hard",
      "problem_slug": "find-all-good-strings",
      "topics": [
        "String",
        "Dynamic Programming",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Largest Group",
      "problem_id": "1500",
      "frontend_id": "1399",
      "difficulty": "Easy",
      "problem_slug": "count-largest-group",
      "topics": [
        "Hash Table",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct K Palindrome Strings",
      "problem_id": "1502",
      "frontend_id": "1400",
      "difficulty": "Medium",
      "problem_slug": "construct-k-palindrome-strings",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Circle and Rectangle Overlapping",
      "problem_id": "1501",
      "frontend_id": "1401",
      "difficulty": "Medium",
      "problem_slug": "circle-and-rectangle-overlapping",
      "topics": [
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reducing Dishes",
      "problem_id": "1503",
      "frontend_id": "1402",
      "difficulty": "Hard",
      "problem_slug": "reducing-dishes",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Subsequence in Non-Increasing Order",
      "problem_id": "1519",
      "frontend_id": "1403",
      "difficulty": "Easy",
      "problem_slug": "minimum-subsequence-in-non-increasing-order",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Steps to Reduce a Number in Binary Representation to One",
      "problem_id": "1520",
      "frontend_id": "1404",
      "difficulty": "Medium",
      "problem_slug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
      "topics": [
        "String",
        "Bit Manipulation",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Happy String",
      "problem_id": "1304",
      "frontend_id": "1405",
      "difficulty": "Medium",
      "problem_slug": "longest-happy-string",
      "topics": [
        "String",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Game III",
      "problem_id": "1522",
      "frontend_id": "1406",
      "difficulty": "Hard",
      "problem_slug": "stone-game-iii",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Top Travellers",
      "problem_id": "1541",
      "frontend_id": "1407",
      "difficulty": "Easy",
      "problem_slug": "top-travellers",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "String Matching in an Array",
      "problem_id": "1524",
      "frontend_id": "1408",
      "difficulty": "Easy",
      "problem_slug": "string-matching-in-an-array",
      "topics": [
        "Array",
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Queries on a Permutation With Key",
      "problem_id": "1525",
      "frontend_id": "1409",
      "difficulty": "Medium",
      "problem_slug": "queries-on-a-permutation-with-key",
      "topics": [
        "Array",
        "Binary Indexed Tree",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "HTML Entity Parser",
      "problem_id": "1526",
      "frontend_id": "1410",
      "difficulty": "Medium",
      "problem_slug": "html-entity-parser",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Paint N × 3 Grid",
      "problem_id": "1527",
      "frontend_id": "1411",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-paint-n-3-grid",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Value to Get Positive Step by Step Sum",
      "problem_id": "1514",
      "frontend_id": "1413",
      "difficulty": "Easy",
      "problem_slug": "minimum-value-to-get-positive-step-by-step-sum",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
      "problem_id": "1515",
      "frontend_id": "1414",
      "difficulty": "Medium",
      "problem_slug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The k-th Lexicographical String of All Happy Strings of Length n",
      "problem_id": "1516",
      "frontend_id": "1415",
      "difficulty": "Medium",
      "problem_slug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
      "topics": [
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Restore The Array",
      "problem_id": "1517",
      "frontend_id": "1416",
      "difficulty": "Hard",
      "problem_slug": "restore-the-array",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reformat The String",
      "problem_id": "1532",
      "frontend_id": "1417",
      "difficulty": "Easy",
      "problem_slug": "reformat-the-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Display Table of Food Orders in a Restaurant",
      "problem_id": "1533",
      "frontend_id": "1418",
      "difficulty": "Medium",
      "problem_slug": "display-table-of-food-orders-in-a-restaurant",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Minimum Number of Frogs Croaking",
      "problem_id": "1534",
      "frontend_id": "1419",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-frogs-croaking",
      "topics": [
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
      "problem_id": "1535",
      "frontend_id": "1420",
      "difficulty": "Hard",
      "problem_slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
      "topics": [
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score After Splitting a String",
      "problem_id": "1537",
      "frontend_id": "1422",
      "difficulty": "Easy",
      "problem_slug": "maximum-score-after-splitting-a-string",
      "topics": [
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Points You Can Obtain from Cards",
      "problem_id": "1538",
      "frontend_id": "1423",
      "difficulty": "Medium",
      "problem_slug": "maximum-points-you-can-obtain-from-cards",
      "topics": [
        "Array",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Diagonal Traverse II",
      "problem_id": "1539",
      "frontend_id": "1424",
      "difficulty": "Medium",
      "problem_slug": "diagonal-traverse-ii",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Constrained Subsequence Sum",
      "problem_id": "1286",
      "frontend_id": "1425",
      "difficulty": "Hard",
      "problem_slug": "constrained-subsequence-sum",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Queue",
        "Sliding Window",
        "Heap (Priority Queue)",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kids With the Greatest Number of Candies",
      "problem_id": "1528",
      "frontend_id": "1431",
      "difficulty": "Easy",
      "problem_slug": "kids-with-the-greatest-number-of-candies",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Difference You Can Get From Changing an Integer",
      "problem_id": "1529",
      "frontend_id": "1432",
      "difficulty": "Medium",
      "problem_slug": "max-difference-you-can-get-from-changing-an-integer",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If a String Can Break Another String",
      "problem_id": "1530",
      "frontend_id": "1433",
      "difficulty": "Medium",
      "problem_slug": "check-if-a-string-can-break-another-string",
      "topics": [
        "String",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Wear Different Hats to Each Other",
      "problem_id": "1531",
      "frontend_id": "1434",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-wear-different-hats-to-each-other",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Destination City",
      "problem_id": "1547",
      "frontend_id": "1436",
      "difficulty": "Easy",
      "problem_slug": "destination-city",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If All 1's Are at Least Length K Places Away",
      "problem_id": "1548",
      "frontend_id": "1437",
      "difficulty": "Easy",
      "problem_slug": "check-if-all-1s-are-at-least-length-k-places-away",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
      "problem_id": "1549",
      "frontend_id": "1438",
      "difficulty": "Medium",
      "problem_slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
      "topics": [
        "Array",
        "Queue",
        "Sliding Window",
        "Heap (Priority Queue)",
        "Ordered Set",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
      "problem_id": "1550",
      "frontend_id": "1439",
      "difficulty": "Hard",
      "problem_slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
      "topics": [
        "Array",
        "Binary Search",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Build an Array With Stack Operations",
      "problem_id": "1552",
      "frontend_id": "1441",
      "difficulty": "Medium",
      "problem_slug": "build-an-array-with-stack-operations",
      "topics": [
        "Array",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
      "problem_id": "1553",
      "frontend_id": "1442",
      "difficulty": "Medium",
      "problem_slug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Collect All Apples in a Tree",
      "problem_id": "1554",
      "frontend_id": "1443",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-collect-all-apples-in-a-tree",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways of Cutting a Pizza",
      "problem_id": "1555",
      "frontend_id": "1444",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-of-cutting-a-pizza",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Memoization",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Consecutive Characters",
      "problem_id": "1542",
      "frontend_id": "1446",
      "difficulty": "Easy",
      "problem_slug": "consecutive-characters",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Simplified Fractions",
      "problem_id": "1543",
      "frontend_id": "1447",
      "difficulty": "Medium",
      "problem_slug": "simplified-fractions",
      "topics": [
        "Math",
        "String",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Good Nodes in Binary Tree",
      "problem_id": "1544",
      "frontend_id": "1448",
      "difficulty": "Medium",
      "problem_slug": "count-good-nodes-in-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Form Largest Integer With Digits That Add up to Target",
      "problem_id": "1545",
      "frontend_id": "1449",
      "difficulty": "Hard",
      "problem_slug": "form-largest-integer-with-digits-that-add-up-to-target",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Students Doing Homework at a Given Time",
      "problem_id": "1560",
      "frontend_id": "1450",
      "difficulty": "Easy",
      "problem_slug": "number-of-students-doing-homework-at-a-given-time",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearrange Words in a Sentence",
      "problem_id": "1561",
      "frontend_id": "1451",
      "difficulty": "Medium",
      "problem_slug": "rearrange-words-in-a-sentence",
      "topics": [
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
      "problem_id": "1562",
      "frontend_id": "1452",
      "difficulty": "Medium",
      "problem_slug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Darts Inside of a Circular Dartboard",
      "problem_id": "1563",
      "frontend_id": "1453",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
      "problem_id": "1566",
      "frontend_id": "1455",
      "difficulty": "Easy",
      "problem_slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
      "topics": [
        "Two Pointers",
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Vowels in a Substring of Given Length",
      "problem_id": "1567",
      "frontend_id": "1456",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-vowels-in-a-substring-of-given-length",
      "topics": [
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pseudo-Palindromic Paths in a Binary Tree",
      "problem_id": "1568",
      "frontend_id": "1457",
      "difficulty": "Medium",
      "problem_slug": "pseudo-palindromic-paths-in-a-binary-tree",
      "topics": [
        "Bit Manipulation",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Dot Product of Two Subsequences",
      "problem_id": "1569",
      "frontend_id": "1458",
      "difficulty": "Hard",
      "problem_slug": "max-dot-product-of-two-subsequences",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Two Arrays Equal by Reversing Subarrays",
      "problem_id": "1556",
      "frontend_id": "1460",
      "difficulty": "Easy",
      "problem_slug": "make-two-arrays-equal-by-reversing-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If a String Contains All Binary Codes of Size K",
      "problem_id": "1557",
      "frontend_id": "1461",
      "difficulty": "Medium",
      "problem_slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Rolling Hash",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Course Schedule IV",
      "problem_id": "1558",
      "frontend_id": "1462",
      "difficulty": "Medium",
      "problem_slug": "course-schedule-iv",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cherry Pickup II",
      "problem_id": "1559",
      "frontend_id": "1463",
      "difficulty": "Hard",
      "problem_slug": "cherry-pickup-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of Two Elements in an Array",
      "problem_id": "1574",
      "frontend_id": "1464",
      "difficulty": "Easy",
      "problem_slug": "maximum-product-of-two-elements-in-an-array",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
      "problem_id": "1575",
      "frontend_id": "1465",
      "difficulty": "Medium",
      "problem_slug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reorder Routes to Make All Paths Lead to the City Zero",
      "problem_id": "1576",
      "frontend_id": "1466",
      "difficulty": "Medium",
      "problem_slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
      "problem_id": "1577",
      "frontend_id": "1467",
      "difficulty": "Hard",
      "problem_slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Backtracking",
        "Combinatorics",
        "Probability and Statistics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shuffle the Array",
      "problem_id": "1580",
      "frontend_id": "1470",
      "difficulty": "Easy",
      "problem_slug": "shuffle-the-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "The k Strongest Values in an Array",
      "problem_id": "1581",
      "frontend_id": "1471",
      "difficulty": "Medium",
      "problem_slug": "the-k-strongest-values-in-an-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Browser History",
      "problem_id": "1582",
      "frontend_id": "1472",
      "difficulty": "Medium",
      "problem_slug": "design-browser-history",
      "topics": [
        "Array",
        "Linked List",
        "Stack",
        "Design",
        "Doubly-Linked List",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Paint House III",
      "problem_id": "1583",
      "frontend_id": "1473",
      "difficulty": "Hard",
      "problem_slug": "paint-house-iii",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Final Prices With a Special Discount in a Shop",
      "problem_id": "1570",
      "frontend_id": "1475",
      "difficulty": "Easy",
      "problem_slug": "final-prices-with-a-special-discount-in-a-shop",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subrectangle Queries",
      "problem_id": "1572",
      "frontend_id": "1476",
      "difficulty": "Medium",
      "problem_slug": "subrectangle-queries",
      "topics": [
        "Array",
        "Design",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
      "problem_id": "1573",
      "frontend_id": "1477",
      "difficulty": "Medium",
      "problem_slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Dynamic Programming",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Allocate Mailboxes",
      "problem_id": "1571",
      "frontend_id": "1478",
      "difficulty": "Hard",
      "problem_slug": "allocate-mailboxes",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Running Sum of 1d Array",
      "problem_id": "1603",
      "frontend_id": "1480",
      "difficulty": "Easy",
      "problem_slug": "running-sum-of-1d-array",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Least Number of Unique Integers after K Removals",
      "problem_id": "1604",
      "frontend_id": "1481",
      "difficulty": "Medium",
      "problem_slug": "least-number-of-unique-integers-after-k-removals",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Minimum Number of Days to Make m Bouquets",
      "problem_id": "1605",
      "frontend_id": "1482",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-days-to-make-m-bouquets",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Ancestor of a Tree Node",
      "problem_id": "1296",
      "frontend_id": "1483",
      "difficulty": "Hard",
      "problem_slug": "kth-ancestor-of-a-tree-node",
      "topics": [
        "Binary Search",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Group Sold Products By The Date",
      "problem_id": "1625",
      "frontend_id": "1484",
      "difficulty": "Easy",
      "problem_slug": "group-sold-products-by-the-date",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "XOR Operation in an Array",
      "problem_id": "1610",
      "frontend_id": "1486",
      "difficulty": "Easy",
      "problem_slug": "xor-operation-in-an-array",
      "topics": [
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Making File Names Unique",
      "problem_id": "1611",
      "frontend_id": "1487",
      "difficulty": "Medium",
      "problem_slug": "making-file-names-unique",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Avoid Flood in The City",
      "problem_id": "1612",
      "frontend_id": "1488",
      "difficulty": "Medium",
      "problem_slug": "avoid-flood-in-the-city",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
      "problem_id": "1613",
      "frontend_id": "1489",
      "difficulty": "Hard",
      "problem_slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
      "topics": [
        "Union Find",
        "Graph",
        "Sorting",
        "Minimum Spanning Tree",
        "Strongly Connected Component"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Average Salary Excluding the Minimum and Maximum Salary",
      "problem_id": "1584",
      "frontend_id": "1491",
      "difficulty": "Easy",
      "problem_slug": "average-salary-excluding-the-minimum-and-maximum-salary",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The kth Factor of n",
      "problem_id": "1585",
      "frontend_id": "1492",
      "difficulty": "Medium",
      "problem_slug": "the-kth-factor-of-n",
      "topics": [
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Subarray of 1's After Deleting One Element",
      "problem_id": "1586",
      "frontend_id": "1493",
      "difficulty": "Medium",
      "problem_slug": "longest-subarray-of-1s-after-deleting-one-element",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Parallel Courses II",
      "problem_id": "1587",
      "frontend_id": "1494",
      "difficulty": "Hard",
      "problem_slug": "parallel-courses-ii",
      "topics": [
        "Dynamic Programming",
        "Bit Manipulation",
        "Graph",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path Crossing",
      "problem_id": "1619",
      "frontend_id": "1496",
      "difficulty": "Easy",
      "problem_slug": "path-crossing",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If Array Pairs Are Divisible by k",
      "problem_id": "1620",
      "frontend_id": "1497",
      "difficulty": "Medium",
      "problem_slug": "check-if-array-pairs-are-divisible-by-k",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Subsequences That Satisfy the Given Sum Condition",
      "problem_id": "1621",
      "frontend_id": "1498",
      "difficulty": "Medium",
      "problem_slug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Value of Equation",
      "problem_id": "1622",
      "frontend_id": "1499",
      "difficulty": "Hard",
      "problem_slug": "max-value-of-equation",
      "topics": [
        "Array",
        "Queue",
        "Sliding Window",
        "Heap (Priority Queue)",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Can Make Arithmetic Progression From Sequence",
      "problem_id": "1626",
      "frontend_id": "1502",
      "difficulty": "Easy",
      "problem_slug": "can-make-arithmetic-progression-from-sequence",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "problem_id": "1627",
      "frontend_id": "1503",
      "difficulty": "Medium",
      "problem_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "topics": [
        "Array",
        "Brainteaser",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Submatrices With All Ones",
      "problem_id": "1628",
      "frontend_id": "1504",
      "difficulty": "Medium",
      "problem_slug": "count-submatrices-with-all-ones",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Matrix",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
      "problem_id": "1629",
      "frontend_id": "1505",
      "difficulty": "Hard",
      "problem_slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
      "topics": [
        "String",
        "Greedy",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reformat Date",
      "problem_id": "1283",
      "frontend_id": "1507",
      "difficulty": "Easy",
      "problem_slug": "reformat-date",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Range Sum of Sorted Subarray Sums",
      "problem_id": "1615",
      "frontend_id": "1508",
      "difficulty": "Medium",
      "problem_slug": "range-sum-of-sorted-subarray-sums",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
      "problem_id": "1616",
      "frontend_id": "1509",
      "difficulty": "Medium",
      "problem_slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Game IV",
      "problem_id": "1617",
      "frontend_id": "1510",
      "difficulty": "Hard",
      "problem_slug": "stone-game-iv",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Good Pairs",
      "problem_id": "1635",
      "frontend_id": "1512",
      "difficulty": "Easy",
      "problem_slug": "number-of-good-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Substrings With Only 1s",
      "problem_id": "1636",
      "frontend_id": "1513",
      "difficulty": "Medium",
      "problem_slug": "number-of-substrings-with-only-1s",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path with Maximum Probability",
      "problem_id": "1325",
      "frontend_id": "1514",
      "difficulty": "Medium",
      "problem_slug": "path-with-maximum-probability",
      "topics": [
        "Array",
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Position for a Service Centre",
      "problem_id": "1638",
      "frontend_id": "1515",
      "difficulty": "Hard",
      "problem_slug": "best-position-for-a-service-centre",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Randomized"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Users With Valid E-Mails",
      "problem_id": "1664",
      "frontend_id": "1517",
      "difficulty": "Easy",
      "problem_slug": "find-users-with-valid-e-mails",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Water Bottles",
      "problem_id": "1642",
      "frontend_id": "1518",
      "difficulty": "Easy",
      "problem_slug": "water-bottles",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Nodes in the Sub-Tree With the Same Label",
      "problem_id": "1643",
      "frontend_id": "1519",
      "difficulty": "Medium",
      "problem_slug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Non-Overlapping Substrings",
      "problem_id": "1644",
      "frontend_id": "1520",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-non-overlapping-substrings",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find a Value of a Mysterious Function Closest to Target",
      "problem_id": "1645",
      "frontend_id": "1521",
      "difficulty": "Hard",
      "problem_slug": "find-a-value-of-a-mysterious-function-closest-to-target",
      "topics": [
        "Array",
        "Binary Search",
        "Bit Manipulation",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Odd Numbers in an Interval Range",
      "problem_id": "1630",
      "frontend_id": "1523",
      "difficulty": "Easy",
      "problem_slug": "count-odd-numbers-in-an-interval-range",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Number of Sub-arrays With Odd Sum",
      "problem_id": "1631",
      "frontend_id": "1524",
      "difficulty": "Medium",
      "problem_slug": "number-of-sub-arrays-with-odd-sum",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Good Ways to Split a String",
      "problem_id": "1632",
      "frontend_id": "1525",
      "difficulty": "Medium",
      "problem_slug": "number-of-good-ways-to-split-a-string",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
      "problem_id": "1633",
      "frontend_id": "1526",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Patients With a Condition",
      "problem_id": "1670",
      "frontend_id": "1527",
      "difficulty": "Easy",
      "problem_slug": "patients-with-a-condition",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Shuffle String",
      "problem_id": "1651",
      "frontend_id": "1528",
      "difficulty": "Easy",
      "problem_slug": "shuffle-string",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Suffix Flips",
      "problem_id": "1652",
      "frontend_id": "1529",
      "difficulty": "Medium",
      "problem_slug": "minimum-suffix-flips",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Good Leaf Nodes Pairs",
      "problem_id": "1653",
      "frontend_id": "1530",
      "difficulty": "Medium",
      "problem_slug": "number-of-good-leaf-nodes-pairs",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "String Compression II",
      "problem_id": "1637",
      "frontend_id": "1531",
      "difficulty": "Hard",
      "problem_slug": "string-compression-ii",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Good Triplets",
      "problem_id": "1656",
      "frontend_id": "1534",
      "difficulty": "Easy",
      "problem_slug": "count-good-triplets",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Find the Winner of an Array Game",
      "problem_id": "1657",
      "frontend_id": "1535",
      "difficulty": "Medium",
      "problem_slug": "find-the-winner-of-an-array-game",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Swaps to Arrange a Binary Grid",
      "problem_id": "1658",
      "frontend_id": "1536",
      "difficulty": "Medium",
      "problem_slug": "minimum-swaps-to-arrange-a-binary-grid",
      "topics": [
        "Array",
        "Greedy",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Get the Maximum Score",
      "problem_id": "1659",
      "frontend_id": "1537",
      "difficulty": "Hard",
      "problem_slug": "get-the-maximum-score",
      "topics": [
        "Array",
        "Two Pointers",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Missing Positive Number",
      "problem_id": "1646",
      "frontend_id": "1539",
      "difficulty": "Easy",
      "problem_slug": "kth-missing-positive-number",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Can Convert String in K Moves",
      "problem_id": "1647",
      "frontend_id": "1540",
      "difficulty": "Medium",
      "problem_slug": "can-convert-string-in-k-moves",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Insertions to Balance a Parentheses String",
      "problem_id": "1648",
      "frontend_id": "1541",
      "difficulty": "Medium",
      "problem_slug": "minimum-insertions-to-balance-a-parentheses-string",
      "topics": [
        "String",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Longest Awesome Substring",
      "problem_id": "1668",
      "frontend_id": "1542",
      "difficulty": "Hard",
      "problem_slug": "find-longest-awesome-substring",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make The String Great",
      "problem_id": "1666",
      "frontend_id": "1544",
      "difficulty": "Easy",
      "problem_slug": "make-the-string-great",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Kth Bit in Nth Binary String",
      "problem_id": "1667",
      "frontend_id": "1545",
      "difficulty": "Medium",
      "problem_slug": "find-kth-bit-in-nth-binary-string",
      "topics": [
        "String",
        "Recursion",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
      "problem_id": "1649",
      "frontend_id": "1546",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Cut a Stick",
      "problem_id": "1669",
      "frontend_id": "1547",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-cut-a-stick",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Three Consecutive Odds",
      "problem_id": "1293",
      "frontend_id": "1550",
      "difficulty": "Easy",
      "problem_slug": "three-consecutive-odds",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Array Equal",
      "problem_id": "1674",
      "frontend_id": "1551",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-array-equal",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Magnetic Force Between Two Balls",
      "problem_id": "1675",
      "frontend_id": "1552",
      "difficulty": "Medium",
      "problem_slug": "magnetic-force-between-two-balls",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Days to Eat N Oranges",
      "problem_id": "1676",
      "frontend_id": "1553",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-days-to-eat-n-oranges",
      "topics": [
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Thousand Separator",
      "problem_id": "1660",
      "frontend_id": "1556",
      "difficulty": "Easy",
      "problem_slug": "thousand-separator",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Vertices to Reach All Nodes",
      "problem_id": "1661",
      "frontend_id": "1557",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-vertices-to-reach-all-nodes",
      "topics": [
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Numbers of Function Calls to Make Target Array",
      "problem_id": "1662",
      "frontend_id": "1558",
      "difficulty": "Medium",
      "problem_slug": "minimum-numbers-of-function-calls-to-make-target-array",
      "topics": [
        "Array",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Detect Cycles in 2D Grid",
      "problem_id": "1663",
      "frontend_id": "1559",
      "difficulty": "Medium",
      "problem_slug": "detect-cycles-in-2d-grid",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Visited Sector in  a Circular Track",
      "problem_id": "1682",
      "frontend_id": "1560",
      "difficulty": "Easy",
      "problem_slug": "most-visited-sector-in-a-circular-track",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Coins You Can Get",
      "problem_id": "1683",
      "frontend_id": "1561",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-coins-you-can-get",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Sorting",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Latest Group of Size M",
      "problem_id": "1684",
      "frontend_id": "1562",
      "difficulty": "Medium",
      "problem_slug": "find-latest-group-of-size-m",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Game V",
      "problem_id": "1685",
      "frontend_id": "1563",
      "difficulty": "Hard",
      "problem_slug": "stone-game-v",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Detect Pattern of Length M Repeated K or More Times",
      "problem_id": "1689",
      "frontend_id": "1566",
      "difficulty": "Easy",
      "problem_slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Length of Subarray With Positive Product",
      "problem_id": "1690",
      "frontend_id": "1567",
      "difficulty": "Medium",
      "problem_slug": "maximum-length-of-subarray-with-positive-product",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Days to Disconnect Island",
      "problem_id": "1691",
      "frontend_id": "1568",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-days-to-disconnect-island",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix",
        "Strongly Connected Component"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Reorder Array to Get Same BST",
      "problem_id": "1692",
      "frontend_id": "1569",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-reorder-array-to-get-same-bst",
      "topics": [
        "Array",
        "Math",
        "Divide and Conquer",
        "Dynamic Programming",
        "Tree",
        "Union Find",
        "Binary Search Tree",
        "Memoization",
        "Combinatorics",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Matrix Diagonal Sum",
      "problem_id": "1677",
      "frontend_id": "1572",
      "difficulty": "Easy",
      "problem_slug": "matrix-diagonal-sum",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Split a String",
      "problem_id": "1678",
      "frontend_id": "1573",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-to-split-a-string",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Subarray to be Removed to Make Array Sorted",
      "problem_id": "1679",
      "frontend_id": "1574",
      "difficulty": "Medium",
      "problem_slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count All Possible Routes",
      "problem_id": "1680",
      "frontend_id": "1575",
      "difficulty": "Hard",
      "problem_slug": "count-all-possible-routes",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
      "problem_id": "1698",
      "frontend_id": "1576",
      "difficulty": "Easy",
      "problem_slug": "replace-all-s-to-avoid-consecutive-repeating-characters",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
      "problem_id": "1699",
      "frontend_id": "1577",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Make Rope Colorful",
      "problem_id": "1700",
      "frontend_id": "1578",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-make-rope-colorful",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
      "problem_id": "1701",
      "frontend_id": "1579",
      "difficulty": "Hard",
      "problem_slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
      "topics": [
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Customer Who Visited but Did Not Make Any Transactions",
      "problem_id": "1724",
      "frontend_id": "1581",
      "difficulty": "Easy",
      "problem_slug": "customer-who-visited-but-did-not-make-any-transactions",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Special Positions in a Binary Matrix",
      "problem_id": "1704",
      "frontend_id": "1582",
      "difficulty": "Easy",
      "problem_slug": "special-positions-in-a-binary-matrix",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Unhappy Friends",
      "problem_id": "1705",
      "frontend_id": "1583",
      "difficulty": "Medium",
      "problem_slug": "count-unhappy-friends",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Min Cost to Connect All Points",
      "problem_id": "1706",
      "frontend_id": "1584",
      "difficulty": "Medium",
      "problem_slug": "min-cost-to-connect-all-points",
      "topics": [
        "Array",
        "Union Find",
        "Graph",
        "Minimum Spanning Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If String Is Transformable With Substring Sort Operations",
      "problem_id": "1707",
      "frontend_id": "1585",
      "difficulty": "Hard",
      "problem_slug": "check-if-string-is-transformable-with-substring-sort-operations",
      "topics": [
        "String",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bank Account Summary II",
      "problem_id": "1734",
      "frontend_id": "1587",
      "difficulty": "Easy",
      "problem_slug": "bank-account-summary-ii",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Sum of All Odd Length Subarrays",
      "problem_id": "1693",
      "frontend_id": "1588",
      "difficulty": "Easy",
      "problem_slug": "sum-of-all-odd-length-subarrays",
      "topics": [
        "Array",
        "Math",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum Obtained of Any Permutation",
      "problem_id": "1695",
      "frontend_id": "1589",
      "difficulty": "Medium",
      "problem_slug": "maximum-sum-obtained-of-any-permutation",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Sum Divisible by P",
      "problem_id": "1694",
      "frontend_id": "1590",
      "difficulty": "Medium",
      "problem_slug": "make-sum-divisible-by-p",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Strange Printer II",
      "problem_id": "1696",
      "frontend_id": "1591",
      "difficulty": "Hard",
      "problem_slug": "strange-printer-ii",
      "topics": [
        "Array",
        "Graph",
        "Topological Sort",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearrange Spaces Between Words",
      "problem_id": "1714",
      "frontend_id": "1592",
      "difficulty": "Easy",
      "problem_slug": "rearrange-spaces-between-words",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split a String Into the Max Number of Unique Substrings",
      "problem_id": "1715",
      "frontend_id": "1593",
      "difficulty": "Medium",
      "problem_slug": "split-a-string-into-the-max-number-of-unique-substrings",
      "topics": [
        "Hash Table",
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Non Negative Product in a Matrix",
      "problem_id": "1716",
      "frontend_id": "1594",
      "difficulty": "Medium",
      "problem_slug": "maximum-non-negative-product-in-a-matrix",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Connect Two Groups of Points",
      "problem_id": "1717",
      "frontend_id": "1595",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-connect-two-groups-of-points",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Matrix",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Crawler Log Folder",
      "problem_id": "1720",
      "frontend_id": "1598",
      "difficulty": "Easy",
      "problem_slug": "crawler-log-folder",
      "topics": [
        "Array",
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Profit of Operating a Centennial Wheel",
      "problem_id": "1721",
      "frontend_id": "1599",
      "difficulty": "Medium",
      "problem_slug": "maximum-profit-of-operating-a-centennial-wheel",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Throne Inheritance",
      "problem_id": "1722",
      "frontend_id": "1600",
      "difficulty": "Medium",
      "problem_slug": "throne-inheritance",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Achievable Transfer Requests",
      "problem_id": "1723",
      "frontend_id": "1601",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-achievable-transfer-requests",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Parking System",
      "problem_id": "1708",
      "frontend_id": "1603",
      "difficulty": "Easy",
      "problem_slug": "design-parking-system",
      "topics": [
        "Design",
        "Simulation",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
      "problem_id": "1709",
      "frontend_id": "1604",
      "difficulty": "Medium",
      "problem_slug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Valid Matrix Given Row and Column Sums",
      "problem_id": "1711",
      "frontend_id": "1605",
      "difficulty": "Medium",
      "problem_slug": "find-valid-matrix-given-row-and-column-sums",
      "topics": [
        "Array",
        "Greedy",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Servers That Handled Most Number of Requests",
      "problem_id": "1710",
      "frontend_id": "1606",
      "difficulty": "Hard",
      "problem_slug": "find-servers-that-handled-most-number-of-requests",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Special Array With X Elements Greater Than or Equal X",
      "problem_id": "1730",
      "frontend_id": "1608",
      "difficulty": "Easy",
      "problem_slug": "special-array-with-x-elements-greater-than-or-equal-x",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Even Odd Tree",
      "problem_id": "1731",
      "frontend_id": "1609",
      "difficulty": "Medium",
      "problem_slug": "even-odd-tree",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Visible Points",
      "problem_id": "1733",
      "frontend_id": "1610",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-visible-points",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Sliding Window",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum One Bit Operations to Make Integers Zero",
      "problem_id": "1732",
      "frontend_id": "1611",
      "difficulty": "Hard",
      "problem_slug": "minimum-one-bit-operations-to-make-integers-zero",
      "topics": [
        "Dynamic Programming",
        "Bit Manipulation",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Nesting Depth of the Parentheses",
      "problem_id": "1737",
      "frontend_id": "1614",
      "difficulty": "Easy",
      "problem_slug": "maximum-nesting-depth-of-the-parentheses",
      "topics": [
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximal Network Rank",
      "problem_id": "1738",
      "frontend_id": "1615",
      "difficulty": "Medium",
      "problem_slug": "maximal-network-rank",
      "topics": [
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Two Strings to Make Palindrome",
      "problem_id": "1739",
      "frontend_id": "1616",
      "difficulty": "Medium",
      "problem_slug": "split-two-strings-to-make-palindrome",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Subtrees With Max Distance Between Cities",
      "problem_id": "1740",
      "frontend_id": "1617",
      "difficulty": "Hard",
      "problem_slug": "count-subtrees-with-max-distance-between-cities",
      "topics": [
        "Dynamic Programming",
        "Bit Manipulation",
        "Tree",
        "Enumeration",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Mean of Array After Removing Some Elements",
      "problem_id": "1210",
      "frontend_id": "1619",
      "difficulty": "Easy",
      "problem_slug": "mean-of-array-after-removing-some-elements",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Coordinate With Maximum Network Quality",
      "problem_id": "1726",
      "frontend_id": "1620",
      "difficulty": "Medium",
      "problem_slug": "coordinate-with-maximum-network-quality",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Sets of K Non-Overlapping Line Segments",
      "problem_id": "1725",
      "frontend_id": "1621",
      "difficulty": "Medium",
      "problem_slug": "number-of-sets-of-k-non-overlapping-line-segments",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fancy Sequence",
      "problem_id": "1728",
      "frontend_id": "1622",
      "difficulty": "Hard",
      "problem_slug": "fancy-sequence",
      "topics": [
        "Math",
        "Design",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Substring Between Two Equal Characters",
      "problem_id": "1746",
      "frontend_id": "1624",
      "difficulty": "Easy",
      "problem_slug": "largest-substring-between-two-equal-characters",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest String After Applying Operations",
      "problem_id": "1747",
      "frontend_id": "1625",
      "difficulty": "Medium",
      "problem_slug": "lexicographically-smallest-string-after-applying-operations",
      "topics": [
        "String",
        "Depth-First Search",
        "Breadth-First Search",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Team With No Conflicts",
      "problem_id": "1748",
      "frontend_id": "1626",
      "difficulty": "Medium",
      "problem_slug": "best-team-with-no-conflicts",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Graph Connectivity With Threshold",
      "problem_id": "1223",
      "frontend_id": "1627",
      "difficulty": "Hard",
      "problem_slug": "graph-connectivity-with-threshold",
      "topics": [
        "Array",
        "Math",
        "Union Find",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Slowest Key",
      "problem_id": "1751",
      "frontend_id": "1629",
      "difficulty": "Easy",
      "problem_slug": "slowest-key",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Arithmetic Subarrays",
      "problem_id": "1752",
      "frontend_id": "1630",
      "difficulty": "Medium",
      "problem_slug": "arithmetic-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path With Minimum Effort",
      "problem_id": "1753",
      "frontend_id": "1631",
      "difficulty": "Medium",
      "problem_slug": "path-with-minimum-effort",
      "topics": [
        "Array",
        "Binary Search",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rank Transform of a Matrix",
      "problem_id": "1257",
      "frontend_id": "1632",
      "difficulty": "Hard",
      "problem_slug": "rank-transform-of-a-matrix",
      "topics": [
        "Array",
        "Union Find",
        "Graph",
        "Topological Sort",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Percentage of Users Attended a Contest",
      "problem_id": "1773",
      "frontend_id": "1633",
      "difficulty": "Easy",
      "problem_slug": "percentage-of-users-attended-a-contest",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Sort Array by Increasing Frequency",
      "problem_id": "1741",
      "frontend_id": "1636",
      "difficulty": "Easy",
      "problem_slug": "sort-array-by-increasing-frequency",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Widest Vertical Area Between Two Points Containing No Points",
      "problem_id": "1742",
      "frontend_id": "1637",
      "difficulty": "Easy",
      "problem_slug": "widest-vertical-area-between-two-points-containing-no-points",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings That Differ by One Character",
      "problem_id": "1743",
      "frontend_id": "1638",
      "difficulty": "Medium",
      "problem_slug": "count-substrings-that-differ-by-one-character",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Form a Target String Given a Dictionary",
      "problem_id": "1744",
      "frontend_id": "1639",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check Array Formation Through Concatenation",
      "problem_id": "1760",
      "frontend_id": "1640",
      "difficulty": "Easy",
      "problem_slug": "check-array-formation-through-concatenation",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Sorted Vowel Strings",
      "problem_id": "1761",
      "frontend_id": "1641",
      "difficulty": "Medium",
      "problem_slug": "count-sorted-vowel-strings",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Furthest Building You Can Reach",
      "problem_id": "1762",
      "frontend_id": "1642",
      "difficulty": "Medium",
      "problem_slug": "furthest-building-you-can-reach",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Smallest Instructions",
      "problem_id": "489",
      "frontend_id": "1643",
      "difficulty": "Hard",
      "problem_slug": "kth-smallest-instructions",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Get Maximum in Generated Array",
      "problem_id": "1769",
      "frontend_id": "1646",
      "difficulty": "Easy",
      "problem_slug": "get-maximum-in-generated-array",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Deletions to Make Character Frequencies Unique",
      "problem_id": "1770",
      "frontend_id": "1647",
      "difficulty": "Medium",
      "problem_slug": "minimum-deletions-to-make-character-frequencies-unique",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sell Diminishing-Valued Colored Balls",
      "problem_id": "1771",
      "frontend_id": "1648",
      "difficulty": "Medium",
      "problem_slug": "sell-diminishing-valued-colored-balls",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Create Sorted Array through Instructions",
      "problem_id": "1772",
      "frontend_id": "1649",
      "difficulty": "Hard",
      "problem_slug": "create-sorted-array-through-instructions",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Merge Sort",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Defuse the Bomb",
      "problem_id": "1755",
      "frontend_id": "1652",
      "difficulty": "Easy",
      "problem_slug": "defuse-the-bomb",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Deletions to Make String Balanced",
      "problem_id": "1756",
      "frontend_id": "1653",
      "difficulty": "Medium",
      "problem_slug": "minimum-deletions-to-make-string-balanced",
      "topics": [
        "String",
        "Dynamic Programming",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Jumps to Reach Home",
      "problem_id": "1757",
      "frontend_id": "1654",
      "difficulty": "Medium",
      "problem_slug": "minimum-jumps-to-reach-home",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Repeating Integers",
      "problem_id": "1758",
      "frontend_id": "1655",
      "difficulty": "Hard",
      "problem_slug": "distribute-repeating-integers",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design an Ordered Stream",
      "problem_id": "1775",
      "frontend_id": "1656",
      "difficulty": "Easy",
      "problem_slug": "design-an-ordered-stream",
      "topics": [
        "Array",
        "Hash Table",
        "Design",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Determine if Two Strings Are Close",
      "problem_id": "1777",
      "frontend_id": "1657",
      "difficulty": "Medium",
      "problem_slug": "determine-if-two-strings-are-close",
      "topics": [
        "Hash Table",
        "String",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Reduce X to Zero",
      "problem_id": "1776",
      "frontend_id": "1658",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-reduce-x-to-zero",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Grid Happiness",
      "problem_id": "1778",
      "frontend_id": "1659",
      "difficulty": "Hard",
      "problem_slug": "maximize-grid-happiness",
      "topics": [
        "Dynamic Programming",
        "Bit Manipulation",
        "Memoization",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Average Time of Process per Machine",
      "problem_id": "1801",
      "frontend_id": "1661",
      "difficulty": "Easy",
      "problem_slug": "average-time-of-process-per-machine",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Check If Two String Arrays are Equivalent",
      "problem_id": "1781",
      "frontend_id": "1662",
      "difficulty": "Easy",
      "problem_slug": "check-if-two-string-arrays-are-equivalent",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest String With A Given Numeric Value",
      "problem_id": "1782",
      "frontend_id": "1663",
      "difficulty": "Medium",
      "problem_slug": "smallest-string-with-a-given-numeric-value",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ways to Make a Fair Array",
      "problem_id": "1783",
      "frontend_id": "1664",
      "difficulty": "Medium",
      "problem_slug": "ways-to-make-a-fair-array",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Initial Energy to Finish Tasks",
      "problem_id": "1784",
      "frontend_id": "1665",
      "difficulty": "Hard",
      "problem_slug": "minimum-initial-energy-to-finish-tasks",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fix Names in a Table",
      "problem_id": "1811",
      "frontend_id": "1667",
      "difficulty": "Easy",
      "problem_slug": "fix-names-in-a-table",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximum Repeating Substring",
      "problem_id": "1764",
      "frontend_id": "1668",
      "difficulty": "Easy",
      "problem_slug": "maximum-repeating-substring",
      "topics": [
        "String",
        "Dynamic Programming",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge In Between Linked Lists",
      "problem_id": "1765",
      "frontend_id": "1669",
      "difficulty": "Medium",
      "problem_slug": "merge-in-between-linked-lists",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Design Front Middle Back Queue",
      "problem_id": "1767",
      "frontend_id": "1670",
      "difficulty": "Medium",
      "problem_slug": "design-front-middle-back-queue",
      "topics": [
        "Array",
        "Linked List",
        "Design",
        "Queue",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Removals to Make Mountain Array",
      "problem_id": "1766",
      "frontend_id": "1671",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-removals-to-make-mountain-array",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Richest Customer Wealth",
      "problem_id": "1791",
      "frontend_id": "1672",
      "difficulty": "Easy",
      "problem_slug": "richest-customer-wealth",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Most Competitive Subsequence",
      "problem_id": "1792",
      "frontend_id": "1673",
      "difficulty": "Medium",
      "problem_slug": "find-the-most-competitive-subsequence",
      "topics": [
        "Array",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Make Array Complementary",
      "problem_id": "1793",
      "frontend_id": "1674",
      "difficulty": "Medium",
      "problem_slug": "minimum-moves-to-make-array-complementary",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Deviation in Array",
      "problem_id": "1794",
      "frontend_id": "1675",
      "difficulty": "Hard",
      "problem_slug": "minimize-deviation-in-array",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Goal Parser Interpretation",
      "problem_id": "1797",
      "frontend_id": "1678",
      "difficulty": "Easy",
      "problem_slug": "goal-parser-interpretation",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Max Number of K-Sum Pairs",
      "problem_id": "1798",
      "frontend_id": "1679",
      "difficulty": "Medium",
      "problem_slug": "max-number-of-k-sum-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Concatenation of Consecutive Binary Numbers",
      "problem_id": "1800",
      "frontend_id": "1680",
      "difficulty": "Medium",
      "problem_slug": "concatenation-of-consecutive-binary-numbers",
      "topics": [
        "Math",
        "Bit Manipulation",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Minimum Incompatibility",
      "problem_id": "1799",
      "frontend_id": "1681",
      "difficulty": "Hard",
      "problem_slug": "minimum-incompatibility",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Invalid Tweets",
      "problem_id": "1827",
      "frontend_id": "1683",
      "difficulty": "Easy",
      "problem_slug": "invalid-tweets",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Count the Number of Consistent Strings",
      "problem_id": "1786",
      "frontend_id": "1684",
      "difficulty": "Easy",
      "problem_slug": "count-the-number-of-consistent-strings",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Sum of Absolute Differences in a Sorted Array",
      "problem_id": "1787",
      "frontend_id": "1685",
      "difficulty": "Medium",
      "problem_slug": "sum-of-absolute-differences-in-a-sorted-array",
      "topics": [
        "Array",
        "Math",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Stone Game VI",
      "problem_id": "1788",
      "frontend_id": "1686",
      "difficulty": "Medium",
      "problem_slug": "stone-game-vi",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delivering Boxes from Storage to Ports",
      "problem_id": "1789",
      "frontend_id": "1687",
      "difficulty": "Hard",
      "problem_slug": "delivering-boxes-from-storage-to-ports",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Segment Tree",
        "Queue",
        "Heap (Priority Queue)",
        "Prefix Sum",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Matches in Tournament",
      "problem_id": "1806",
      "frontend_id": "1688",
      "difficulty": "Easy",
      "problem_slug": "count-of-matches-in-tournament",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
      "problem_id": "1807",
      "frontend_id": "1689",
      "difficulty": "Medium",
      "problem_slug": "partitioning-into-minimum-number-of-deci-binary-numbers",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Game VII",
      "problem_id": "1808",
      "frontend_id": "1690",
      "difficulty": "Medium",
      "problem_slug": "stone-game-vii",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Maximum Height by Stacking Cuboids ",
      "problem_id": "1367",
      "frontend_id": "1691",
      "difficulty": "Hard",
      "problem_slug": "maximum-height-by-stacking-cuboids",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Daily Leads and Partners",
      "problem_id": "1837",
      "frontend_id": "1693",
      "difficulty": "Easy",
      "problem_slug": "daily-leads-and-partners",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Reformat Phone Number",
      "problem_id": "1812",
      "frontend_id": "1694",
      "difficulty": "Easy",
      "problem_slug": "reformat-phone-number",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Erasure Value",
      "problem_id": "1813",
      "frontend_id": "1695",
      "difficulty": "Medium",
      "problem_slug": "maximum-erasure-value",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jump Game VI",
      "problem_id": "1814",
      "frontend_id": "1696",
      "difficulty": "Medium",
      "problem_slug": "jump-game-vi",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Queue",
        "Heap (Priority Queue)",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Checking Existence of Edge Length Limited Paths",
      "problem_id": "1815",
      "frontend_id": "1697",
      "difficulty": "Hard",
      "problem_slug": "checking-existence-of-edge-length-limited-paths",
      "topics": [
        "Array",
        "Two Pointers",
        "Union Find",
        "Graph",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Students Unable to Eat Lunch",
      "problem_id": "1802",
      "frontend_id": "1700",
      "difficulty": "Easy",
      "problem_slug": "number-of-students-unable-to-eat-lunch",
      "topics": [
        "Array",
        "Stack",
        "Queue",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Average Waiting Time",
      "problem_id": "1803",
      "frontend_id": "1701",
      "difficulty": "Medium",
      "problem_slug": "average-waiting-time",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Binary String After Change",
      "problem_id": "1804",
      "frontend_id": "1702",
      "difficulty": "Medium",
      "problem_slug": "maximum-binary-string-after-change",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Adjacent Swaps for K Consecutive Ones",
      "problem_id": "1805",
      "frontend_id": "1703",
      "difficulty": "Hard",
      "problem_slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
      "topics": [
        "Array",
        "Greedy",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Determine if String Halves Are Alike",
      "problem_id": "1823",
      "frontend_id": "1704",
      "difficulty": "Easy",
      "problem_slug": "determine-if-string-halves-are-alike",
      "topics": [
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Eaten Apples",
      "problem_id": "1824",
      "frontend_id": "1705",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-eaten-apples",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Where Will the Ball Fall",
      "problem_id": "1324",
      "frontend_id": "1706",
      "difficulty": "Medium",
      "problem_slug": "where-will-the-ball-fall",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum XOR With an Element From Array",
      "problem_id": "1826",
      "frontend_id": "1707",
      "difficulty": "Hard",
      "problem_slug": "maximum-xor-with-an-element-from-array",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Units on a Truck",
      "problem_id": "1829",
      "frontend_id": "1710",
      "difficulty": "Easy",
      "problem_slug": "maximum-units-on-a-truck",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Good Meals",
      "problem_id": "1830",
      "frontend_id": "1711",
      "difficulty": "Medium",
      "problem_slug": "count-good-meals",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ways to Split Array Into Three Subarrays",
      "problem_id": "1831",
      "frontend_id": "1712",
      "difficulty": "Medium",
      "problem_slug": "ways-to-split-array-into-three-subarrays",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make a Subsequence",
      "problem_id": "1832",
      "frontend_id": "1713",
      "difficulty": "Hard",
      "problem_slug": "minimum-operations-to-make-a-subsequence",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Calculate Money in Leetcode Bank",
      "problem_id": "1817",
      "frontend_id": "1716",
      "difficulty": "Easy",
      "problem_slug": "calculate-money-in-leetcode-bank",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score From Removing Substrings",
      "problem_id": "1818",
      "frontend_id": "1717",
      "difficulty": "Medium",
      "problem_slug": "maximum-score-from-removing-substrings",
      "topics": [
        "String",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct the Lexicographically Largest Valid Sequence",
      "problem_id": "1819",
      "frontend_id": "1718",
      "difficulty": "Medium",
      "problem_slug": "construct-the-lexicographically-largest-valid-sequence",
      "topics": [
        "Array",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number Of Ways To Reconstruct A Tree",
      "problem_id": "1820",
      "frontend_id": "1719",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-reconstruct-a-tree",
      "topics": [
        "Tree",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decode XORed Array",
      "problem_id": "1839",
      "frontend_id": "1720",
      "difficulty": "Easy",
      "problem_slug": "decode-xored-array",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Swapping Nodes in a Linked List",
      "problem_id": "528",
      "frontend_id": "1721",
      "difficulty": "Medium",
      "problem_slug": "swapping-nodes-in-a-linked-list",
      "topics": [
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Hamming Distance After Swap Operations",
      "problem_id": "1840",
      "frontend_id": "1722",
      "difficulty": "Medium",
      "problem_slug": "minimize-hamming-distance-after-swap-operations",
      "topics": [
        "Array",
        "Depth-First Search",
        "Union Find"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum Time to Finish All Jobs",
      "problem_id": "1825",
      "frontend_id": "1723",
      "difficulty": "Hard",
      "problem_slug": "find-minimum-time-to-finish-all-jobs",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number Of Rectangles That Can Form The Largest Square",
      "problem_id": "1843",
      "frontend_id": "1725",
      "difficulty": "Easy",
      "problem_slug": "number-of-rectangles-that-can-form-the-largest-square",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 15
    },
    {
      "title": "Tuple with Same Product",
      "problem_id": "1364",
      "frontend_id": "1726",
      "difficulty": "Medium",
      "problem_slug": "tuple-with-same-product",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Submatrix With Rearrangements",
      "problem_id": "1845",
      "frontend_id": "1727",
      "difficulty": "Medium",
      "problem_slug": "largest-submatrix-with-rearrangements",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cat and Mouse II",
      "problem_id": "1727",
      "frontend_id": "1728",
      "difficulty": "Hard",
      "problem_slug": "cat-and-mouse-ii",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Graph",
        "Topological Sort",
        "Memoization",
        "Matrix",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Followers Count",
      "problem_id": "1877",
      "frontend_id": "1729",
      "difficulty": "Easy",
      "problem_slug": "find-followers-count",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "The Number of Employees Which Report to Each Employee",
      "problem_id": "1882",
      "frontend_id": "1731",
      "difficulty": "Easy",
      "problem_slug": "the-number-of-employees-which-report-to-each-employee",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find the Highest Altitude",
      "problem_id": "1833",
      "frontend_id": "1732",
      "difficulty": "Easy",
      "problem_slug": "find-the-highest-altitude",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of People to Teach",
      "problem_id": "1834",
      "frontend_id": "1733",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-people-to-teach",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decode XORed Permutation",
      "problem_id": "1835",
      "frontend_id": "1734",
      "difficulty": "Medium",
      "problem_slug": "decode-xored-permutation",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Ways to Make Array With Product",
      "problem_id": "1836",
      "frontend_id": "1735",
      "difficulty": "Hard",
      "problem_slug": "count-ways-to-make-array-with-product",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Combinatorics",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Latest Time by Replacing Hidden Digits",
      "problem_id": "1858",
      "frontend_id": "1736",
      "difficulty": "Easy",
      "problem_slug": "latest-time-by-replacing-hidden-digits",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Change Minimum Characters to Satisfy One of Three Conditions",
      "problem_id": "1859",
      "frontend_id": "1737",
      "difficulty": "Medium",
      "problem_slug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
      "topics": [
        "Hash Table",
        "String",
        "Counting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Kth Largest XOR Coordinate Value",
      "problem_id": "1860",
      "frontend_id": "1738",
      "difficulty": "Medium",
      "problem_slug": "find-kth-largest-xor-coordinate-value",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Bit Manipulation",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix",
        "Prefix Sum",
        "Quickselect"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Building Boxes",
      "problem_id": "1861",
      "frontend_id": "1739",
      "difficulty": "Hard",
      "problem_slug": "building-boxes",
      "topics": [
        "Math",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Total Time Spent by Each Employee",
      "problem_id": "1892",
      "frontend_id": "1741",
      "difficulty": "Easy",
      "problem_slug": "find-total-time-spent-by-each-employee",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximum Number of Balls in a Box",
      "problem_id": "1844",
      "frontend_id": "1742",
      "difficulty": "Easy",
      "problem_slug": "maximum-number-of-balls-in-a-box",
      "topics": [
        "Hash Table",
        "Math",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Restore the Array From Adjacent Pairs",
      "problem_id": "1866",
      "frontend_id": "1743",
      "difficulty": "Medium",
      "problem_slug": "restore-the-array-from-adjacent-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
      "problem_id": "1872",
      "frontend_id": "1744",
      "difficulty": "Medium",
      "problem_slug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindrome Partitioning IV",
      "problem_id": "1871",
      "frontend_id": "1745",
      "difficulty": "Hard",
      "problem_slug": "palindrome-partitioning-iv",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Unique Elements",
      "problem_id": "1848",
      "frontend_id": "1748",
      "difficulty": "Easy",
      "problem_slug": "sum-of-unique-elements",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Absolute Sum of Any Subarray",
      "problem_id": "1849",
      "frontend_id": "1749",
      "difficulty": "Medium",
      "problem_slug": "maximum-absolute-sum-of-any-subarray",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Length of String After Deleting Similar Ends",
      "problem_id": "1850",
      "frontend_id": "1750",
      "difficulty": "Medium",
      "problem_slug": "minimum-length-of-string-after-deleting-similar-ends",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Events That Can Be Attended II",
      "problem_id": "1851",
      "frontend_id": "1751",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-events-that-can-be-attended-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Array Is Sorted and Rotated",
      "problem_id": "1878",
      "frontend_id": "1752",
      "difficulty": "Easy",
      "problem_slug": "check-if-array-is-sorted-and-rotated",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score From Removing Stones",
      "problem_id": "1879",
      "frontend_id": "1753",
      "difficulty": "Medium",
      "problem_slug": "maximum-score-from-removing-stones",
      "topics": [
        "Math",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Merge Of Two Strings",
      "problem_id": "1880",
      "frontend_id": "1754",
      "difficulty": "Medium",
      "problem_slug": "largest-merge-of-two-strings",
      "topics": [
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Closest Subsequence Sum",
      "problem_id": "1881",
      "frontend_id": "1755",
      "difficulty": "Hard",
      "problem_slug": "closest-subsequence-sum",
      "topics": [
        "Array",
        "Two Pointers",
        "Dynamic Programming",
        "Bit Manipulation",
        "Sorting",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Recyclable and Low Fat Products",
      "problem_id": "1908",
      "frontend_id": "1757",
      "difficulty": "Easy",
      "problem_slug": "recyclable-and-low-fat-products",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Minimum Changes To Make Alternating Binary String",
      "problem_id": "1884",
      "frontend_id": "1758",
      "difficulty": "Easy",
      "problem_slug": "minimum-changes-to-make-alternating-binary-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Homogenous Substrings",
      "problem_id": "1885",
      "frontend_id": "1759",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-homogenous-substrings",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Limit of Balls in a Bag",
      "problem_id": "1886",
      "frontend_id": "1760",
      "difficulty": "Medium",
      "problem_slug": "minimum-limit-of-balls-in-a-bag",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Degree of a Connected Trio in a Graph",
      "problem_id": "1887",
      "frontend_id": "1761",
      "difficulty": "Hard",
      "problem_slug": "minimum-degree-of-a-connected-trio-in-a-graph",
      "topics": [
        "Graph",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Nice Substring",
      "problem_id": "1873",
      "frontend_id": "1763",
      "difficulty": "Easy",
      "problem_slug": "longest-nice-substring",
      "topics": [
        "Hash Table",
        "String",
        "Divide and Conquer",
        "Bit Manipulation",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Form Array by Concatenating Subarrays of Another Array",
      "problem_id": "1874",
      "frontend_id": "1764",
      "difficulty": "Medium",
      "problem_slug": "form-array-by-concatenating-subarrays-of-another-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Map of Highest Peak",
      "problem_id": "1876",
      "frontend_id": "1765",
      "difficulty": "Medium",
      "problem_slug": "map-of-highest-peak",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Tree of Coprimes",
      "problem_id": "1875",
      "frontend_id": "1766",
      "difficulty": "Hard",
      "problem_slug": "tree-of-coprimes",
      "topics": [
        "Array",
        "Math",
        "Tree",
        "Depth-First Search",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Strings Alternately",
      "problem_id": "1894",
      "frontend_id": "1768",
      "difficulty": "Easy",
      "problem_slug": "merge-strings-alternately",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Minimum Number of Operations to Move All Balls to Each Box",
      "problem_id": "1895",
      "frontend_id": "1769",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
      "topics": [
        "Array",
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score from Performing Multiplication Operations",
      "problem_id": "1896",
      "frontend_id": "1770",
      "difficulty": "Hard",
      "problem_slug": "maximum-score-from-performing-multiplication-operations",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Palindrome Length From Subsequences",
      "problem_id": "1897",
      "frontend_id": "1771",
      "difficulty": "Hard",
      "problem_slug": "maximize-palindrome-length-from-subsequences",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Items Matching a Rule",
      "problem_id": "1899",
      "frontend_id": "1773",
      "difficulty": "Easy",
      "problem_slug": "count-items-matching-a-rule",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Closest Dessert Cost",
      "problem_id": "1900",
      "frontend_id": "1774",
      "difficulty": "Medium",
      "problem_slug": "closest-dessert-cost",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Equal Sum Arrays With Minimum Number of Operations",
      "problem_id": "1901",
      "frontend_id": "1775",
      "difficulty": "Medium",
      "problem_slug": "equal-sum-arrays-with-minimum-number-of-operations",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Car Fleet II",
      "problem_id": "1902",
      "frontend_id": "1776",
      "difficulty": "Hard",
      "problem_slug": "car-fleet-ii",
      "topics": [
        "Array",
        "Math",
        "Stack",
        "Heap (Priority Queue)",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Nearest Point That Has the Same X or Y Coordinate",
      "problem_id": "1888",
      "frontend_id": "1779",
      "difficulty": "Easy",
      "problem_slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Number is a Sum of Powers of Three",
      "problem_id": "1889",
      "frontend_id": "1780",
      "difficulty": "Medium",
      "problem_slug": "check-if-number-is-a-sum-of-powers-of-three",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Beauty of All Substrings",
      "problem_id": "1890",
      "frontend_id": "1781",
      "difficulty": "Medium",
      "problem_slug": "sum-of-beauty-of-all-substrings",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs Of Nodes",
      "problem_id": "1891",
      "frontend_id": "1782",
      "difficulty": "Hard",
      "problem_slug": "count-pairs-of-nodes",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search",
        "Graph",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Binary String Has at Most One Segment of Ones",
      "problem_id": "1910",
      "frontend_id": "1784",
      "difficulty": "Easy",
      "problem_slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Elements to Add to Form a Given Sum",
      "problem_id": "1911",
      "frontend_id": "1785",
      "difficulty": "Medium",
      "problem_slug": "minimum-elements-to-add-to-form-a-given-sum",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Restricted Paths From First to Last Node",
      "problem_id": "1912",
      "frontend_id": "1786",
      "difficulty": "Medium",
      "problem_slug": "number-of-restricted-paths-from-first-to-last-node",
      "topics": [
        "Dynamic Programming",
        "Graph",
        "Topological Sort",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make the XOR of All Segments Equal to Zero",
      "problem_id": "1913",
      "frontend_id": "1787",
      "difficulty": "Hard",
      "problem_slug": "make-the-xor-of-all-segments-equal-to-zero",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Primary Department for Each Employee",
      "problem_id": "1942",
      "frontend_id": "1789",
      "difficulty": "Easy",
      "problem_slug": "primary-department-for-each-employee",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Check if One String Swap Can Make Strings Equal",
      "problem_id": "1915",
      "frontend_id": "1790",
      "difficulty": "Easy",
      "problem_slug": "check-if-one-string-swap-can-make-strings-equal",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Center of Star Graph",
      "problem_id": "1916",
      "frontend_id": "1791",
      "difficulty": "Easy",
      "problem_slug": "find-center-of-star-graph",
      "topics": [
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Average Pass Ratio",
      "problem_id": "1917",
      "frontend_id": "1792",
      "difficulty": "Medium",
      "problem_slug": "maximum-average-pass-ratio",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score of a Good Subarray",
      "problem_id": "1918",
      "frontend_id": "1793",
      "difficulty": "Hard",
      "problem_slug": "maximum-score-of-a-good-subarray",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearrange Products Table",
      "problem_id": "1948",
      "frontend_id": "1795",
      "difficulty": "Easy",
      "problem_slug": "rearrange-products-table",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Second Largest Digit in a String",
      "problem_id": "1904",
      "frontend_id": "1796",
      "difficulty": "Easy",
      "problem_slug": "second-largest-digit-in-a-string",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Authentication Manager",
      "problem_id": "1905",
      "frontend_id": "1797",
      "difficulty": "Medium",
      "problem_slug": "design-authentication-manager",
      "topics": [
        "Hash Table",
        "Linked List",
        "Design",
        "Doubly-Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Consecutive Values You Can Make",
      "problem_id": "1930",
      "frontend_id": "1798",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-consecutive-values-you-can-make",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Score After N Operations",
      "problem_id": "1906",
      "frontend_id": "1799",
      "difficulty": "Hard",
      "problem_slug": "maximize-score-after-n-operations",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Number Theory",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Ascending Subarray Sum",
      "problem_id": "1927",
      "frontend_id": "1800",
      "difficulty": "Easy",
      "problem_slug": "maximum-ascending-subarray-sum",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Orders in the Backlog",
      "problem_id": "1928",
      "frontend_id": "1801",
      "difficulty": "Medium",
      "problem_slug": "number-of-orders-in-the-backlog",
      "topics": [
        "Array",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Maximum Value at a Given Index in a Bounded Array",
      "problem_id": "1929",
      "frontend_id": "1802",
      "difficulty": "Medium",
      "problem_slug": "maximum-value-at-a-given-index-in-a-bounded-array",
      "topics": [
        "Math",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs With XOR in a Range",
      "problem_id": "1907",
      "frontend_id": "1803",
      "difficulty": "Hard",
      "problem_slug": "count-pairs-with-xor-in-a-range",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Number of Different Integers in a String",
      "problem_id": "1933",
      "frontend_id": "1805",
      "difficulty": "Easy",
      "problem_slug": "number-of-different-integers-in-a-string",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Reinitialize a Permutation",
      "problem_id": "1935",
      "frontend_id": "1806",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-reinitialize-a-permutation",
      "topics": [
        "Array",
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Evaluate the Bracket Pairs of a String",
      "problem_id": "1934",
      "frontend_id": "1807",
      "difficulty": "Medium",
      "problem_slug": "evaluate-the-bracket-pairs-of-a-string",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Number of Nice Divisors",
      "problem_id": "1936",
      "frontend_id": "1808",
      "difficulty": "Hard",
      "problem_slug": "maximize-number-of-nice-divisors",
      "topics": [
        "Math",
        "Recursion",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Determine Color of a Chessboard Square",
      "problem_id": "1920",
      "frontend_id": "1812",
      "difficulty": "Easy",
      "problem_slug": "determine-color-of-a-chessboard-square",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sentence Similarity III",
      "problem_id": "1923",
      "frontend_id": "1813",
      "difficulty": "Medium",
      "problem_slug": "sentence-similarity-iii",
      "topics": [
        "Array",
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Nice Pairs in an Array",
      "problem_id": "1925",
      "frontend_id": "1814",
      "difficulty": "Medium",
      "problem_slug": "count-nice-pairs-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Groups Getting Fresh Donuts",
      "problem_id": "1924",
      "frontend_id": "1815",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-groups-getting-fresh-donuts",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Memoization",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Truncate Sentence",
      "problem_id": "1944",
      "frontend_id": "1816",
      "difficulty": "Easy",
      "problem_slug": "truncate-sentence",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Finding the Users Active Minutes",
      "problem_id": "1945",
      "frontend_id": "1817",
      "difficulty": "Medium",
      "problem_slug": "finding-the-users-active-minutes",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Absolute Sum Difference",
      "problem_id": "1946",
      "frontend_id": "1818",
      "difficulty": "Medium",
      "problem_slug": "minimum-absolute-sum-difference",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Different Subsequences GCDs",
      "problem_id": "1947",
      "frontend_id": "1819",
      "difficulty": "Hard",
      "problem_slug": "number-of-different-subsequences-gcds",
      "topics": [
        "Array",
        "Math",
        "Counting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sign of the Product of an Array",
      "problem_id": "1950",
      "frontend_id": "1822",
      "difficulty": "Easy",
      "problem_slug": "sign-of-the-product-of-an-array",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Winner of the Circular Game",
      "problem_id": "1951",
      "frontend_id": "1823",
      "difficulty": "Medium",
      "problem_slug": "find-the-winner-of-the-circular-game",
      "topics": [
        "Array",
        "Math",
        "Recursion",
        "Queue",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Sideway Jumps",
      "problem_id": "1952",
      "frontend_id": "1824",
      "difficulty": "Medium",
      "problem_slug": "minimum-sideway-jumps",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Finding MK Average",
      "problem_id": "1953",
      "frontend_id": "1825",
      "difficulty": "Hard",
      "problem_slug": "finding-mk-average",
      "topics": [
        "Design",
        "Queue",
        "Heap (Priority Queue)",
        "Data Stream",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make the Array Increasing",
      "problem_id": "1938",
      "frontend_id": "1827",
      "difficulty": "Easy",
      "problem_slug": "minimum-operations-to-make-the-array-increasing",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Queries on Number of Points Inside a Circle",
      "problem_id": "1939",
      "frontend_id": "1828",
      "difficulty": "Medium",
      "problem_slug": "queries-on-number-of-points-inside-a-circle",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Maximum XOR for Each Query",
      "problem_id": "1940",
      "frontend_id": "1829",
      "difficulty": "Medium",
      "problem_slug": "maximum-xor-for-each-query",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make String Sorted",
      "problem_id": "1941",
      "frontend_id": "1830",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-operations-to-make-string-sorted",
      "topics": [
        "Math",
        "String",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if the Sentence Is Pangram",
      "problem_id": "1960",
      "frontend_id": "1832",
      "difficulty": "Easy",
      "problem_slug": "check-if-the-sentence-is-pangram",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Ice Cream Bars",
      "problem_id": "1961",
      "frontend_id": "1833",
      "difficulty": "Medium",
      "problem_slug": "maximum-ice-cream-bars",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Single-Threaded CPU",
      "problem_id": "1962",
      "frontend_id": "1834",
      "difficulty": "Medium",
      "problem_slug": "single-threaded-cpu",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find XOR Sum of All Pairs Bitwise AND",
      "problem_id": "1963",
      "frontend_id": "1835",
      "difficulty": "Hard",
      "problem_slug": "find-xor-sum-of-all-pairs-bitwise-and",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Digits in Base K",
      "problem_id": "1965",
      "frontend_id": "1837",
      "difficulty": "Easy",
      "problem_slug": "sum-of-digits-in-base-k",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Frequency of the Most Frequent Element",
      "problem_id": "1966",
      "frontend_id": "1838",
      "difficulty": "Medium",
      "problem_slug": "frequency-of-the-most-frequent-element",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sliding Window",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Substring Of All Vowels in Order",
      "problem_id": "1967",
      "frontend_id": "1839",
      "difficulty": "Medium",
      "problem_slug": "longest-substring-of-all-vowels-in-order",
      "topics": [
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Building Height",
      "problem_id": "1968",
      "frontend_id": "1840",
      "difficulty": "Hard",
      "problem_slug": "maximum-building-height",
      "topics": [
        "Array",
        "Math",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace All Digits with Characters",
      "problem_id": "1954",
      "frontend_id": "1844",
      "difficulty": "Easy",
      "problem_slug": "replace-all-digits-with-characters",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Seat Reservation Manager",
      "problem_id": "1955",
      "frontend_id": "1845",
      "difficulty": "Medium",
      "problem_slug": "seat-reservation-manager",
      "topics": [
        "Design",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Element After Decreasing and Rearranging",
      "problem_id": "1956",
      "frontend_id": "1846",
      "difficulty": "Medium",
      "problem_slug": "maximum-element-after-decreasing-and-rearranging",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Closest Room",
      "problem_id": "1957",
      "frontend_id": "1847",
      "difficulty": "Hard",
      "problem_slug": "closest-room",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Distance to the Target Element",
      "problem_id": "1975",
      "frontend_id": "1848",
      "difficulty": "Easy",
      "problem_slug": "minimum-distance-to-the-target-element",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Splitting a String Into Descending Consecutive Values",
      "problem_id": "1976",
      "frontend_id": "1849",
      "difficulty": "Medium",
      "problem_slug": "splitting-a-string-into-descending-consecutive-values",
      "topics": [
        "String",
        "Backtracking",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
      "problem_id": "1978",
      "frontend_id": "1850",
      "difficulty": "Medium",
      "problem_slug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
      "topics": [
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Interval to Include Each Query",
      "problem_id": "1977",
      "frontend_id": "1851",
      "difficulty": "Hard",
      "problem_slug": "minimum-interval-to-include-each-query",
      "topics": [
        "Array",
        "Binary Search",
        "Line Sweep",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Population Year",
      "problem_id": "1983",
      "frontend_id": "1854",
      "difficulty": "Easy",
      "problem_slug": "maximum-population-year",
      "topics": [
        "Array",
        "Counting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Distance Between a Pair of Values",
      "problem_id": "1984",
      "frontend_id": "1855",
      "difficulty": "Medium",
      "problem_slug": "maximum-distance-between-a-pair-of-values",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Subarray Min-Product",
      "problem_id": "1985",
      "frontend_id": "1856",
      "difficulty": "Medium",
      "problem_slug": "maximum-subarray-min-product",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Color Value in a Directed Graph",
      "problem_id": "1986",
      "frontend_id": "1857",
      "difficulty": "Hard",
      "problem_slug": "largest-color-value-in-a-directed-graph",
      "topics": [
        "Hash Table",
        "Dynamic Programming",
        "Graph",
        "Topological Sort",
        "Memoization",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Sorting the Sentence",
      "problem_id": "1970",
      "frontend_id": "1859",
      "difficulty": "Easy",
      "problem_slug": "sorting-the-sentence",
      "topics": [
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Incremental Memory Leak",
      "problem_id": "1971",
      "frontend_id": "1860",
      "difficulty": "Medium",
      "problem_slug": "incremental-memory-leak",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rotating the Box",
      "problem_id": "1972",
      "frontend_id": "1861",
      "difficulty": "Medium",
      "problem_slug": "rotating-the-box",
      "topics": [
        "Array",
        "Two Pointers",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Floored Pairs",
      "problem_id": "1326",
      "frontend_id": "1862",
      "difficulty": "Hard",
      "problem_slug": "sum-of-floored-pairs",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of All Subset XOR Totals",
      "problem_id": "1993",
      "frontend_id": "1863",
      "difficulty": "Easy",
      "problem_slug": "sum-of-all-subset-xor-totals",
      "topics": [
        "Array",
        "Math",
        "Backtracking",
        "Bit Manipulation",
        "Combinatorics",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Swaps to Make the Binary String Alternating",
      "problem_id": "1994",
      "frontend_id": "1864",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Finding Pairs With a Certain Sum",
      "problem_id": "1995",
      "frontend_id": "1865",
      "difficulty": "Medium",
      "problem_slug": "finding-pairs-with-a-certain-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
      "problem_id": "1996",
      "frontend_id": "1866",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longer Contiguous Segments of Ones than Zeros",
      "problem_id": "1999",
      "frontend_id": "1869",
      "difficulty": "Easy",
      "problem_slug": "longer-contiguous-segments-of-ones-than-zeros",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Speed to Arrive on Time",
      "problem_id": "2000",
      "frontend_id": "1870",
      "difficulty": "Medium",
      "problem_slug": "minimum-speed-to-arrive-on-time",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Jump Game VII",
      "problem_id": "2001",
      "frontend_id": "1871",
      "difficulty": "Medium",
      "problem_slug": "jump-game-vii",
      "topics": [
        "String",
        "Dynamic Programming",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Game VIII",
      "problem_id": "2002",
      "frontend_id": "1872",
      "difficulty": "Hard",
      "problem_slug": "stone-game-viii",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Prefix Sum",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Calculate Special Bonus",
      "problem_id": "2024",
      "frontend_id": "1873",
      "difficulty": "Easy",
      "problem_slug": "calculate-special-bonus",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Substrings of Size Three with Distinct Characters",
      "problem_id": "1987",
      "frontend_id": "1876",
      "difficulty": "Easy",
      "problem_slug": "substrings-of-size-three-with-distinct-characters",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Maximum Pair Sum in Array",
      "problem_id": "1988",
      "frontend_id": "1877",
      "difficulty": "Medium",
      "problem_slug": "minimize-maximum-pair-sum-in-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Get Biggest Three Rhombus Sums in a Grid",
      "problem_id": "1990",
      "frontend_id": "1878",
      "difficulty": "Medium",
      "problem_slug": "get-biggest-three-rhombus-sums-in-a-grid",
      "topics": [
        "Array",
        "Math",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum XOR Sum of Two Arrays",
      "problem_id": "1989",
      "frontend_id": "1879",
      "difficulty": "Hard",
      "problem_slug": "minimum-xor-sum-of-two-arrays",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Word Equals Summation of Two Words",
      "problem_id": "2010",
      "frontend_id": "1880",
      "difficulty": "Easy",
      "problem_slug": "check-if-word-equals-summation-of-two-words",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Value after Insertion",
      "problem_id": "2011",
      "frontend_id": "1881",
      "difficulty": "Medium",
      "problem_slug": "maximum-value-after-insertion",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Process Tasks Using Servers",
      "problem_id": "2012",
      "frontend_id": "1882",
      "difficulty": "Medium",
      "problem_slug": "process-tasks-using-servers",
      "topics": [
        "Array",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Skips to Arrive at Meeting On Time",
      "problem_id": "2013",
      "frontend_id": "1883",
      "difficulty": "Hard",
      "problem_slug": "minimum-skips-to-arrive-at-meeting-on-time",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Egg Drop With 2 Eggs and N Floors",
      "problem_id": "2031",
      "frontend_id": "1884",
      "difficulty": "Medium",
      "problem_slug": "egg-drop-with-2-eggs-and-n-floors",
      "topics": [
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Determine Whether Matrix Can Be Obtained By Rotation",
      "problem_id": "2015",
      "frontend_id": "1886",
      "difficulty": "Easy",
      "problem_slug": "determine-whether-matrix-can-be-obtained-by-rotation",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reduction Operations to Make the Array Elements Equal",
      "problem_id": "2016",
      "frontend_id": "1887",
      "difficulty": "Medium",
      "problem_slug": "reduction-operations-to-make-the-array-elements-equal",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Flips to Make the Binary String Alternating",
      "problem_id": "2017",
      "frontend_id": "1888",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
      "topics": [
        "String",
        "Dynamic Programming",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Space Wasted From Packaging",
      "problem_id": "2018",
      "frontend_id": "1889",
      "difficulty": "Hard",
      "problem_slug": "minimum-space-wasted-from-packaging",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Latest Login in 2020",
      "problem_id": "2041",
      "frontend_id": "1890",
      "difficulty": "Easy",
      "problem_slug": "the-latest-login-in-2020",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Check if All the Integers in a Range Are Covered",
      "problem_id": "2005",
      "frontend_id": "1893",
      "difficulty": "Easy",
      "problem_slug": "check-if-all-the-integers-in-a-range-are-covered",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Student that Will Replace the Chalk",
      "problem_id": "2006",
      "frontend_id": "1894",
      "difficulty": "Medium",
      "problem_slug": "find-the-student-that-will-replace-the-chalk",
      "topics": [
        "Array",
        "Binary Search",
        "Simulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Magic Square",
      "problem_id": "1311",
      "frontend_id": "1895",
      "difficulty": "Medium",
      "problem_slug": "largest-magic-square",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Change the Final Value of Expression",
      "problem_id": "2008",
      "frontend_id": "1896",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-change-the-final-value-of-expression",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Redistribute Characters to Make All Strings Equal",
      "problem_id": "2025",
      "frontend_id": "1897",
      "difficulty": "Easy",
      "problem_slug": "redistribute-characters-to-make-all-strings-equal",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Removable Characters",
      "problem_id": "2027",
      "frontend_id": "1898",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-removable-characters",
      "topics": [
        "Array",
        "Two Pointers",
        "String",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Triplets to Form Target Triplet",
      "problem_id": "2026",
      "frontend_id": "1899",
      "difficulty": "Medium",
      "problem_slug": "merge-triplets-to-form-target-triplet",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Earliest and Latest Rounds Where Players Compete",
      "problem_id": "2028",
      "frontend_id": "1900",
      "difficulty": "Hard",
      "problem_slug": "the-earliest-and-latest-rounds-where-players-compete",
      "topics": [
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find a Peak Element II",
      "problem_id": "2047",
      "frontend_id": "1901",
      "difficulty": "Medium",
      "problem_slug": "find-a-peak-element-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Odd Number in String",
      "problem_id": "2032",
      "frontend_id": "1903",
      "difficulty": "Easy",
      "problem_slug": "largest-odd-number-in-string",
      "topics": [
        "Math",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Number of Full Rounds You Have Played",
      "problem_id": "2033",
      "frontend_id": "1904",
      "difficulty": "Medium",
      "problem_slug": "the-number-of-full-rounds-you-have-played",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Sub Islands",
      "problem_id": "2035",
      "frontend_id": "1905",
      "difficulty": "Medium",
      "problem_slug": "count-sub-islands",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Absolute Difference Queries",
      "problem_id": "2034",
      "frontend_id": "1906",
      "difficulty": "Medium",
      "problem_slug": "minimum-absolute-difference-queries",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Salary Categories",
      "problem_id": "2057",
      "frontend_id": "1907",
      "difficulty": "Medium",
      "problem_slug": "count-salary-categories",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Remove One Element to Make the Array Strictly Increasing",
      "problem_id": "2020",
      "frontend_id": "1909",
      "difficulty": "Easy",
      "problem_slug": "remove-one-element-to-make-the-array-strictly-increasing",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove All Occurrences of a Substring",
      "problem_id": "2021",
      "frontend_id": "1910",
      "difficulty": "Medium",
      "problem_slug": "remove-all-occurrences-of-a-substring",
      "topics": [
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Alternating Subsequence Sum",
      "problem_id": "2022",
      "frontend_id": "1911",
      "difficulty": "Medium",
      "problem_slug": "maximum-alternating-subsequence-sum",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Design Movie Rental System",
      "problem_id": "2023",
      "frontend_id": "1912",
      "difficulty": "Hard",
      "problem_slug": "design-movie-rental-system",
      "topics": [
        "Array",
        "Hash Table",
        "Design",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product Difference Between Two Pairs",
      "problem_id": "2042",
      "frontend_id": "1913",
      "difficulty": "Easy",
      "problem_slug": "maximum-product-difference-between-two-pairs",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Cyclically Rotating a Grid",
      "problem_id": "2043",
      "frontend_id": "1914",
      "difficulty": "Medium",
      "problem_slug": "cyclically-rotating-a-grid",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Number of Wonderful Substrings",
      "problem_id": "2044",
      "frontend_id": "1915",
      "difficulty": "Medium",
      "problem_slug": "number-of-wonderful-substrings",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Count Ways to Build Rooms in an Ant Colony",
      "problem_id": "1313",
      "frontend_id": "1916",
      "difficulty": "Hard",
      "problem_slug": "count-ways-to-build-rooms-in-an-ant-colony",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Tree",
        "Graph",
        "Topological Sort",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Build Array from Permutation",
      "problem_id": "2048",
      "frontend_id": "1920",
      "difficulty": "Easy",
      "problem_slug": "build-array-from-permutation",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Eliminate Maximum Number of Monsters",
      "problem_id": "2049",
      "frontend_id": "1921",
      "difficulty": "Medium",
      "problem_slug": "eliminate-maximum-number-of-monsters",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Good Numbers",
      "problem_id": "2050",
      "frontend_id": "1922",
      "difficulty": "Medium",
      "problem_slug": "count-good-numbers",
      "topics": [
        "Math",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Common Subpath",
      "problem_id": "2051",
      "frontend_id": "1923",
      "difficulty": "Hard",
      "problem_slug": "longest-common-subpath",
      "topics": [
        "Array",
        "Binary Search",
        "Rolling Hash",
        "Suffix Array",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Square Sum Triples",
      "problem_id": "2037",
      "frontend_id": "1925",
      "difficulty": "Easy",
      "problem_slug": "count-square-sum-triples",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Nearest Exit from Entrance in Maze",
      "problem_id": "2038",
      "frontend_id": "1926",
      "difficulty": "Medium",
      "problem_slug": "nearest-exit-from-entrance-in-maze",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum Game",
      "problem_id": "2039",
      "frontend_id": "1927",
      "difficulty": "Medium",
      "problem_slug": "sum-game",
      "topics": [
        "Math",
        "String",
        "Greedy",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Reach Destination in Time",
      "problem_id": "2040",
      "frontend_id": "1928",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-reach-destination-in-time",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Concatenation of Array",
      "problem_id": "2058",
      "frontend_id": "1929",
      "difficulty": "Easy",
      "problem_slug": "concatenation-of-array",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unique Length-3 Palindromic Subsequences",
      "problem_id": "2059",
      "frontend_id": "1930",
      "difficulty": "Medium",
      "problem_slug": "unique-length-3-palindromic-subsequences",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Painting a Grid With Three Different Colors",
      "problem_id": "2061",
      "frontend_id": "1931",
      "difficulty": "Hard",
      "problem_slug": "painting-a-grid-with-three-different-colors",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge BSTs to Create Single BST",
      "problem_id": "2060",
      "frontend_id": "1932",
      "difficulty": "Hard",
      "problem_slug": "merge-bsts-to-create-single-bst",
      "topics": [
        "Hash Table",
        "Binary Search",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 16
    },
    {
      "title": "Confirmation Rate",
      "problem_id": "2087",
      "frontend_id": "1934",
      "difficulty": "Medium",
      "problem_slug": "confirmation-rate",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximum Number of Words You Can Type",
      "problem_id": "1264",
      "frontend_id": "1935",
      "difficulty": "Easy",
      "problem_slug": "maximum-number-of-words-you-can-type",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add Minimum Number of Rungs",
      "problem_id": "2066",
      "frontend_id": "1936",
      "difficulty": "Medium",
      "problem_slug": "add-minimum-number-of-rungs",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Points with Cost",
      "problem_id": "2067",
      "frontend_id": "1937",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-points-with-cost",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Genetic Difference Query",
      "problem_id": "2068",
      "frontend_id": "1938",
      "difficulty": "Hard",
      "problem_slug": "maximum-genetic-difference-query",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Depth-First Search",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if All Characters Have Equal Number of Occurrences",
      "problem_id": "2053",
      "frontend_id": "1941",
      "difficulty": "Easy",
      "problem_slug": "check-if-all-characters-have-equal-number-of-occurrences",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Number of the Smallest Unoccupied Chair",
      "problem_id": "2054",
      "frontend_id": "1942",
      "difficulty": "Medium",
      "problem_slug": "the-number-of-the-smallest-unoccupied-chair",
      "topics": [
        "Array",
        "Hash Table",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Describe the Painting",
      "problem_id": "2055",
      "frontend_id": "1943",
      "difficulty": "Medium",
      "problem_slug": "describe-the-painting",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Visible People in a Queue",
      "problem_id": "1305",
      "frontend_id": "1944",
      "difficulty": "Hard",
      "problem_slug": "number-of-visible-people-in-a-queue",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Digits of String After Convert",
      "problem_id": "2076",
      "frontend_id": "1945",
      "difficulty": "Easy",
      "problem_slug": "sum-of-digits-of-string-after-convert",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Number After Mutating Substring",
      "problem_id": "2077",
      "frontend_id": "1946",
      "difficulty": "Medium",
      "problem_slug": "largest-number-after-mutating-substring",
      "topics": [
        "Array",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Compatibility Score Sum",
      "problem_id": "2078",
      "frontend_id": "1947",
      "difficulty": "Medium",
      "problem_slug": "maximum-compatibility-score-sum",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Duplicate Folders in System",
      "problem_id": "2079",
      "frontend_id": "1948",
      "difficulty": "Hard",
      "problem_slug": "delete-duplicate-folders-in-system",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Three Divisors",
      "problem_id": "2083",
      "frontend_id": "1952",
      "difficulty": "Easy",
      "problem_slug": "three-divisors",
      "topics": [
        "Math",
        "Enumeration",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Weeks for Which You Can Work",
      "problem_id": "2084",
      "frontend_id": "1953",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-weeks-for-which-you-can-work",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Garden Perimeter to Collect Enough Apples",
      "problem_id": "1295",
      "frontend_id": "1954",
      "difficulty": "Medium",
      "problem_slug": "minimum-garden-perimeter-to-collect-enough-apples",
      "topics": [
        "Math",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Special Subsequences",
      "problem_id": "2086",
      "frontend_id": "1955",
      "difficulty": "Hard",
      "problem_slug": "count-number-of-special-subsequences",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Characters to Make Fancy String",
      "problem_id": "1302",
      "frontend_id": "1957",
      "difficulty": "Easy",
      "problem_slug": "delete-characters-to-make-fancy-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Move is Legal",
      "problem_id": "2080",
      "frontend_id": "1958",
      "difficulty": "Medium",
      "problem_slug": "check-if-move-is-legal",
      "topics": [
        "Array",
        "Matrix",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Total Space Wasted With K Resizing Operations",
      "problem_id": "2081",
      "frontend_id": "1959",
      "difficulty": "Medium",
      "problem_slug": "minimum-total-space-wasted-with-k-resizing-operations",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of the Length of Two Palindromic Substrings",
      "problem_id": "1336",
      "frontend_id": "1960",
      "difficulty": "Hard",
      "problem_slug": "maximum-product-of-the-length-of-two-palindromic-substrings",
      "topics": [
        "String",
        "Rolling Hash",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If String Is a Prefix of Array",
      "problem_id": "2093",
      "frontend_id": "1961",
      "difficulty": "Easy",
      "problem_slug": "check-if-string-is-a-prefix-of-array",
      "topics": [
        "Array",
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Stones to Minimize the Total",
      "problem_id": "2094",
      "frontend_id": "1962",
      "difficulty": "Medium",
      "problem_slug": "remove-stones-to-minimize-the-total",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Swaps to Make the String Balanced",
      "problem_id": "2095",
      "frontend_id": "1963",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-swaps-to-make-the-string-balanced",
      "topics": [
        "Two Pointers",
        "String",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Longest Valid Obstacle Course at Each Position",
      "problem_id": "2096",
      "frontend_id": "1964",
      "difficulty": "Hard",
      "problem_slug": "find-the-longest-valid-obstacle-course-at-each-position",
      "topics": [
        "Array",
        "Binary Search",
        "Binary Indexed Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Employees With Missing Information",
      "problem_id": "2110",
      "frontend_id": "1965",
      "difficulty": "Easy",
      "problem_slug": "employees-with-missing-information",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Number of Strings That Appear as Substrings in Word",
      "problem_id": "2099",
      "frontend_id": "1967",
      "difficulty": "Easy",
      "problem_slug": "number-of-strings-that-appear-as-substrings-in-word",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Array With Elements Not Equal to Average of Neighbors",
      "problem_id": "2085",
      "frontend_id": "1968",
      "difficulty": "Medium",
      "problem_slug": "array-with-elements-not-equal-to-average-of-neighbors",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Non-Zero Product of the Array Elements",
      "problem_id": "2100",
      "frontend_id": "1969",
      "difficulty": "Medium",
      "problem_slug": "minimum-non-zero-product-of-the-array-elements",
      "topics": [
        "Math",
        "Greedy",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Last Day Where You Can Still Cross",
      "problem_id": "2101",
      "frontend_id": "1970",
      "difficulty": "Hard",
      "problem_slug": "last-day-where-you-can-still-cross",
      "topics": [
        "Array",
        "Binary Search",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find if Path Exists in Graph",
      "problem_id": "2121",
      "frontend_id": "1971",
      "difficulty": "Easy",
      "problem_slug": "find-if-path-exists-in-graph",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Type Word Using Special Typewriter",
      "problem_id": "2088",
      "frontend_id": "1974",
      "difficulty": "Easy",
      "problem_slug": "minimum-time-to-type-word-using-special-typewriter",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Matrix Sum",
      "problem_id": "2089",
      "frontend_id": "1975",
      "difficulty": "Medium",
      "problem_slug": "maximum-matrix-sum",
      "topics": [
        "Array",
        "Greedy",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Arrive at Destination",
      "problem_id": "2090",
      "frontend_id": "1976",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-to-arrive-at-destination",
      "topics": [
        "Dynamic Programming",
        "Graph",
        "Topological Sort",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Separate Numbers",
      "problem_id": "2091",
      "frontend_id": "1977",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-separate-numbers",
      "topics": [
        "String",
        "Dynamic Programming",
        "Suffix Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Employees Whose Manager Left the Company",
      "problem_id": "2127",
      "frontend_id": "1978",
      "difficulty": "Easy",
      "problem_slug": "employees-whose-manager-left-the-company",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find Greatest Common Divisor of Array",
      "problem_id": "2106",
      "frontend_id": "1979",
      "difficulty": "Easy",
      "problem_slug": "find-greatest-common-divisor-of-array",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Unique Binary String",
      "problem_id": "2107",
      "frontend_id": "1980",
      "difficulty": "Medium",
      "problem_slug": "find-unique-binary-string",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize the Difference Between Target and Chosen Elements",
      "problem_id": "2108",
      "frontend_id": "1981",
      "difficulty": "Medium",
      "problem_slug": "minimize-the-difference-between-target-and-chosen-elements",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Array Given Subset Sums",
      "problem_id": "2109",
      "frontend_id": "1982",
      "difficulty": "Hard",
      "problem_slug": "find-array-given-subset-sums",
      "topics": [
        "Array",
        "Divide and Conquer"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Difference Between Highest and Lowest of K Scores",
      "problem_id": "2112",
      "frontend_id": "1984",
      "difficulty": "Easy",
      "problem_slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
      "topics": [
        "Array",
        "Sliding Window",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Kth Largest Integer in the Array",
      "problem_id": "2113",
      "frontend_id": "1985",
      "difficulty": "Medium",
      "problem_slug": "find-the-kth-largest-integer-in-the-array",
      "topics": [
        "Array",
        "String",
        "Divide and Conquer",
        "Sorting",
        "Heap (Priority Queue)",
        "Quickselect"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Work Sessions to Finish the Tasks",
      "problem_id": "2114",
      "frontend_id": "1986",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-work-sessions-to-finish-the-tasks",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Unique Good Subsequences",
      "problem_id": "2115",
      "frontend_id": "1987",
      "difficulty": "Hard",
      "problem_slug": "number-of-unique-good-subsequences",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Middle Index in Array",
      "problem_id": "2102",
      "frontend_id": "1991",
      "difficulty": "Easy",
      "problem_slug": "find-the-middle-index-in-array",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Groups of Farmland",
      "problem_id": "2103",
      "frontend_id": "1992",
      "difficulty": "Medium",
      "problem_slug": "find-all-groups-of-farmland",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Operations on Tree",
      "problem_id": "2104",
      "frontend_id": "1993",
      "difficulty": "Medium",
      "problem_slug": "operations-on-tree",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Number of Good Subsets",
      "problem_id": "2105",
      "frontend_id": "1994",
      "difficulty": "Hard",
      "problem_slug": "the-number-of-good-subsets",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Dynamic Programming",
        "Bit Manipulation",
        "Counting",
        "Number Theory",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Special Quadruplets",
      "problem_id": "2122",
      "frontend_id": "1995",
      "difficulty": "Easy",
      "problem_slug": "count-special-quadruplets",
      "topics": [
        "Array",
        "Hash Table",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Number of Weak Characters in the Game",
      "problem_id": "2123",
      "frontend_id": "1996",
      "difficulty": "Medium",
      "problem_slug": "the-number-of-weak-characters-in-the-game",
      "topics": [
        "Array",
        "Stack",
        "Greedy",
        "Sorting",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "First Day Where You Have Been in All the Rooms",
      "problem_id": "2124",
      "frontend_id": "1997",
      "difficulty": "Medium",
      "problem_slug": "first-day-where-you-have-been-in-all-the-rooms",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "GCD Sort of an Array",
      "problem_id": "2125",
      "frontend_id": "1998",
      "difficulty": "Hard",
      "problem_slug": "gcd-sort-of-an-array",
      "topics": [
        "Array",
        "Math",
        "Union Find",
        "Sorting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Prefix of Word",
      "problem_id": "2128",
      "frontend_id": "2000",
      "difficulty": "Easy",
      "problem_slug": "reverse-prefix-of-word",
      "topics": [
        "Two Pointers",
        "String",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Pairs of Interchangeable Rectangles",
      "problem_id": "2129",
      "frontend_id": "2001",
      "difficulty": "Medium",
      "problem_slug": "number-of-pairs-of-interchangeable-rectangles",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of the Length of Two Palindromic Subsequences",
      "problem_id": "2130",
      "frontend_id": "2002",
      "difficulty": "Medium",
      "problem_slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
      "topics": [
        "String",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Missing Genetic Value in Each Subtree",
      "problem_id": "2131",
      "frontend_id": "2003",
      "difficulty": "Hard",
      "problem_slug": "smallest-missing-genetic-value-in-each-subtree",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Union Find"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Pairs With Absolute Difference K",
      "problem_id": "2116",
      "frontend_id": "2006",
      "difficulty": "Easy",
      "problem_slug": "count-number-of-pairs-with-absolute-difference-k",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Original Array From Doubled Array",
      "problem_id": "2117",
      "frontend_id": "2007",
      "difficulty": "Medium",
      "problem_slug": "find-original-array-from-doubled-array",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Earnings From Taxi",
      "problem_id": "2118",
      "frontend_id": "2008",
      "difficulty": "Medium",
      "problem_slug": "maximum-earnings-from-taxi",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make Array Continuous",
      "problem_id": "2119",
      "frontend_id": "2009",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-operations-to-make-array-continuous",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Final Value of Variable After Performing Operations",
      "problem_id": "2137",
      "frontend_id": "2011",
      "difficulty": "Easy",
      "problem_slug": "final-value-of-variable-after-performing-operations",
      "topics": [
        "Array",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Beauty in the Array",
      "problem_id": "2138",
      "frontend_id": "2012",
      "difficulty": "Medium",
      "problem_slug": "sum-of-beauty-in-the-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Detect Squares",
      "problem_id": "2139",
      "frontend_id": "2013",
      "difficulty": "Medium",
      "problem_slug": "detect-squares",
      "topics": [
        "Array",
        "Hash Table",
        "Design",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Subsequence Repeated k Times",
      "problem_id": "2140",
      "frontend_id": "2014",
      "difficulty": "Hard",
      "problem_slug": "longest-subsequence-repeated-k-times",
      "topics": [
        "String",
        "Backtracking",
        "Greedy",
        "Counting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Difference Between Increasing Elements",
      "problem_id": "2144",
      "frontend_id": "2016",
      "difficulty": "Easy",
      "problem_slug": "maximum-difference-between-increasing-elements",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Grid Game",
      "problem_id": "2145",
      "frontend_id": "2017",
      "difficulty": "Medium",
      "problem_slug": "grid-game",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Word Can Be Placed In Crossword",
      "problem_id": "2146",
      "frontend_id": "2018",
      "difficulty": "Medium",
      "problem_slug": "check-if-word-can-be-placed-in-crossword",
      "topics": [
        "Array",
        "Matrix",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Score of Students Solving Math Expression",
      "problem_id": "2147",
      "frontend_id": "2019",
      "difficulty": "Hard",
      "problem_slug": "the-score-of-students-solving-math-expression",
      "topics": [
        "Array",
        "Math",
        "String",
        "Dynamic Programming",
        "Stack",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert 1D Array Into 2D Array",
      "problem_id": "2132",
      "frontend_id": "2022",
      "difficulty": "Easy",
      "problem_slug": "convert-1d-array-into-2d-array",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Pairs of Strings With Concatenation Equal to Target",
      "problem_id": "2133",
      "frontend_id": "2023",
      "difficulty": "Medium",
      "problem_slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Confusion of an Exam",
      "problem_id": "2134",
      "frontend_id": "2024",
      "difficulty": "Medium",
      "problem_slug": "maximize-the-confusion-of-an-exam",
      "topics": [
        "String",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Ways to Partition an Array",
      "problem_id": "2135",
      "frontend_id": "2025",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-ways-to-partition-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Counting",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Convert String",
      "problem_id": "2154",
      "frontend_id": "2027",
      "difficulty": "Easy",
      "problem_slug": "minimum-moves-to-convert-string",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Missing Observations",
      "problem_id": "2155",
      "frontend_id": "2028",
      "difficulty": "Medium",
      "problem_slug": "find-missing-observations",
      "topics": [
        "Array",
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Game IX",
      "problem_id": "2156",
      "frontend_id": "2029",
      "difficulty": "Medium",
      "problem_slug": "stone-game-ix",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Counting",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
      "problem_id": "2157",
      "frontend_id": "2030",
      "difficulty": "Hard",
      "problem_slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
      "topics": [
        "String",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Two Out of Three",
      "problem_id": "2159",
      "frontend_id": "2032",
      "difficulty": "Easy",
      "problem_slug": "two-out-of-three",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make a Uni-Value Grid",
      "problem_id": "2160",
      "frontend_id": "2033",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-a-uni-value-grid",
      "topics": [
        "Array",
        "Math",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stock Price Fluctuation ",
      "problem_id": "2161",
      "frontend_id": "2034",
      "difficulty": "Medium",
      "problem_slug": "stock-price-fluctuation",
      "topics": [
        "Hash Table",
        "Design",
        "Heap (Priority Queue)",
        "Data Stream",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
      "problem_id": "2162",
      "frontend_id": "2035",
      "difficulty": "Hard",
      "problem_slug": "partition-array-into-two-arrays-to-minimize-sum-difference",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Dynamic Programming",
        "Bit Manipulation",
        "Ordered Set",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Moves to Seat Everyone",
      "problem_id": "2148",
      "frontend_id": "2037",
      "difficulty": "Easy",
      "problem_slug": "minimum-number-of-moves-to-seat-everyone",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
      "problem_id": "2149",
      "frontend_id": "2038",
      "difficulty": "Medium",
      "problem_slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
      "topics": [
        "Math",
        "String",
        "Greedy",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Time When the Network Becomes Idle",
      "problem_id": "2151",
      "frontend_id": "2039",
      "difficulty": "Medium",
      "problem_slug": "the-time-when-the-network-becomes-idle",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Smallest Product of Two Sorted Arrays",
      "problem_id": "2150",
      "frontend_id": "2040",
      "difficulty": "Hard",
      "problem_slug": "kth-smallest-product-of-two-sorted-arrays",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Numbers Are Ascending in a Sentence",
      "problem_id": "2168",
      "frontend_id": "2042",
      "difficulty": "Easy",
      "problem_slug": "check-if-numbers-are-ascending-in-a-sentence",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Simple Bank System",
      "problem_id": "2169",
      "frontend_id": "2043",
      "difficulty": "Medium",
      "problem_slug": "simple-bank-system",
      "topics": [
        "Array",
        "Hash Table",
        "Design",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Maximum Bitwise-OR Subsets",
      "problem_id": "2170",
      "frontend_id": "2044",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-maximum-bitwise-or-subsets",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Second Minimum Time to Reach Destination",
      "problem_id": "2171",
      "frontend_id": "2045",
      "difficulty": "Hard",
      "problem_slug": "second-minimum-time-to-reach-destination",
      "topics": [
        "Breadth-First Search",
        "Graph",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Valid Words in a Sentence",
      "problem_id": "2173",
      "frontend_id": "2047",
      "difficulty": "Easy",
      "problem_slug": "number-of-valid-words-in-a-sentence",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Next Greater Numerically Balanced Number",
      "problem_id": "2174",
      "frontend_id": "2048",
      "difficulty": "Medium",
      "problem_slug": "next-greater-numerically-balanced-number",
      "topics": [
        "Hash Table",
        "Math",
        "Backtracking",
        "Counting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Nodes With the Highest Score",
      "problem_id": "2175",
      "frontend_id": "2049",
      "difficulty": "Medium",
      "problem_slug": "count-nodes-with-the-highest-score",
      "topics": [
        "Array",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Parallel Courses III",
      "problem_id": "2176",
      "frontend_id": "2050",
      "difficulty": "Hard",
      "problem_slug": "parallel-courses-iii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Distinct String in an Array",
      "problem_id": "2163",
      "frontend_id": "2053",
      "difficulty": "Easy",
      "problem_slug": "kth-distinct-string-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Two Best Non-Overlapping Events",
      "problem_id": "2164",
      "frontend_id": "2054",
      "difficulty": "Medium",
      "problem_slug": "two-best-non-overlapping-events",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Plates Between Candles",
      "problem_id": "2165",
      "frontend_id": "2055",
      "difficulty": "Medium",
      "problem_slug": "plates-between-candles",
      "topics": [
        "Array",
        "String",
        "Binary Search",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Valid Move Combinations On Chessboard",
      "problem_id": "2166",
      "frontend_id": "2056",
      "difficulty": "Hard",
      "problem_slug": "number-of-valid-move-combinations-on-chessboard",
      "topics": [
        "Array",
        "String",
        "Backtracking",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Index With Equal Value",
      "problem_id": "2181",
      "frontend_id": "2057",
      "difficulty": "Easy",
      "problem_slug": "smallest-index-with-equal-value",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
      "problem_id": "2182",
      "frontend_id": "2058",
      "difficulty": "Medium",
      "problem_slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Convert Number",
      "problem_id": "2183",
      "frontend_id": "2059",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-convert-number",
      "topics": [
        "Array",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if an Original String Exists Given Two Encoded Strings",
      "problem_id": "2184",
      "frontend_id": "2060",
      "difficulty": "Hard",
      "problem_slug": "check-if-an-original-string-exists-given-two-encoded-strings",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Vowel Substrings of a String",
      "problem_id": "2186",
      "frontend_id": "2062",
      "difficulty": "Easy",
      "problem_slug": "count-vowel-substrings-of-a-string",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Vowels of All Substrings",
      "problem_id": "2187",
      "frontend_id": "2063",
      "difficulty": "Medium",
      "problem_slug": "vowels-of-all-substrings",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimized Maximum of Products Distributed to Any Store",
      "problem_id": "2188",
      "frontend_id": "2064",
      "difficulty": "Medium",
      "problem_slug": "minimized-maximum-of-products-distributed-to-any-store",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Path Quality of a Graph",
      "problem_id": "2189",
      "frontend_id": "2065",
      "difficulty": "Hard",
      "problem_slug": "maximum-path-quality-of-a-graph",
      "topics": [
        "Array",
        "Backtracking",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check Whether Two Strings are Almost Equivalent",
      "problem_id": "2177",
      "frontend_id": "2068",
      "difficulty": "Easy",
      "problem_slug": "check-whether-two-strings-are-almost-equivalent",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Walking Robot Simulation II",
      "problem_id": "2178",
      "frontend_id": "2069",
      "difficulty": "Medium",
      "problem_slug": "walking-robot-simulation-ii",
      "topics": [
        "Design",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Beautiful Item for Each Query",
      "problem_id": "2179",
      "frontend_id": "2070",
      "difficulty": "Medium",
      "problem_slug": "most-beautiful-item-for-each-query",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Tasks You Can Assign",
      "problem_id": "2180",
      "frontend_id": "2071",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-tasks-you-can-assign",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Greedy",
        "Queue",
        "Sorting",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Time Needed to Buy Tickets",
      "problem_id": "2195",
      "frontend_id": "2073",
      "difficulty": "Easy",
      "problem_slug": "time-needed-to-buy-tickets",
      "topics": [
        "Array",
        "Queue",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Nodes in Even Length Groups",
      "problem_id": "2196",
      "frontend_id": "2074",
      "difficulty": "Medium",
      "problem_slug": "reverse-nodes-in-even-length-groups",
      "topics": [
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decode the Slanted Ciphertext",
      "problem_id": "2197",
      "frontend_id": "2075",
      "difficulty": "Medium",
      "problem_slug": "decode-the-slanted-ciphertext",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Process Restricted Friend Requests",
      "problem_id": "2198",
      "frontend_id": "2076",
      "difficulty": "Hard",
      "problem_slug": "process-restricted-friend-requests",
      "topics": [
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Two Furthest Houses With Different Colors",
      "problem_id": "2199",
      "frontend_id": "2078",
      "difficulty": "Easy",
      "problem_slug": "two-furthest-houses-with-different-colors",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Watering Plants",
      "problem_id": "1310",
      "frontend_id": "2079",
      "difficulty": "Medium",
      "problem_slug": "watering-plants",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Range Frequency Queries",
      "problem_id": "1294",
      "frontend_id": "2080",
      "difficulty": "Medium",
      "problem_slug": "range-frequency-queries",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Design",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of k-Mirror Numbers",
      "problem_id": "2202",
      "frontend_id": "2081",
      "difficulty": "Hard",
      "problem_slug": "sum-of-k-mirror-numbers",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Common Words With One Occurrence",
      "problem_id": "2190",
      "frontend_id": "2085",
      "difficulty": "Easy",
      "problem_slug": "count-common-words-with-one-occurrence",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Food Buckets to Feed the Hamsters",
      "problem_id": "2191",
      "frontend_id": "2086",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
      "topics": [
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost Homecoming of a Robot in a Grid",
      "problem_id": "2192",
      "frontend_id": "2087",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Fertile Pyramids in a Land",
      "problem_id": "2193",
      "frontend_id": "2088",
      "difficulty": "Hard",
      "problem_slug": "count-fertile-pyramids-in-a-land",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Target Indices After Sorting Array",
      "problem_id": "2210",
      "frontend_id": "2089",
      "difficulty": "Easy",
      "problem_slug": "find-target-indices-after-sorting-array",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K Radius Subarray Averages",
      "problem_id": "2211",
      "frontend_id": "2090",
      "difficulty": "Medium",
      "problem_slug": "k-radius-subarray-averages",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Removing Minimum and Maximum From Array",
      "problem_id": "2212",
      "frontend_id": "2091",
      "difficulty": "Medium",
      "problem_slug": "removing-minimum-and-maximum-from-array",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All People With Secret",
      "problem_id": "2213",
      "frontend_id": "2092",
      "difficulty": "Hard",
      "problem_slug": "find-all-people-with-secret",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Finding 3-Digit Even Numbers",
      "problem_id": "2215",
      "frontend_id": "2094",
      "difficulty": "Easy",
      "problem_slug": "finding-3-digit-even-numbers",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete the Middle Node of a Linked List",
      "problem_id": "2216",
      "frontend_id": "2095",
      "difficulty": "Medium",
      "problem_slug": "delete-the-middle-node-of-a-linked-list",
      "topics": [
        "Linked List",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Step-By-Step Directions From a Binary Tree Node to Another",
      "problem_id": "2217",
      "frontend_id": "2096",
      "difficulty": "Medium",
      "problem_slug": "step-by-step-directions-from-a-binary-tree-node-to-another",
      "topics": [
        "String",
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Arrangement of Pairs",
      "problem_id": "2201",
      "frontend_id": "2097",
      "difficulty": "Hard",
      "problem_slug": "valid-arrangement-of-pairs",
      "topics": [
        "Depth-First Search",
        "Graph",
        "Eulerian Circuit"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Subsequence of Length K With the Largest Sum",
      "problem_id": "2204",
      "frontend_id": "2099",
      "difficulty": "Easy",
      "problem_slug": "find-subsequence-of-length-k-with-the-largest-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Good Days to Rob the Bank",
      "problem_id": "2205",
      "frontend_id": "2100",
      "difficulty": "Medium",
      "problem_slug": "find-good-days-to-rob-the-bank",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Detonate the Maximum Bombs",
      "problem_id": "2206",
      "frontend_id": "2101",
      "difficulty": "Medium",
      "problem_slug": "detonate-the-maximum-bombs",
      "topics": [
        "Array",
        "Math",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sequentially Ordinal Rank Tracker",
      "problem_id": "2207",
      "frontend_id": "2102",
      "difficulty": "Hard",
      "problem_slug": "sequentially-ordinal-rank-tracker",
      "topics": [
        "Design",
        "Heap (Priority Queue)",
        "Data Stream",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rings and Rods",
      "problem_id": "2226",
      "frontend_id": "2103",
      "difficulty": "Easy",
      "problem_slug": "rings-and-rods",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Subarray Ranges",
      "problem_id": "2227",
      "frontend_id": "2104",
      "difficulty": "Medium",
      "problem_slug": "sum-of-subarray-ranges",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Watering Plants II",
      "problem_id": "2228",
      "frontend_id": "2105",
      "difficulty": "Medium",
      "problem_slug": "watering-plants-ii",
      "topics": [
        "Array",
        "Two Pointers",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Fruits Harvested After at Most K Steps",
      "problem_id": "2229",
      "frontend_id": "2106",
      "difficulty": "Hard",
      "problem_slug": "maximum-fruits-harvested-after-at-most-k-steps",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find First Palindromic String in the Array",
      "problem_id": "2231",
      "frontend_id": "2108",
      "difficulty": "Easy",
      "problem_slug": "find-first-palindromic-string-in-the-array",
      "topics": [
        "Array",
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Adding Spaces to a String",
      "problem_id": "2232",
      "frontend_id": "2109",
      "difficulty": "Medium",
      "problem_slug": "adding-spaces-to-a-string",
      "topics": [
        "Array",
        "Two Pointers",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Smooth Descent Periods of a Stock",
      "problem_id": "2233",
      "frontend_id": "2110",
      "difficulty": "Medium",
      "problem_slug": "number-of-smooth-descent-periods-of-a-stock",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make the Array K-Increasing",
      "problem_id": "2234",
      "frontend_id": "2111",
      "difficulty": "Hard",
      "problem_slug": "minimum-operations-to-make-the-array-k-increasing",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Words Found in Sentences",
      "problem_id": "2219",
      "frontend_id": "2114",
      "difficulty": "Easy",
      "problem_slug": "maximum-number-of-words-found-in-sentences",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Possible Recipes from Given Supplies",
      "problem_id": "2220",
      "frontend_id": "2115",
      "difficulty": "Medium",
      "problem_slug": "find-all-possible-recipes-from-given-supplies",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if a Parentheses String Can Be Valid",
      "problem_id": "2221",
      "frontend_id": "2116",
      "difficulty": "Medium",
      "problem_slug": "check-if-a-parentheses-string-can-be-valid",
      "topics": [
        "String",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Abbreviating the Product of a Range",
      "problem_id": "2222",
      "frontend_id": "2117",
      "difficulty": "Hard",
      "problem_slug": "abbreviating-the-product-of-a-range",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "A Number After a Double Reversal",
      "problem_id": "2238",
      "frontend_id": "2119",
      "difficulty": "Easy",
      "problem_slug": "a-number-after-a-double-reversal",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Execution of All Suffix Instructions Staying in a Grid",
      "problem_id": "2239",
      "frontend_id": "2120",
      "difficulty": "Medium",
      "problem_slug": "execution-of-all-suffix-instructions-staying-in-a-grid",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Intervals Between Identical Elements",
      "problem_id": "2240",
      "frontend_id": "2121",
      "difficulty": "Medium",
      "problem_slug": "intervals-between-identical-elements",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Recover the Original Array",
      "problem_id": "2241",
      "frontend_id": "2122",
      "difficulty": "Hard",
      "problem_slug": "recover-the-original-array",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if All A's Appears Before All B's",
      "problem_id": "2243",
      "frontend_id": "2124",
      "difficulty": "Easy",
      "problem_slug": "check-if-all-as-appears-before-all-bs",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Laser Beams in a Bank",
      "problem_id": "2244",
      "frontend_id": "2125",
      "difficulty": "Medium",
      "problem_slug": "number-of-laser-beams-in-a-bank",
      "topics": [
        "Array",
        "Math",
        "String",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Destroying Asteroids",
      "problem_id": "2245",
      "frontend_id": "2126",
      "difficulty": "Medium",
      "problem_slug": "destroying-asteroids",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Employees to Be Invited to a Meeting",
      "problem_id": "2246",
      "frontend_id": "2127",
      "difficulty": "Hard",
      "problem_slug": "maximum-employees-to-be-invited-to-a-meeting",
      "topics": [
        "Depth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Capitalize the Title",
      "problem_id": "2235",
      "frontend_id": "2129",
      "difficulty": "Easy",
      "problem_slug": "capitalize-the-title",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Twin Sum of a Linked List",
      "problem_id": "2236",
      "frontend_id": "2130",
      "difficulty": "Medium",
      "problem_slug": "maximum-twin-sum-of-a-linked-list",
      "topics": [
        "Linked List",
        "Two Pointers",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindrome by Concatenating Two Letter Words",
      "problem_id": "2237",
      "frontend_id": "2131",
      "difficulty": "Medium",
      "problem_slug": "longest-palindrome-by-concatenating-two-letter-words",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stamping the Grid",
      "problem_id": "2200",
      "frontend_id": "2132",
      "difficulty": "Hard",
      "problem_slug": "stamping-the-grid",
      "topics": [
        "Array",
        "Greedy",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Every Row and Column Contains All Numbers",
      "problem_id": "2254",
      "frontend_id": "2133",
      "difficulty": "Easy",
      "problem_slug": "check-if-every-row-and-column-contains-all-numbers",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Swaps to Group All 1's Together II",
      "problem_id": "2255",
      "frontend_id": "2134",
      "difficulty": "Medium",
      "problem_slug": "minimum-swaps-to-group-all-1s-together-ii",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Words Obtained After Adding a Letter",
      "problem_id": "2256",
      "frontend_id": "2135",
      "difficulty": "Medium",
      "problem_slug": "count-words-obtained-after-adding-a-letter",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Earliest Possible Day of Full Bloom",
      "problem_id": "2257",
      "frontend_id": "2136",
      "difficulty": "Hard",
      "problem_slug": "earliest-possible-day-of-full-bloom",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide a String Into Groups of Size k",
      "problem_id": "2260",
      "frontend_id": "2138",
      "difficulty": "Easy",
      "problem_slug": "divide-a-string-into-groups-of-size-k",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Reach Target Score",
      "problem_id": "1303",
      "frontend_id": "2139",
      "difficulty": "Medium",
      "problem_slug": "minimum-moves-to-reach-target-score",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Solving Questions With Brainpower",
      "problem_id": "2262",
      "frontend_id": "2140",
      "difficulty": "Medium",
      "problem_slug": "solving-questions-with-brainpower",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Running Time of N Computers",
      "problem_id": "2263",
      "frontend_id": "2141",
      "difficulty": "Hard",
      "problem_slug": "maximum-running-time-of-n-computers",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost of Buying Candies With Discount",
      "problem_id": "2248",
      "frontend_id": "2144",
      "difficulty": "Easy",
      "problem_slug": "minimum-cost-of-buying-candies-with-discount",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Hidden Sequences",
      "problem_id": "2249",
      "frontend_id": "2145",
      "difficulty": "Medium",
      "problem_slug": "count-the-hidden-sequences",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K Highest Ranked Items Within a Price Range",
      "problem_id": "2250",
      "frontend_id": "2146",
      "difficulty": "Medium",
      "problem_slug": "k-highest-ranked-items-within-a-price-range",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Divide a Long Corridor",
      "problem_id": "2251",
      "frontend_id": "2147",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-divide-a-long-corridor",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Elements With Strictly Smaller and Greater Elements ",
      "problem_id": "2269",
      "frontend_id": "2148",
      "difficulty": "Easy",
      "problem_slug": "count-elements-with-strictly-smaller-and-greater-elements",
      "topics": [
        "Array",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearrange Array Elements by Sign",
      "problem_id": "2271",
      "frontend_id": "2149",
      "difficulty": "Medium",
      "problem_slug": "rearrange-array-elements-by-sign",
      "topics": [
        "Array",
        "Two Pointers",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Lonely Numbers in the Array",
      "problem_id": "2270",
      "frontend_id": "2150",
      "difficulty": "Medium",
      "problem_slug": "find-all-lonely-numbers-in-the-array",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Good People Based on Statements",
      "problem_id": "2272",
      "frontend_id": "2151",
      "difficulty": "Hard",
      "problem_slug": "maximum-good-people-based-on-statements",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Keep Multiplying Found Values by Two",
      "problem_id": "2274",
      "frontend_id": "2154",
      "difficulty": "Easy",
      "problem_slug": "keep-multiplying-found-values-by-two",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "All Divisions With the Highest Score of a Binary Array",
      "problem_id": "2261",
      "frontend_id": "2155",
      "difficulty": "Medium",
      "problem_slug": "all-divisions-with-the-highest-score-of-a-binary-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Substring With Given Hash Value",
      "problem_id": "2275",
      "frontend_id": "2156",
      "difficulty": "Hard",
      "problem_slug": "find-substring-with-given-hash-value",
      "topics": [
        "String",
        "Sliding Window",
        "Rolling Hash",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Groups of Strings",
      "problem_id": "2276",
      "frontend_id": "2157",
      "difficulty": "Hard",
      "problem_slug": "groups-of-strings",
      "topics": [
        "String",
        "Bit Manipulation",
        "Union Find"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Sum of Four Digit Number After Splitting Digits",
      "problem_id": "2264",
      "frontend_id": "2160",
      "difficulty": "Easy",
      "problem_slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
      "topics": [
        "Math",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array According to Given Pivot",
      "problem_id": "2265",
      "frontend_id": "2161",
      "difficulty": "Medium",
      "problem_slug": "partition-array-according-to-given-pivot",
      "topics": [
        "Array",
        "Two Pointers",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Set Cooking Time",
      "problem_id": "2266",
      "frontend_id": "2162",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-to-set-cooking-time",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Difference in Sums After Removal of Elements",
      "problem_id": "2267",
      "frontend_id": "2163",
      "difficulty": "Hard",
      "problem_slug": "minimum-difference-in-sums-after-removal-of-elements",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Even and Odd Indices Independently",
      "problem_id": "2283",
      "frontend_id": "2164",
      "difficulty": "Easy",
      "problem_slug": "sort-even-and-odd-indices-independently",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Value of the Rearranged Number",
      "problem_id": "2284",
      "frontend_id": "2165",
      "difficulty": "Medium",
      "problem_slug": "smallest-value-of-the-rearranged-number",
      "topics": [
        "Math",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Bitset",
      "problem_id": "2285",
      "frontend_id": "2166",
      "difficulty": "Medium",
      "problem_slug": "design-bitset",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
      "problem_id": "2286",
      "frontend_id": "2167",
      "difficulty": "Hard",
      "problem_slug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Operations to Obtain Zero",
      "problem_id": "2288",
      "frontend_id": "2169",
      "difficulty": "Easy",
      "problem_slug": "count-operations-to-obtain-zero",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make the Array Alternating",
      "problem_id": "2289",
      "frontend_id": "2170",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-the-array-alternating",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Removing Minimum Number of Magic Beans",
      "problem_id": "2290",
      "frontend_id": "2171",
      "difficulty": "Medium",
      "problem_slug": "removing-minimum-number-of-magic-beans",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum AND Sum of Array",
      "problem_id": "2291",
      "frontend_id": "2172",
      "difficulty": "Hard",
      "problem_slug": "maximum-and-sum-of-array",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Equal and Divisible Pairs in an Array",
      "problem_id": "2277",
      "frontend_id": "2176",
      "difficulty": "Easy",
      "problem_slug": "count-equal-and-divisible-pairs-in-an-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Three Consecutive Integers That Sum to a Given Number",
      "problem_id": "2278",
      "frontend_id": "2177",
      "difficulty": "Medium",
      "problem_slug": "find-three-consecutive-integers-that-sum-to-a-given-number",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Split of Positive Even Integers",
      "problem_id": "2279",
      "frontend_id": "2178",
      "difficulty": "Medium",
      "problem_slug": "maximum-split-of-positive-even-integers",
      "topics": [
        "Math",
        "Backtracking",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Good Triplets in an Array",
      "problem_id": "2280",
      "frontend_id": "2179",
      "difficulty": "Hard",
      "problem_slug": "count-good-triplets-in-an-array",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Merge Sort",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Integers With Even Digit Sum",
      "problem_id": "2298",
      "frontend_id": "2180",
      "difficulty": "Easy",
      "problem_slug": "count-integers-with-even-digit-sum",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Nodes in Between Zeros",
      "problem_id": "2299",
      "frontend_id": "2181",
      "difficulty": "Medium",
      "problem_slug": "merge-nodes-in-between-zeros",
      "topics": [
        "Linked List",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct String With Repeat Limit",
      "problem_id": "2300",
      "frontend_id": "2182",
      "difficulty": "Medium",
      "problem_slug": "construct-string-with-repeat-limit",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Heap (Priority Queue)",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Array Pairs Divisible by K",
      "problem_id": "2301",
      "frontend_id": "2183",
      "difficulty": "Hard",
      "problem_slug": "count-array-pairs-divisible-by-k",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Counting Words With a Given Prefix",
      "problem_id": "2292",
      "frontend_id": "2185",
      "difficulty": "Easy",
      "problem_slug": "counting-words-with-a-given-prefix",
      "topics": [
        "Array",
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Steps to Make Two Strings Anagram II",
      "problem_id": "2293",
      "frontend_id": "2186",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Complete Trips",
      "problem_id": "2294",
      "frontend_id": "2187",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-complete-trips",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Finish the Race",
      "problem_id": "2295",
      "frontend_id": "2188",
      "difficulty": "Hard",
      "problem_slug": "minimum-time-to-finish-the-race",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Frequent Number Following Key In an Array",
      "problem_id": "2312",
      "frontend_id": "2190",
      "difficulty": "Easy",
      "problem_slug": "most-frequent-number-following-key-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort the Jumbled Numbers",
      "problem_id": "1333",
      "frontend_id": "2191",
      "difficulty": "Medium",
      "problem_slug": "sort-the-jumbled-numbers",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "All Ancestors of a Node in a Directed Acyclic Graph",
      "problem_id": "1431",
      "frontend_id": "2192",
      "difficulty": "Medium",
      "problem_slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Moves to Make Palindrome",
      "problem_id": "1356",
      "frontend_id": "2193",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-moves-to-make-palindrome",
      "topics": [
        "Two Pointers",
        "String",
        "Greedy",
        "Binary Indexed Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cells in a Range on an Excel Sheet",
      "problem_id": "2304",
      "frontend_id": "2194",
      "difficulty": "Easy",
      "problem_slug": "cells-in-a-range-on-an-excel-sheet",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Append K Integers With Minimal Sum",
      "problem_id": "2305",
      "frontend_id": "2195",
      "difficulty": "Medium",
      "problem_slug": "append-k-integers-with-minimal-sum",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Create Binary Tree From Descriptions",
      "problem_id": "2306",
      "frontend_id": "2196",
      "difficulty": "Medium",
      "problem_slug": "create-binary-tree-from-descriptions",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace Non-Coprime Numbers in Array",
      "problem_id": "2307",
      "frontend_id": "2197",
      "difficulty": "Hard",
      "problem_slug": "replace-non-coprime-numbers-in-array",
      "topics": [
        "Array",
        "Math",
        "Stack",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All K-Distant Indices in an Array",
      "problem_id": "2320",
      "frontend_id": "2200",
      "difficulty": "Easy",
      "problem_slug": "find-all-k-distant-indices-in-an-array",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Artifacts That Can Be Extracted",
      "problem_id": "1312",
      "frontend_id": "2201",
      "difficulty": "Medium",
      "problem_slug": "count-artifacts-that-can-be-extracted",
      "topics": [
        "Array",
        "Hash Table",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Topmost Element After K Moves",
      "problem_id": "1346",
      "frontend_id": "2202",
      "difficulty": "Medium",
      "problem_slug": "maximize-the-topmost-element-after-k-moves",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Weighted Subgraph With the Required Paths",
      "problem_id": "2321",
      "frontend_id": "2203",
      "difficulty": "Hard",
      "problem_slug": "minimum-weighted-subgraph-with-the-required-paths",
      "topics": [
        "Graph",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide Array Into Equal Pairs",
      "problem_id": "2308",
      "frontend_id": "2206",
      "difficulty": "Easy",
      "problem_slug": "divide-array-into-equal-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Number of Subsequences in a String",
      "problem_id": "2309",
      "frontend_id": "2207",
      "difficulty": "Medium",
      "problem_slug": "maximize-number-of-subsequences-in-a-string",
      "topics": [
        "String",
        "Greedy",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Halve Array Sum",
      "problem_id": "2310",
      "frontend_id": "2208",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-halve-array-sum",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum White Tiles After Covering With Carpets",
      "problem_id": "2311",
      "frontend_id": "2209",
      "difficulty": "Hard",
      "problem_slug": "minimum-white-tiles-after-covering-with-carpets",
      "topics": [
        "String",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Hills and Valleys in an Array",
      "problem_id": "2316",
      "frontend_id": "2210",
      "difficulty": "Easy",
      "problem_slug": "count-hills-and-valleys-in-an-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Collisions on a Road",
      "problem_id": "2317",
      "frontend_id": "2211",
      "difficulty": "Medium",
      "problem_slug": "count-collisions-on-a-road",
      "topics": [
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Points in an Archery Competition",
      "problem_id": "2318",
      "frontend_id": "2212",
      "difficulty": "Medium",
      "problem_slug": "maximum-points-in-an-archery-competition",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Substring of One Repeating Character",
      "problem_id": "2319",
      "frontend_id": "2213",
      "difficulty": "Hard",
      "problem_slug": "longest-substring-of-one-repeating-character",
      "topics": [
        "Array",
        "String",
        "Segment Tree",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Difference of Two Arrays",
      "problem_id": "1392",
      "frontend_id": "2215",
      "difficulty": "Easy",
      "problem_slug": "find-the-difference-of-two-arrays",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Deletions to Make Array Beautiful",
      "problem_id": "1355",
      "frontend_id": "2216",
      "difficulty": "Medium",
      "problem_slug": "minimum-deletions-to-make-array-beautiful",
      "topics": [
        "Array",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Palindrome With Fixed Length",
      "problem_id": "1375",
      "frontend_id": "2217",
      "difficulty": "Medium",
      "problem_slug": "find-palindrome-with-fixed-length",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Value of K Coins From Piles",
      "problem_id": "1393",
      "frontend_id": "2218",
      "difficulty": "Hard",
      "problem_slug": "maximum-value-of-k-coins-from-piles",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Bit Flips to Convert Number",
      "problem_id": "2323",
      "frontend_id": "2220",
      "difficulty": "Easy",
      "problem_slug": "minimum-bit-flips-to-convert-number",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Triangular Sum of an Array",
      "problem_id": "2324",
      "frontend_id": "2221",
      "difficulty": "Medium",
      "problem_slug": "find-triangular-sum-of-an-array",
      "topics": [
        "Array",
        "Math",
        "Simulation",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Select Buildings",
      "problem_id": "2325",
      "frontend_id": "2222",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-to-select-buildings",
      "topics": [
        "String",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Scores of Built Strings",
      "problem_id": "2326",
      "frontend_id": "2223",
      "difficulty": "Hard",
      "problem_slug": "sum-of-scores-of-built-strings",
      "topics": [
        "String",
        "Binary Search",
        "Rolling Hash",
        "Suffix Array",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Convert Time",
      "problem_id": "2345",
      "frontend_id": "2224",
      "difficulty": "Easy",
      "problem_slug": "minimum-number-of-operations-to-convert-time",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Players With Zero or One Losses",
      "problem_id": "1354",
      "frontend_id": "2225",
      "difficulty": "Medium",
      "problem_slug": "find-players-with-zero-or-one-losses",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Candies Allocated to K Children",
      "problem_id": "1335",
      "frontend_id": "2226",
      "difficulty": "Medium",
      "problem_slug": "maximum-candies-allocated-to-k-children",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Encrypt and Decrypt Strings",
      "problem_id": "1433",
      "frontend_id": "2227",
      "difficulty": "Hard",
      "problem_slug": "encrypt-and-decrypt-strings",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Design",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Number After Digit Swaps by Parity",
      "problem_id": "2327",
      "frontend_id": "2231",
      "difficulty": "Easy",
      "problem_slug": "largest-number-after-digit-swaps-by-parity",
      "topics": [
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Result by Adding Parentheses to Expression",
      "problem_id": "2328",
      "frontend_id": "2232",
      "difficulty": "Medium",
      "problem_slug": "minimize-result-by-adding-parentheses-to-expression",
      "topics": [
        "String",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product After K Increments",
      "problem_id": "2329",
      "frontend_id": "2233",
      "difficulty": "Medium",
      "problem_slug": "maximum-product-after-k-increments",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Total Beauty of the Gardens",
      "problem_id": "2330",
      "frontend_id": "2234",
      "difficulty": "Hard",
      "problem_slug": "maximum-total-beauty-of-the-gardens",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Greedy",
        "Sorting",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add Two Integers",
      "problem_id": "2383",
      "frontend_id": "2235",
      "difficulty": "Easy",
      "problem_slug": "add-two-integers",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Root Equals Sum of Children",
      "problem_id": "2384",
      "frontend_id": "2236",
      "difficulty": "Easy",
      "problem_slug": "root-equals-sum-of-children",
      "topics": [
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Closest Number to Zero",
      "problem_id": "2350",
      "frontend_id": "2239",
      "difficulty": "Easy",
      "problem_slug": "find-closest-number-to-zero",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Buy Pens and Pencils",
      "problem_id": "2351",
      "frontend_id": "2240",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-to-buy-pens-and-pencils",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design an ATM Machine",
      "problem_id": "2352",
      "frontend_id": "2241",
      "difficulty": "Medium",
      "problem_slug": "design-an-atm-machine",
      "topics": [
        "Array",
        "Greedy",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score of a Node Sequence",
      "problem_id": "2353",
      "frontend_id": "2242",
      "difficulty": "Hard",
      "problem_slug": "maximum-score-of-a-node-sequence",
      "topics": [
        "Array",
        "Graph",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Calculate Digit Sum of a String",
      "problem_id": "2361",
      "frontend_id": "2243",
      "difficulty": "Easy",
      "problem_slug": "calculate-digit-sum-of-a-string",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Rounds to Complete All Tasks",
      "problem_id": "2362",
      "frontend_id": "2244",
      "difficulty": "Medium",
      "problem_slug": "minimum-rounds-to-complete-all-tasks",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Trailing Zeros in a Cornered Path",
      "problem_id": "2363",
      "frontend_id": "2245",
      "difficulty": "Medium",
      "problem_slug": "maximum-trailing-zeros-in-a-cornered-path",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Path With Different Adjacent Characters",
      "problem_id": "2364",
      "frontend_id": "2246",
      "difficulty": "Hard",
      "problem_slug": "longest-path-with-different-adjacent-characters",
      "topics": [
        "Array",
        "String",
        "Tree",
        "Depth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Intersection of Multiple Arrays",
      "problem_id": "2331",
      "frontend_id": "2248",
      "difficulty": "Easy",
      "problem_slug": "intersection-of-multiple-arrays",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Lattice Points Inside a Circle",
      "problem_id": "2332",
      "frontend_id": "2249",
      "difficulty": "Medium",
      "problem_slug": "count-lattice-points-inside-a-circle",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Geometry",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Rectangles Containing Each Point",
      "problem_id": "2333",
      "frontend_id": "2250",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-rectangles-containing-each-point",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Binary Indexed Tree",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Flowers in Full Bloom",
      "problem_id": "2334",
      "frontend_id": "2251",
      "difficulty": "Hard",
      "problem_slug": "number-of-flowers-in-full-bloom",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Sorting",
        "Prefix Sum",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Prefixes of a Given String",
      "problem_id": "2341",
      "frontend_id": "2255",
      "difficulty": "Easy",
      "problem_slug": "count-prefixes-of-a-given-string",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Average Difference",
      "problem_id": "2342",
      "frontend_id": "2256",
      "difficulty": "Medium",
      "problem_slug": "minimum-average-difference",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Unguarded Cells in the Grid",
      "problem_id": "2343",
      "frontend_id": "2257",
      "difficulty": "Medium",
      "problem_slug": "count-unguarded-cells-in-the-grid",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Escape the Spreading Fire",
      "problem_id": "2344",
      "frontend_id": "2258",
      "difficulty": "Hard",
      "problem_slug": "escape-the-spreading-fire",
      "topics": [
        "Array",
        "Binary Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Digit From Number to Maximize Result",
      "problem_id": "2337",
      "frontend_id": "2259",
      "difficulty": "Easy",
      "problem_slug": "remove-digit-from-number-to-maximize-result",
      "topics": [
        "String",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Consecutive Cards to Pick Up",
      "problem_id": "2338",
      "frontend_id": "2260",
      "difficulty": "Medium",
      "problem_slug": "minimum-consecutive-cards-to-pick-up",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K Divisible Elements Subarrays",
      "problem_id": "2339",
      "frontend_id": "2261",
      "difficulty": "Medium",
      "problem_slug": "k-divisible-elements-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Trie",
        "Rolling Hash",
        "Hash Function",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Total Appeal of A String",
      "problem_id": "2340",
      "frontend_id": "2262",
      "difficulty": "Hard",
      "problem_slug": "total-appeal-of-a-string",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest 3-Same-Digit Number in String",
      "problem_id": "2346",
      "frontend_id": "2264",
      "difficulty": "Easy",
      "problem_slug": "largest-3-same-digit-number-in-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Nodes Equal to Average of Subtree",
      "problem_id": "2347",
      "frontend_id": "2265",
      "difficulty": "Medium",
      "problem_slug": "count-nodes-equal-to-average-of-subtree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Texts",
      "problem_id": "2348",
      "frontend_id": "2266",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-texts",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": " Check if There Is a Valid Parentheses String Path",
      "problem_id": "2349",
      "frontend_id": "2267",
      "difficulty": "Hard",
      "problem_slug": "check-if-there-is-a-valid-parentheses-string-path",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the K-Beauty of a Number",
      "problem_id": "1430",
      "frontend_id": "2269",
      "difficulty": "Easy",
      "problem_slug": "find-the-k-beauty-of-a-number",
      "topics": [
        "Math",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Split Array",
      "problem_id": "2358",
      "frontend_id": "2270",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-to-split-array",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum White Tiles Covered by a Carpet",
      "problem_id": "2359",
      "frontend_id": "2271",
      "difficulty": "Medium",
      "problem_slug": "maximum-white-tiles-covered-by-a-carpet",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sliding Window",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Substring With Largest Variance",
      "problem_id": "2360",
      "frontend_id": "2272",
      "difficulty": "Hard",
      "problem_slug": "substring-with-largest-variance",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Resultant Array After Removing Anagrams",
      "problem_id": "1353",
      "frontend_id": "2273",
      "difficulty": "Easy",
      "problem_slug": "find-resultant-array-after-removing-anagrams",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Consecutive Floors Without Special Floors",
      "problem_id": "2355",
      "frontend_id": "2274",
      "difficulty": "Medium",
      "problem_slug": "maximum-consecutive-floors-without-special-floors",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Combination With Bitwise AND Greater Than Zero",
      "problem_id": "2356",
      "frontend_id": "2275",
      "difficulty": "Medium",
      "problem_slug": "largest-combination-with-bitwise-and-greater-than-zero",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Integers in Intervals",
      "problem_id": "2357",
      "frontend_id": "2276",
      "difficulty": "Hard",
      "problem_slug": "count-integers-in-intervals",
      "topics": [
        "Design",
        "Segment Tree",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Percentage of Letter in String",
      "problem_id": "2365",
      "frontend_id": "2278",
      "difficulty": "Easy",
      "problem_slug": "percentage-of-letter-in-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Bags With Full Capacity of Rocks",
      "problem_id": "2366",
      "frontend_id": "2279",
      "difficulty": "Medium",
      "problem_slug": "maximum-bags-with-full-capacity-of-rocks",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Lines to Represent a Line Chart",
      "problem_id": "2367",
      "frontend_id": "2280",
      "difficulty": "Medium",
      "problem_slug": "minimum-lines-to-represent-a-line-chart",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Sorting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Total Strength of Wizards",
      "problem_id": "2368",
      "frontend_id": "2281",
      "difficulty": "Hard",
      "problem_slug": "sum-of-total-strength-of-wizards",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Number Has Equal Digit Count and Digit Value",
      "problem_id": "2377",
      "frontend_id": "2283",
      "difficulty": "Easy",
      "problem_slug": "check-if-number-has-equal-digit-count-and-digit-value",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sender With Largest Word Count",
      "problem_id": "2378",
      "frontend_id": "2284",
      "difficulty": "Medium",
      "problem_slug": "sender-with-largest-word-count",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Total Importance of Roads",
      "problem_id": "2379",
      "frontend_id": "2285",
      "difficulty": "Medium",
      "problem_slug": "maximum-total-importance-of-roads",
      "topics": [
        "Greedy",
        "Graph",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Booking Concert Tickets in Groups",
      "problem_id": "2380",
      "frontend_id": "2286",
      "difficulty": "Hard",
      "problem_slug": "booking-concert-tickets-in-groups",
      "topics": [
        "Binary Search",
        "Design",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearrange Characters to Make Target String",
      "problem_id": "2372",
      "frontend_id": "2287",
      "difficulty": "Easy",
      "problem_slug": "rearrange-characters-to-make-target-string",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Discount to Prices",
      "problem_id": "2373",
      "frontend_id": "2288",
      "difficulty": "Medium",
      "problem_slug": "apply-discount-to-prices",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Steps to Make Array Non-decreasing",
      "problem_id": "2374",
      "frontend_id": "2289",
      "difficulty": "Medium",
      "problem_slug": "steps-to-make-array-non-decreasing",
      "topics": [
        "Array",
        "Linked List",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Obstacle Removal to Reach Corner",
      "problem_id": "2375",
      "frontend_id": "2290",
      "difficulty": "Hard",
      "problem_slug": "minimum-obstacle-removal-to-reach-corner",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Graph",
        "Heap (Priority Queue)",
        "Matrix",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Min Max Game",
      "problem_id": "2386",
      "frontend_id": "2293",
      "difficulty": "Easy",
      "problem_slug": "min-max-game",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array Such That Maximum Difference Is K",
      "problem_id": "2387",
      "frontend_id": "2294",
      "difficulty": "Medium",
      "problem_slug": "partition-array-such-that-maximum-difference-is-k",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace Elements in an Array",
      "problem_id": "2388",
      "frontend_id": "2295",
      "difficulty": "Medium",
      "problem_slug": "replace-elements-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design a Text Editor",
      "problem_id": "2389",
      "frontend_id": "2296",
      "difficulty": "Hard",
      "problem_slug": "design-a-text-editor",
      "topics": [
        "Linked List",
        "String",
        "Stack",
        "Design",
        "Simulation",
        "Doubly-Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Strong Password Checker II",
      "problem_id": "2391",
      "frontend_id": "2299",
      "difficulty": "Easy",
      "problem_slug": "strong-password-checker-ii",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Successful Pairs of Spells and Potions",
      "problem_id": "2392",
      "frontend_id": "2300",
      "difficulty": "Medium",
      "problem_slug": "successful-pairs-of-spells-and-potions",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Match Substring After Replacement",
      "problem_id": "2393",
      "frontend_id": "2301",
      "difficulty": "Hard",
      "problem_slug": "match-substring-after-replacement",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Subarrays With Score Less Than K",
      "problem_id": "2394",
      "frontend_id": "2302",
      "difficulty": "Hard",
      "problem_slug": "count-subarrays-with-score-less-than-k",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Calculate Amount Paid in Taxes",
      "problem_id": "1382",
      "frontend_id": "2303",
      "difficulty": "Easy",
      "problem_slug": "calculate-amount-paid-in-taxes",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Path Cost in a Grid",
      "problem_id": "1394",
      "frontend_id": "2304",
      "difficulty": "Medium",
      "problem_slug": "minimum-path-cost-in-a-grid",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fair Distribution of Cookies",
      "problem_id": "1418",
      "frontend_id": "2305",
      "difficulty": "Medium",
      "problem_slug": "fair-distribution-of-cookies",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Naming a Company",
      "problem_id": "2390",
      "frontend_id": "2306",
      "difficulty": "Hard",
      "problem_slug": "naming-a-company",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Greatest English Letter in Upper and Lower Case",
      "problem_id": "1363",
      "frontend_id": "2309",
      "difficulty": "Easy",
      "problem_slug": "greatest-english-letter-in-upper-and-lower-case",
      "topics": [
        "Hash Table",
        "String",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Numbers With Units Digit K",
      "problem_id": "1334",
      "frontend_id": "2310",
      "difficulty": "Medium",
      "problem_slug": "sum-of-numbers-with-units-digit-k",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Binary Subsequence Less Than or Equal to K",
      "problem_id": "2395",
      "frontend_id": "2311",
      "difficulty": "Medium",
      "problem_slug": "longest-binary-subsequence-less-than-or-equal-to-k",
      "topics": [
        "String",
        "Dynamic Programming",
        "Greedy",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Selling Pieces of Wood",
      "problem_id": "1376",
      "frontend_id": "2312",
      "difficulty": "Hard",
      "problem_slug": "selling-pieces-of-wood",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Asterisks",
      "problem_id": "2401",
      "frontend_id": "2315",
      "difficulty": "Easy",
      "problem_slug": "count-asterisks",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
      "problem_id": "2403",
      "frontend_id": "2316",
      "difficulty": "Medium",
      "problem_slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum XOR After Operations ",
      "problem_id": "2402",
      "frontend_id": "2317",
      "difficulty": "Medium",
      "problem_slug": "maximum-xor-after-operations",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Distinct Roll Sequences",
      "problem_id": "2404",
      "frontend_id": "2318",
      "difficulty": "Hard",
      "problem_slug": "number-of-distinct-roll-sequences",
      "topics": [
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Matrix Is X-Matrix",
      "problem_id": "2398",
      "frontend_id": "2319",
      "difficulty": "Easy",
      "problem_slug": "check-if-matrix-is-x-matrix",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Ways to Place Houses",
      "problem_id": "2397",
      "frontend_id": "2320",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-ways-to-place-houses",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score Of Spliced Array",
      "problem_id": "1348",
      "frontend_id": "2321",
      "difficulty": "Hard",
      "problem_slug": "maximum-score-of-spliced-array",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Score After Removals on a Tree",
      "problem_id": "2400",
      "frontend_id": "2322",
      "difficulty": "Hard",
      "problem_slug": "minimum-score-after-removals-on-a-tree",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decode the Message",
      "problem_id": "2406",
      "frontend_id": "2325",
      "difficulty": "Easy",
      "problem_slug": "decode-the-message",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Spiral Matrix IV",
      "problem_id": "2411",
      "frontend_id": "2326",
      "difficulty": "Medium",
      "problem_slug": "spiral-matrix-iv",
      "topics": [
        "Array",
        "Linked List",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of People Aware of a Secret",
      "problem_id": "2408",
      "frontend_id": "2327",
      "difficulty": "Medium",
      "problem_slug": "number-of-people-aware-of-a-secret",
      "topics": [
        "Dynamic Programming",
        "Queue",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Increasing Paths in a Grid",
      "problem_id": "2409",
      "frontend_id": "2328",
      "difficulty": "Hard",
      "problem_slug": "number-of-increasing-paths-in-a-grid",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort",
        "Memoization",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Evaluate Boolean Binary Tree",
      "problem_id": "2416",
      "frontend_id": "2331",
      "difficulty": "Easy",
      "problem_slug": "evaluate-boolean-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Latest Time to Catch a Bus",
      "problem_id": "2417",
      "frontend_id": "2332",
      "difficulty": "Medium",
      "problem_slug": "the-latest-time-to-catch-a-bus",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Sum of Squared Difference",
      "problem_id": "2418",
      "frontend_id": "2333",
      "difficulty": "Medium",
      "problem_slug": "minimum-sum-of-squared-difference",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subarray With Elements Greater Than Varying Threshold",
      "problem_id": "2419",
      "frontend_id": "2334",
      "difficulty": "Hard",
      "problem_slug": "subarray-with-elements-greater-than-varying-threshold",
      "topics": [
        "Array",
        "Stack",
        "Union Find",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Amount of Time to Fill Cups",
      "problem_id": "2412",
      "frontend_id": "2335",
      "difficulty": "Easy",
      "problem_slug": "minimum-amount-of-time-to-fill-cups",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Number in Infinite Set",
      "problem_id": "2413",
      "frontend_id": "2336",
      "difficulty": "Medium",
      "problem_slug": "smallest-number-in-infinite-set",
      "topics": [
        "Hash Table",
        "Design",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Move Pieces to Obtain a String",
      "problem_id": "2414",
      "frontend_id": "2337",
      "difficulty": "Medium",
      "problem_slug": "move-pieces-to-obtain-a-string",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Ideal Arrays",
      "problem_id": "2415",
      "frontend_id": "2338",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-ideal-arrays",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Pairs in Array",
      "problem_id": "2421",
      "frontend_id": "2341",
      "difficulty": "Easy",
      "problem_slug": "maximum-number-of-pairs-in-array",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Sum of a Pair With Equal Sum of Digits",
      "problem_id": "2473",
      "frontend_id": "2342",
      "difficulty": "Medium",
      "problem_slug": "max-sum-of-a-pair-with-equal-sum-of-digits",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Query Kth Smallest Trimmed Number",
      "problem_id": "2422",
      "frontend_id": "2343",
      "difficulty": "Medium",
      "problem_slug": "query-kth-smallest-trimmed-number",
      "topics": [
        "Array",
        "String",
        "Divide and Conquer",
        "Sorting",
        "Heap (Priority Queue)",
        "Radix Sort",
        "Quickselect"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Minimum Deletions to Make Array Divisible",
      "problem_id": "2423",
      "frontend_id": "2344",
      "difficulty": "Hard",
      "problem_slug": "minimum-deletions-to-make-array-divisible",
      "topics": [
        "Array",
        "Math",
        "Sorting",
        "Heap (Priority Queue)",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Poker Hand",
      "problem_id": "2433",
      "frontend_id": "2347",
      "difficulty": "Easy",
      "problem_slug": "best-poker-hand",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Zero-Filled Subarrays",
      "problem_id": "2432",
      "frontend_id": "2348",
      "difficulty": "Medium",
      "problem_slug": "number-of-zero-filled-subarrays",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design a Number Container System",
      "problem_id": "2434",
      "frontend_id": "2349",
      "difficulty": "Medium",
      "problem_slug": "design-a-number-container-system",
      "topics": [
        "Hash Table",
        "Design",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Impossible Sequence of Rolls",
      "problem_id": "2435",
      "frontend_id": "2350",
      "difficulty": "Hard",
      "problem_slug": "shortest-impossible-sequence-of-rolls",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "First Letter to Appear Twice",
      "problem_id": "2427",
      "frontend_id": "2351",
      "difficulty": "Easy",
      "problem_slug": "first-letter-to-appear-twice",
      "topics": [
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Equal Row and Column Pairs",
      "problem_id": "2428",
      "frontend_id": "2352",
      "difficulty": "Medium",
      "problem_slug": "equal-row-and-column-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design a Food Rating System",
      "problem_id": "2429",
      "frontend_id": "2353",
      "difficulty": "Medium",
      "problem_slug": "design-a-food-rating-system",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Design",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Excellent Pairs",
      "problem_id": "2430",
      "frontend_id": "2354",
      "difficulty": "Hard",
      "problem_slug": "number-of-excellent-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Unique Subjects Taught by Each Teacher",
      "problem_id": "2495",
      "frontend_id": "2356",
      "difficulty": "Easy",
      "problem_slug": "number-of-unique-subjects-taught-by-each-teacher",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Make Array Zero by Subtracting Equal Amounts",
      "problem_id": "2436",
      "frontend_id": "2357",
      "difficulty": "Easy",
      "problem_slug": "make-array-zero-by-subtracting-equal-amounts",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Groups Entering a Competition",
      "problem_id": "2437",
      "frontend_id": "2358",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-groups-entering-a-competition",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Closest Node to Given Two Nodes",
      "problem_id": "2438",
      "frontend_id": "2359",
      "difficulty": "Medium",
      "problem_slug": "find-closest-node-to-given-two-nodes",
      "topics": [
        "Depth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Cycle in a Graph",
      "problem_id": "2439",
      "frontend_id": "2360",
      "difficulty": "Hard",
      "problem_slug": "longest-cycle-in-a-graph",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Similar Items",
      "problem_id": "2447",
      "frontend_id": "2363",
      "difficulty": "Easy",
      "problem_slug": "merge-similar-items",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Bad Pairs",
      "problem_id": "2448",
      "frontend_id": "2364",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-bad-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Task Scheduler II",
      "problem_id": "2483",
      "frontend_id": "2365",
      "difficulty": "Medium",
      "problem_slug": "task-scheduler-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Replacements to Sort the Array",
      "problem_id": "2450",
      "frontend_id": "2366",
      "difficulty": "Hard",
      "problem_slug": "minimum-replacements-to-sort-the-array",
      "topics": [
        "Array",
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Arithmetic Triplets",
      "problem_id": "2442",
      "frontend_id": "2367",
      "difficulty": "Easy",
      "problem_slug": "number-of-arithmetic-triplets",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reachable Nodes With Restrictions",
      "problem_id": "2445",
      "frontend_id": "2368",
      "difficulty": "Medium",
      "problem_slug": "reachable-nodes-with-restrictions",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if There is a Valid Partition For The Array",
      "problem_id": "2443",
      "frontend_id": "2369",
      "difficulty": "Medium",
      "problem_slug": "check-if-there-is-a-valid-partition-for-the-array",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Ideal Subsequence",
      "problem_id": "2444",
      "frontend_id": "2370",
      "difficulty": "Medium",
      "problem_slug": "longest-ideal-subsequence",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Local Values in a Matrix",
      "problem_id": "2454",
      "frontend_id": "2373",
      "difficulty": "Easy",
      "problem_slug": "largest-local-values-in-a-matrix",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Node With Highest Edge Score",
      "problem_id": "2455",
      "frontend_id": "2374",
      "difficulty": "Medium",
      "problem_slug": "node-with-highest-edge-score",
      "topics": [
        "Hash Table",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Smallest Number From DI String",
      "problem_id": "2456",
      "frontend_id": "2375",
      "difficulty": "Medium",
      "problem_slug": "construct-smallest-number-from-di-string",
      "topics": [
        "String",
        "Backtracking",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Special Integers",
      "problem_id": "2457",
      "frontend_id": "2376",
      "difficulty": "Hard",
      "problem_slug": "count-special-integers",
      "topics": [
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Recolors to Get K Consecutive Black Blocks",
      "problem_id": "2463",
      "frontend_id": "2379",
      "difficulty": "Easy",
      "problem_slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
      "topics": [
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Time Needed to Rearrange a Binary String",
      "problem_id": "2464",
      "frontend_id": "2380",
      "difficulty": "Medium",
      "problem_slug": "time-needed-to-rearrange-a-binary-string",
      "topics": [
        "String",
        "Dynamic Programming",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shifting Letters II",
      "problem_id": "2465",
      "frontend_id": "2381",
      "difficulty": "Medium",
      "problem_slug": "shifting-letters-ii",
      "topics": [
        "Array",
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Segment Sum After Removals",
      "problem_id": "2466",
      "frontend_id": "2382",
      "difficulty": "Hard",
      "problem_slug": "maximum-segment-sum-after-removals",
      "topics": [
        "Array",
        "Union Find",
        "Prefix Sum",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Hours of Training to Win a Competition",
      "problem_id": "2459",
      "frontend_id": "2383",
      "difficulty": "Easy",
      "problem_slug": "minimum-hours-of-training-to-win-a-competition",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Palindromic Number",
      "problem_id": "2475",
      "frontend_id": "2384",
      "difficulty": "Medium",
      "problem_slug": "largest-palindromic-number",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Amount of Time for Binary Tree to Be Infected",
      "problem_id": "2461",
      "frontend_id": "2385",
      "difficulty": "Medium",
      "problem_slug": "amount-of-time-for-binary-tree-to-be-infected",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the K-Sum of an Array",
      "problem_id": "2462",
      "frontend_id": "2386",
      "difficulty": "Hard",
      "problem_slug": "find-the-k-sum-of-an-array",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Subsequence With Limited Sum",
      "problem_id": "2469",
      "frontend_id": "2389",
      "difficulty": "Easy",
      "problem_slug": "longest-subsequence-with-limited-sum",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Removing Stars From a String",
      "problem_id": "2470",
      "frontend_id": "2390",
      "difficulty": "Medium",
      "problem_slug": "removing-stars-from-a-string",
      "topics": [
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Amount of Time to Collect Garbage",
      "problem_id": "2471",
      "frontend_id": "2391",
      "difficulty": "Medium",
      "problem_slug": "minimum-amount-of-time-to-collect-garbage",
      "topics": [
        "Array",
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Build a Matrix With Conditions",
      "problem_id": "2472",
      "frontend_id": "2392",
      "difficulty": "Hard",
      "problem_slug": "build-a-matrix-with-conditions",
      "topics": [
        "Array",
        "Graph",
        "Topological Sort",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Subarrays With Equal Sum",
      "problem_id": "2480",
      "frontend_id": "2395",
      "difficulty": "Easy",
      "problem_slug": "find-subarrays-with-equal-sum",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Strictly Palindromic Number",
      "problem_id": "2481",
      "frontend_id": "2396",
      "difficulty": "Medium",
      "problem_slug": "strictly-palindromic-number",
      "topics": [
        "Math",
        "Two Pointers",
        "Brainteaser"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Rows Covered by Columns",
      "problem_id": "2482",
      "frontend_id": "2397",
      "difficulty": "Medium",
      "problem_slug": "maximum-rows-covered-by-columns",
      "topics": [
        "Array",
        "Backtracking",
        "Bit Manipulation",
        "Matrix",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Robots Within Budget",
      "problem_id": "2449",
      "frontend_id": "2398",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-robots-within-budget",
      "topics": [
        "Array",
        "Binary Search",
        "Queue",
        "Sliding Window",
        "Heap (Priority Queue)",
        "Prefix Sum",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check Distances Between Same Letters",
      "problem_id": "2476",
      "frontend_id": "2399",
      "difficulty": "Easy",
      "problem_slug": "check-distances-between-same-letters",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Reach a Position After Exactly k Steps",
      "problem_id": "2477",
      "frontend_id": "2400",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Nice Subarray",
      "problem_id": "2478",
      "frontend_id": "2401",
      "difficulty": "Medium",
      "problem_slug": "longest-nice-subarray",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Meeting Rooms III",
      "problem_id": "2479",
      "frontend_id": "2402",
      "difficulty": "Hard",
      "problem_slug": "meeting-rooms-iii",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Frequent Even Element",
      "problem_id": "2486",
      "frontend_id": "2404",
      "difficulty": "Easy",
      "problem_slug": "most-frequent-even-element",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Optimal Partition of String",
      "problem_id": "2487",
      "frontend_id": "2405",
      "difficulty": "Medium",
      "problem_slug": "optimal-partition-of-string",
      "topics": [
        "Hash Table",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide Intervals Into Minimum Number of Groups",
      "problem_id": "2488",
      "frontend_id": "2406",
      "difficulty": "Medium",
      "problem_slug": "divide-intervals-into-minimum-number-of-groups",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Increasing Subsequence II",
      "problem_id": "2526",
      "frontend_id": "2407",
      "difficulty": "Hard",
      "problem_slug": "longest-increasing-subsequence-ii",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Dynamic Programming",
        "Binary Indexed Tree",
        "Segment Tree",
        "Queue",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Days Spent Together",
      "problem_id": "2496",
      "frontend_id": "2409",
      "difficulty": "Easy",
      "problem_slug": "count-days-spent-together",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Matching of Players With Trainers",
      "problem_id": "2497",
      "frontend_id": "2410",
      "difficulty": "Medium",
      "problem_slug": "maximum-matching-of-players-with-trainers",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Subarrays With Maximum Bitwise OR",
      "problem_id": "2498",
      "frontend_id": "2411",
      "difficulty": "Medium",
      "problem_slug": "smallest-subarrays-with-maximum-bitwise-or",
      "topics": [
        "Array",
        "Binary Search",
        "Bit Manipulation",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Money Required Before Transactions",
      "problem_id": "2499",
      "frontend_id": "2412",
      "difficulty": "Hard",
      "problem_slug": "minimum-money-required-before-transactions",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Even Multiple",
      "problem_id": "2491",
      "frontend_id": "2413",
      "difficulty": "Easy",
      "problem_slug": "smallest-even-multiple",
      "topics": [
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of the Longest Alphabetical Continuous Substring",
      "problem_id": "2492",
      "frontend_id": "2414",
      "difficulty": "Medium",
      "problem_slug": "length-of-the-longest-alphabetical-continuous-substring",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reverse Odd Levels of Binary Tree",
      "problem_id": "2493",
      "frontend_id": "2415",
      "difficulty": "Medium",
      "problem_slug": "reverse-odd-levels-of-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Prefix Scores of Strings",
      "problem_id": "2494",
      "frontend_id": "2416",
      "difficulty": "Hard",
      "problem_slug": "sum-of-prefix-scores-of-strings",
      "topics": [
        "Array",
        "String",
        "Trie",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort the People",
      "problem_id": "2502",
      "frontend_id": "2418",
      "difficulty": "Easy",
      "problem_slug": "sort-the-people",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Subarray With Maximum Bitwise AND",
      "problem_id": "2503",
      "frontend_id": "2419",
      "difficulty": "Medium",
      "problem_slug": "longest-subarray-with-maximum-bitwise-and",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Brainteaser"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Good Indices",
      "problem_id": "2504",
      "frontend_id": "2420",
      "difficulty": "Medium",
      "problem_slug": "find-all-good-indices",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Good Paths",
      "problem_id": "2505",
      "frontend_id": "2421",
      "difficulty": "Hard",
      "problem_slug": "number-of-good-paths",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Union Find",
        "Graph",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Letter To Equalize Frequency",
      "problem_id": "2532",
      "frontend_id": "2423",
      "difficulty": "Easy",
      "problem_slug": "remove-letter-to-equalize-frequency",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Uploaded Prefix",
      "problem_id": "2512",
      "frontend_id": "2424",
      "difficulty": "Medium",
      "problem_slug": "longest-uploaded-prefix",
      "topics": [
        "Hash Table",
        "Binary Search",
        "Union Find",
        "Design",
        "Binary Indexed Tree",
        "Segment Tree",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Bitwise XOR of All Pairings",
      "problem_id": "2533",
      "frontend_id": "2425",
      "difficulty": "Medium",
      "problem_slug": "bitwise-xor-of-all-pairings",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Brainteaser"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Pairs Satisfying Inequality",
      "problem_id": "2513",
      "frontend_id": "2426",
      "difficulty": "Hard",
      "problem_slug": "number-of-pairs-satisfying-inequality",
      "topics": [
        "Array",
        "Binary Search",
        "Divide and Conquer",
        "Binary Indexed Tree",
        "Segment Tree",
        "Merge Sort",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Common Factors",
      "problem_id": "2507",
      "frontend_id": "2427",
      "difficulty": "Easy",
      "problem_slug": "number-of-common-factors",
      "topics": [
        "Math",
        "Enumeration",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum of an Hourglass",
      "problem_id": "2508",
      "frontend_id": "2428",
      "difficulty": "Medium",
      "problem_slug": "maximum-sum-of-an-hourglass",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize XOR",
      "problem_id": "2509",
      "frontend_id": "2429",
      "difficulty": "Medium",
      "problem_slug": "minimize-xor",
      "topics": [
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Deletions on a String",
      "problem_id": "2510",
      "frontend_id": "2430",
      "difficulty": "Hard",
      "problem_slug": "maximum-deletions-on-a-string",
      "topics": [
        "String",
        "Dynamic Programming",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Employee That Worked on the Longest Task",
      "problem_id": "2518",
      "frontend_id": "2432",
      "difficulty": "Easy",
      "problem_slug": "the-employee-that-worked-on-the-longest-task",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find The Original Array of Prefix Xor",
      "problem_id": "2519",
      "frontend_id": "2433",
      "difficulty": "Medium",
      "problem_slug": "find-the-original-array-of-prefix-xor",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Using a Robot to Print the Lexicographically Smallest String",
      "problem_id": "2520",
      "frontend_id": "2434",
      "difficulty": "Medium",
      "problem_slug": "using-a-robot-to-print-the-lexicographically-smallest-string",
      "topics": [
        "Hash Table",
        "String",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Paths in Matrix Whose Sum Is Divisible by K",
      "problem_id": "2521",
      "frontend_id": "2435",
      "difficulty": "Hard",
      "problem_slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Valid Clock Times",
      "problem_id": "2528",
      "frontend_id": "2437",
      "difficulty": "Easy",
      "problem_slug": "number-of-valid-clock-times",
      "topics": [
        "String",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Range Product Queries of Powers",
      "problem_id": "2529",
      "frontend_id": "2438",
      "difficulty": "Medium",
      "problem_slug": "range-product-queries-of-powers",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Maximum of Array",
      "problem_id": "2530",
      "frontend_id": "2439",
      "difficulty": "Medium",
      "problem_slug": "minimize-maximum-of-array",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Greedy",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Create Components With Same Value",
      "problem_id": "2531",
      "frontend_id": "2440",
      "difficulty": "Hard",
      "problem_slug": "create-components-with-same-value",
      "topics": [
        "Array",
        "Math",
        "Tree",
        "Depth-First Search",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Positive Integer That Exists With Its Negative",
      "problem_id": "2524",
      "frontend_id": "2441",
      "difficulty": "Easy",
      "problem_slug": "largest-positive-integer-that-exists-with-its-negative",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Distinct Integers After Reverse Operations",
      "problem_id": "2525",
      "frontend_id": "2442",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-distinct-integers-after-reverse-operations",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Number and Its Reverse",
      "problem_id": "2541",
      "frontend_id": "2443",
      "difficulty": "Medium",
      "problem_slug": "sum-of-number-and-its-reverse",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Subarrays With Fixed Bounds",
      "problem_id": "2527",
      "frontend_id": "2444",
      "difficulty": "Hard",
      "problem_slug": "count-subarrays-with-fixed-bounds",
      "topics": [
        "Array",
        "Queue",
        "Sliding Window",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Determine if Two Events Have Conflict",
      "problem_id": "2536",
      "frontend_id": "2446",
      "difficulty": "Easy",
      "problem_slug": "determine-if-two-events-have-conflict",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Subarrays With GCD Equal to K",
      "problem_id": "2546",
      "frontend_id": "2447",
      "difficulty": "Medium",
      "problem_slug": "number-of-subarrays-with-gcd-equal-to-k",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Make Array Equal",
      "problem_id": "2538",
      "frontend_id": "2448",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-make-array-equal",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make Arrays Similar",
      "problem_id": "2539",
      "frontend_id": "2449",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-operations-to-make-arrays-similar",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Odd String Difference",
      "problem_id": "2547",
      "frontend_id": "2451",
      "difficulty": "Easy",
      "problem_slug": "odd-string-difference",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Words Within Two Edits of Dictionary",
      "problem_id": "2550",
      "frontend_id": "2452",
      "difficulty": "Medium",
      "problem_slug": "words-within-two-edits-of-dictionary",
      "topics": [
        "Array",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Destroy Sequential Targets",
      "problem_id": "2548",
      "frontend_id": "2453",
      "difficulty": "Medium",
      "problem_slug": "destroy-sequential-targets",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Next Greater Element IV",
      "problem_id": "2549",
      "frontend_id": "2454",
      "difficulty": "Hard",
      "problem_slug": "next-greater-element-iv",
      "topics": [
        "Array",
        "Binary Search",
        "Stack",
        "Sorting",
        "Heap (Priority Queue)",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Average Value of Even Numbers That Are Divisible by Three",
      "problem_id": "2542",
      "frontend_id": "2455",
      "difficulty": "Easy",
      "problem_slug": "average-value-of-even-numbers-that-are-divisible-by-three",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Popular Video Creator",
      "problem_id": "2543",
      "frontend_id": "2456",
      "difficulty": "Medium",
      "problem_slug": "most-popular-video-creator",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Addition to Make Integer Beautiful",
      "problem_id": "2544",
      "frontend_id": "2457",
      "difficulty": "Medium",
      "problem_slug": "minimum-addition-to-make-integer-beautiful",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Height of Binary Tree After Subtree Removal Queries",
      "problem_id": "2545",
      "frontend_id": "2458",
      "difficulty": "Hard",
      "problem_slug": "height-of-binary-tree-after-subtree-removal-queries",
      "topics": [
        "Array",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations to an Array",
      "problem_id": "2551",
      "frontend_id": "2460",
      "difficulty": "Easy",
      "problem_slug": "apply-operations-to-an-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum of Distinct Subarrays With Length K",
      "problem_id": "2552",
      "frontend_id": "2461",
      "difficulty": "Medium",
      "problem_slug": "maximum-sum-of-distinct-subarrays-with-length-k",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Total Cost to Hire K Workers",
      "problem_id": "2553",
      "frontend_id": "2462",
      "difficulty": "Medium",
      "problem_slug": "total-cost-to-hire-k-workers",
      "topics": [
        "Array",
        "Two Pointers",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Total Distance Traveled",
      "problem_id": "2554",
      "frontend_id": "2463",
      "difficulty": "Hard",
      "problem_slug": "minimum-total-distance-traveled",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Distinct Averages",
      "problem_id": "2561",
      "frontend_id": "2465",
      "difficulty": "Easy",
      "problem_slug": "number-of-distinct-averages",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Ways To Build Good Strings",
      "problem_id": "2562",
      "frontend_id": "2466",
      "difficulty": "Medium",
      "problem_slug": "count-ways-to-build-good-strings",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Profitable Path in a Tree",
      "problem_id": "2564",
      "frontend_id": "2467",
      "difficulty": "Medium",
      "problem_slug": "most-profitable-path-in-a-tree",
      "topics": [
        "Array",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Message Based on Limit",
      "problem_id": "2563",
      "frontend_id": "2468",
      "difficulty": "Hard",
      "problem_slug": "split-message-based-on-limit",
      "topics": [
        "String",
        "Binary Search",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert the Temperature",
      "problem_id": "2556",
      "frontend_id": "2469",
      "difficulty": "Easy",
      "problem_slug": "convert-the-temperature",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Subarrays With LCM Equal to K",
      "problem_id": "2557",
      "frontend_id": "2470",
      "difficulty": "Medium",
      "problem_slug": "number-of-subarrays-with-lcm-equal-to-k",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
      "problem_id": "2558",
      "frontend_id": "2471",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Non-overlapping Palindrome Substrings",
      "problem_id": "2559",
      "frontend_id": "2472",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-non-overlapping-palindrome-substrings",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Unequal Triplets in Array",
      "problem_id": "2566",
      "frontend_id": "2475",
      "difficulty": "Easy",
      "problem_slug": "number-of-unequal-triplets-in-array",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Closest Nodes Queries in a Binary Search Tree",
      "problem_id": "2567",
      "frontend_id": "2476",
      "difficulty": "Medium",
      "problem_slug": "closest-nodes-queries-in-a-binary-search-tree",
      "topics": [
        "Array",
        "Binary Search",
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Fuel Cost to Report to the Capital",
      "problem_id": "2568",
      "frontend_id": "2477",
      "difficulty": "Medium",
      "problem_slug": "minimum-fuel-cost-to-report-to-the-capital",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Beautiful Partitions",
      "problem_id": "2569",
      "frontend_id": "2478",
      "difficulty": "Hard",
      "problem_slug": "number-of-beautiful-partitions",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cuts to Divide a Circle",
      "problem_id": "2575",
      "frontend_id": "2481",
      "difficulty": "Easy",
      "problem_slug": "minimum-cuts-to-divide-a-circle",
      "topics": [
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Difference Between Ones and Zeros in Row and Column",
      "problem_id": "2606",
      "frontend_id": "2482",
      "difficulty": "Medium",
      "problem_slug": "difference-between-ones-and-zeros-in-row-and-column",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Penalty for a Shop",
      "problem_id": "2576",
      "frontend_id": "2483",
      "difficulty": "Medium",
      "problem_slug": "minimum-penalty-for-a-shop",
      "topics": [
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Palindromic Subsequences",
      "problem_id": "2577",
      "frontend_id": "2484",
      "difficulty": "Hard",
      "problem_slug": "count-palindromic-subsequences",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Pivot Integer",
      "problem_id": "2571",
      "frontend_id": "2485",
      "difficulty": "Easy",
      "problem_slug": "find-the-pivot-integer",
      "topics": [
        "Math",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Append Characters to String to Make Subsequence",
      "problem_id": "2572",
      "frontend_id": "2486",
      "difficulty": "Medium",
      "problem_slug": "append-characters-to-string-to-make-subsequence",
      "topics": [
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Nodes From Linked List",
      "problem_id": "2573",
      "frontend_id": "2487",
      "difficulty": "Medium",
      "problem_slug": "remove-nodes-from-linked-list",
      "topics": [
        "Linked List",
        "Stack",
        "Recursion",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Subarrays With Median K",
      "problem_id": "2574",
      "frontend_id": "2488",
      "difficulty": "Hard",
      "problem_slug": "count-subarrays-with-median-k",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Circular Sentence",
      "problem_id": "2580",
      "frontend_id": "2490",
      "difficulty": "Easy",
      "problem_slug": "circular-sentence",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide Players Into Teams of Equal Skill",
      "problem_id": "2581",
      "frontend_id": "2491",
      "difficulty": "Medium",
      "problem_slug": "divide-players-into-teams-of-equal-skill",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Score of a Path Between Two Cities",
      "problem_id": "2582",
      "frontend_id": "2492",
      "difficulty": "Medium",
      "problem_slug": "minimum-score-of-a-path-between-two-cities",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide Nodes Into the Maximum Number of Groups",
      "problem_id": "2583",
      "frontend_id": "2493",
      "difficulty": "Hard",
      "problem_slug": "divide-nodes-into-the-maximum-number-of-groups",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Value of a String in an Array",
      "problem_id": "2589",
      "frontend_id": "2496",
      "difficulty": "Easy",
      "problem_slug": "maximum-value-of-a-string-in-an-array",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Star Sum of a Graph",
      "problem_id": "2590",
      "frontend_id": "2497",
      "difficulty": "Medium",
      "problem_slug": "maximum-star-sum-of-a-graph",
      "topics": [
        "Array",
        "Greedy",
        "Graph",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Frog Jump II",
      "problem_id": "2591",
      "frontend_id": "2498",
      "difficulty": "Medium",
      "problem_slug": "frog-jump-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Total Cost to Make Arrays Unequal",
      "problem_id": "2592",
      "frontend_id": "2499",
      "difficulty": "Hard",
      "problem_slug": "minimum-total-cost-to-make-arrays-unequal",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Greatest Value in Each Row",
      "problem_id": "2585",
      "frontend_id": "2500",
      "difficulty": "Easy",
      "problem_slug": "delete-greatest-value-in-each-row",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Square Streak in an Array",
      "problem_id": "2586",
      "frontend_id": "2501",
      "difficulty": "Medium",
      "problem_slug": "longest-square-streak-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Memory Allocator",
      "problem_id": "2587",
      "frontend_id": "2502",
      "difficulty": "Medium",
      "problem_slug": "design-memory-allocator",
      "topics": [
        "Array",
        "Hash Table",
        "Design",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Points From Grid Queries",
      "problem_id": "2588",
      "frontend_id": "2503",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-points-from-grid-queries",
      "topics": [
        "Array",
        "Two Pointers",
        "Breadth-First Search",
        "Union Find",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs Of Similar Strings",
      "problem_id": "2594",
      "frontend_id": "2506",
      "difficulty": "Easy",
      "problem_slug": "count-pairs-of-similar-strings",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Bit Manipulation",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Value After Replacing With Sum of Prime Factors",
      "problem_id": "2595",
      "frontend_id": "2507",
      "difficulty": "Medium",
      "problem_slug": "smallest-value-after-replacing-with-sum-of-prime-factors",
      "topics": [
        "Math",
        "Simulation",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Add Edges to Make Degrees of All Nodes Even",
      "problem_id": "2596",
      "frontend_id": "2508",
      "difficulty": "Hard",
      "problem_slug": "add-edges-to-make-degrees-of-all-nodes-even",
      "topics": [
        "Hash Table",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cycle Length Queries in a Tree",
      "problem_id": "2597",
      "frontend_id": "2509",
      "difficulty": "Hard",
      "problem_slug": "cycle-length-queries-in-a-tree",
      "topics": [
        "Array",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Enemy Forts That Can Be Captured",
      "problem_id": "2602",
      "frontend_id": "2511",
      "difficulty": "Easy",
      "problem_slug": "maximum-enemy-forts-that-can-be-captured",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reward Top K Students",
      "problem_id": "2603",
      "frontend_id": "2512",
      "difficulty": "Medium",
      "problem_slug": "reward-top-k-students",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize the Maximum of Two Arrays",
      "problem_id": "2628",
      "frontend_id": "2513",
      "difficulty": "Medium",
      "problem_slug": "minimize-the-maximum-of-two-arrays",
      "topics": [
        "Math",
        "Binary Search",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Anagrams",
      "problem_id": "2605",
      "frontend_id": "2514",
      "difficulty": "Hard",
      "problem_slug": "count-anagrams",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Combinatorics",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Distance to Target String in a Circular Array",
      "problem_id": "2598",
      "frontend_id": "2515",
      "difficulty": "Easy",
      "problem_slug": "shortest-distance-to-target-string-in-a-circular-array",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Take K of Each Character From Left and Right",
      "problem_id": "2599",
      "frontend_id": "2516",
      "difficulty": "Medium",
      "problem_slug": "take-k-of-each-character-from-left-and-right",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Tastiness of Candy Basket",
      "problem_id": "2600",
      "frontend_id": "2517",
      "difficulty": "Medium",
      "problem_slug": "maximum-tastiness-of-candy-basket",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Great Partitions",
      "problem_id": "2601",
      "frontend_id": "2518",
      "difficulty": "Hard",
      "problem_slug": "number-of-great-partitions",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Digits That Divide a Number",
      "problem_id": "2608",
      "frontend_id": "2520",
      "difficulty": "Easy",
      "problem_slug": "count-the-digits-that-divide-a-number",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distinct Prime Factors of Product of Array",
      "problem_id": "2609",
      "frontend_id": "2521",
      "difficulty": "Medium",
      "problem_slug": "distinct-prime-factors-of-product-of-array",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition String Into Substrings With Values at Most K",
      "problem_id": "2511",
      "frontend_id": "2522",
      "difficulty": "Medium",
      "problem_slug": "partition-string-into-substrings-with-values-at-most-k",
      "topics": [
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Closest Prime Numbers in Range",
      "problem_id": "2610",
      "frontend_id": "2523",
      "difficulty": "Medium",
      "problem_slug": "closest-prime-numbers-in-range",
      "topics": [
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Categorize Box According to Criteria",
      "problem_id": "2619",
      "frontend_id": "2525",
      "difficulty": "Easy",
      "problem_slug": "categorize-box-according-to-criteria",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Consecutive Integers from a Data Stream",
      "problem_id": "2620",
      "frontend_id": "2526",
      "difficulty": "Medium",
      "problem_slug": "find-consecutive-integers-from-a-data-stream",
      "topics": [
        "Hash Table",
        "Design",
        "Queue",
        "Counting",
        "Data Stream"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Xor-Beauty of Array",
      "problem_id": "2621",
      "frontend_id": "2527",
      "difficulty": "Medium",
      "problem_slug": "find-xor-beauty-of-array",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Minimum Powered City",
      "problem_id": "2618",
      "frontend_id": "2528",
      "difficulty": "Hard",
      "problem_slug": "maximize-the-minimum-powered-city",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Queue",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Count of Positive Integer and Negative Integer",
      "problem_id": "2614",
      "frontend_id": "2529",
      "difficulty": "Easy",
      "problem_slug": "maximum-count-of-positive-integer-and-negative-integer",
      "topics": [
        "Array",
        "Binary Search",
        "Counting"
      ],
      "follow_ups": true,
      "code_snippets": 19
    },
    {
      "title": "Maximal Score After Applying K Operations",
      "problem_id": "2616",
      "frontend_id": "2530",
      "difficulty": "Medium",
      "problem_slug": "maximal-score-after-applying-k-operations",
      "topics": [
        "Array",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Number of Distinct Characters Equal",
      "problem_id": "2615",
      "frontend_id": "2531",
      "difficulty": "Medium",
      "problem_slug": "make-number-of-distinct-characters-equal",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Time to Cross a Bridge",
      "problem_id": "2642",
      "frontend_id": "2532",
      "difficulty": "Hard",
      "problem_slug": "time-to-cross-a-bridge",
      "topics": [
        "Array",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Difference Between Element Sum and Digit Sum of an Array",
      "problem_id": "2624",
      "frontend_id": "2535",
      "difficulty": "Easy",
      "problem_slug": "difference-between-element-sum-and-digit-sum-of-an-array",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Increment Submatrices by One",
      "problem_id": "2625",
      "frontend_id": "2536",
      "difficulty": "Medium",
      "problem_slug": "increment-submatrices-by-one",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Good Subarrays",
      "problem_id": "2626",
      "frontend_id": "2537",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-good-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Difference Between Maximum and Minimum Price Sum",
      "problem_id": "2627",
      "frontend_id": "2538",
      "difficulty": "Hard",
      "problem_slug": "difference-between-maximum-and-minimum-price-sum",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Common Value",
      "problem_id": "2634",
      "frontend_id": "2540",
      "difficulty": "Easy",
      "problem_slug": "minimum-common-value",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Array Equal II",
      "problem_id": "2604",
      "frontend_id": "2541",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-array-equal-ii",
      "topics": [
        "Array",
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Subsequence Score",
      "problem_id": "2636",
      "frontend_id": "2542",
      "difficulty": "Medium",
      "problem_slug": "maximum-subsequence-score",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Point Is Reachable",
      "problem_id": "2635",
      "frontend_id": "2543",
      "difficulty": "Hard",
      "problem_slug": "check-if-point-is-reachable",
      "topics": [
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Alternating Digit Sum",
      "problem_id": "2630",
      "frontend_id": "2544",
      "difficulty": "Easy",
      "problem_slug": "alternating-digit-sum",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort the Students by Their Kth Score",
      "problem_id": "2631",
      "frontend_id": "2545",
      "difficulty": "Medium",
      "problem_slug": "sort-the-students-by-their-kth-score",
      "topics": [
        "Array",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Bitwise Operations to Make Strings Equal",
      "problem_id": "2632",
      "frontend_id": "2546",
      "difficulty": "Medium",
      "problem_slug": "apply-bitwise-operations-to-make-strings-equal",
      "topics": [
        "String",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Split an Array",
      "problem_id": "2633",
      "frontend_id": "2547",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-split-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Distinct Numbers on Board",
      "problem_id": "2679",
      "frontend_id": "2549",
      "difficulty": "Easy",
      "problem_slug": "count-distinct-numbers-on-board",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Collisions of Monkeys on a Polygon",
      "problem_id": "2680",
      "frontend_id": "2550",
      "difficulty": "Medium",
      "problem_slug": "count-collisions-of-monkeys-on-a-polygon",
      "topics": [
        "Math",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Put Marbles in Bags",
      "problem_id": "2681",
      "frontend_id": "2551",
      "difficulty": "Hard",
      "problem_slug": "put-marbles-in-bags",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Increasing Quadruplets",
      "problem_id": "2682",
      "frontend_id": "2552",
      "difficulty": "Hard",
      "problem_slug": "count-increasing-quadruplets",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Binary Indexed Tree",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Separate the Digits in an Array",
      "problem_id": "2639",
      "frontend_id": "2553",
      "difficulty": "Easy",
      "problem_slug": "separate-the-digits-in-an-array",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Integers to Choose From a Range I",
      "problem_id": "2640",
      "frontend_id": "2554",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-integers-to-choose-from-a-range-i",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Win From Two Segments",
      "problem_id": "2673",
      "frontend_id": "2555",
      "difficulty": "Medium",
      "problem_slug": "maximize-win-from-two-segments",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
      "problem_id": "2641",
      "frontend_id": "2556",
      "difficulty": "Medium",
      "problem_slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Take Gifts From the Richest Pile",
      "problem_id": "2692",
      "frontend_id": "2558",
      "difficulty": "Easy",
      "problem_slug": "take-gifts-from-the-richest-pile",
      "topics": [
        "Array",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Vowel Strings in Ranges",
      "problem_id": "2691",
      "frontend_id": "2559",
      "difficulty": "Medium",
      "problem_slug": "count-vowel-strings-in-ranges",
      "topics": [
        "Array",
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "House Robber IV",
      "problem_id": "2690",
      "frontend_id": "2560",
      "difficulty": "Medium",
      "problem_slug": "house-robber-iv",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearranging Fruits",
      "problem_id": "2689",
      "frontend_id": "2561",
      "difficulty": "Hard",
      "problem_slug": "rearranging-fruits",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Array Concatenation Value",
      "problem_id": "2698",
      "frontend_id": "2562",
      "difficulty": "Easy",
      "problem_slug": "find-the-array-concatenation-value",
      "topics": [
        "Array",
        "Two Pointers",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Fair Pairs",
      "problem_id": "2699",
      "frontend_id": "2563",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-fair-pairs",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Substring XOR Queries",
      "problem_id": "2700",
      "frontend_id": "2564",
      "difficulty": "Medium",
      "problem_slug": "substring-xor-queries",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subsequence With the Minimum Score",
      "problem_id": "2701",
      "frontend_id": "2565",
      "difficulty": "Hard",
      "problem_slug": "subsequence-with-the-minimum-score",
      "topics": [
        "Two Pointers",
        "String",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Difference by Remapping a Digit",
      "problem_id": "2704",
      "frontend_id": "2566",
      "difficulty": "Easy",
      "problem_slug": "maximum-difference-by-remapping-a-digit",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Score by Changing Two Elements",
      "problem_id": "2706",
      "frontend_id": "2567",
      "difficulty": "Medium",
      "problem_slug": "minimum-score-by-changing-two-elements",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Impossible OR",
      "problem_id": "2705",
      "frontend_id": "2568",
      "difficulty": "Medium",
      "problem_slug": "minimum-impossible-or",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Brainteaser"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Handling Sum Queries After Update",
      "problem_id": "2703",
      "frontend_id": "2569",
      "difficulty": "Hard",
      "problem_slug": "handling-sum-queries-after-update",
      "topics": [
        "Array",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Two 2D Arrays by Summing Values",
      "problem_id": "2707",
      "frontend_id": "2570",
      "difficulty": "Easy",
      "problem_slug": "merge-two-2d-arrays-by-summing-values",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Reduce an Integer to 0",
      "problem_id": "2710",
      "frontend_id": "2571",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-reduce-an-integer-to-0",
      "topics": [
        "Dynamic Programming",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Square-Free Subsets",
      "problem_id": "2709",
      "frontend_id": "2572",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-square-free-subsets",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the String with LCP",
      "problem_id": "2708",
      "frontend_id": "2573",
      "difficulty": "Hard",
      "problem_slug": "find-the-string-with-lcp",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Greedy",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Left and Right Sum Differences",
      "problem_id": "2714",
      "frontend_id": "2574",
      "difficulty": "Easy",
      "problem_slug": "left-and-right-sum-differences",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Divisibility Array of a String",
      "problem_id": "2713",
      "frontend_id": "2575",
      "difficulty": "Medium",
      "problem_slug": "find-the-divisibility-array-of-a-string",
      "topics": [
        "Array",
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Number of Marked Indices",
      "problem_id": "2712",
      "frontend_id": "2576",
      "difficulty": "Medium",
      "problem_slug": "find-the-maximum-number-of-marked-indices",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Visit a Cell In a Grid",
      "problem_id": "2711",
      "frontend_id": "2577",
      "difficulty": "Hard",
      "problem_slug": "minimum-time-to-visit-a-cell-in-a-grid",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Graph",
        "Heap (Priority Queue)",
        "Matrix",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split With Minimum Sum",
      "problem_id": "2650",
      "frontend_id": "2578",
      "difficulty": "Easy",
      "problem_slug": "split-with-minimum-sum",
      "topics": [
        "Math",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Total Number of Colored Cells",
      "problem_id": "2649",
      "frontend_id": "2579",
      "difficulty": "Medium",
      "problem_slug": "count-total-number-of-colored-cells",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Ways to Group Overlapping Ranges",
      "problem_id": "2651",
      "frontend_id": "2580",
      "difficulty": "Medium",
      "problem_slug": "count-ways-to-group-overlapping-ranges",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Possible Root Nodes",
      "problem_id": "2652",
      "frontend_id": "2581",
      "difficulty": "Hard",
      "problem_slug": "count-number-of-possible-root-nodes",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Pass the Pillow",
      "problem_id": "2645",
      "frontend_id": "2582",
      "difficulty": "Easy",
      "problem_slug": "pass-the-pillow",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Largest Sum in a Binary Tree",
      "problem_id": "2646",
      "frontend_id": "2583",
      "difficulty": "Medium",
      "problem_slug": "kth-largest-sum-in-a-binary-tree",
      "topics": [
        "Tree",
        "Breadth-First Search",
        "Sorting",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split the Array to Make Coprime Products",
      "problem_id": "2647",
      "frontend_id": "2584",
      "difficulty": "Hard",
      "problem_slug": "split-the-array-to-make-coprime-products",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Earn Points",
      "problem_id": "2648",
      "frontend_id": "2585",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-earn-points",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Vowel Strings in Range",
      "problem_id": "2654",
      "frontend_id": "2586",
      "difficulty": "Easy",
      "problem_slug": "count-the-number-of-vowel-strings-in-range",
      "topics": [
        "Array",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearrange Array to Maximize Prefix Score",
      "problem_id": "2655",
      "frontend_id": "2587",
      "difficulty": "Medium",
      "problem_slug": "rearrange-array-to-maximize-prefix-score",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Beautiful Subarrays",
      "problem_id": "2656",
      "frontend_id": "2588",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-beautiful-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Complete All Tasks",
      "problem_id": "2657",
      "frontend_id": "2589",
      "difficulty": "Hard",
      "problem_slug": "minimum-time-to-complete-all-tasks",
      "topics": [
        "Array",
        "Binary Search",
        "Stack",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Money to Maximum Children",
      "problem_id": "2663",
      "frontend_id": "2591",
      "difficulty": "Easy",
      "problem_slug": "distribute-money-to-maximum-children",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Greatness of an Array",
      "problem_id": "2664",
      "frontend_id": "2592",
      "difficulty": "Medium",
      "problem_slug": "maximize-greatness-of-an-array",
      "topics": [
        "Array",
        "Two Pointers",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Score of an Array After Marking All Elements",
      "problem_id": "2695",
      "frontend_id": "2593",
      "difficulty": "Medium",
      "problem_slug": "find-score-of-an-array-after-marking-all-elements",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Repair Cars",
      "problem_id": "2665",
      "frontend_id": "2594",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-repair-cars",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Even and Odd Bits",
      "problem_id": "2659",
      "frontend_id": "2595",
      "difficulty": "Easy",
      "problem_slug": "number-of-even-and-odd-bits",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check Knight Tour Configuration",
      "problem_id": "2662",
      "frontend_id": "2596",
      "difficulty": "Medium",
      "problem_slug": "check-knight-tour-configuration",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Number of Beautiful Subsets",
      "problem_id": "2696",
      "frontend_id": "2597",
      "difficulty": "Medium",
      "problem_slug": "the-number-of-beautiful-subsets",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Dynamic Programming",
        "Backtracking",
        "Sorting",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Missing Non-negative Integer After Operations",
      "problem_id": "2661",
      "frontend_id": "2598",
      "difficulty": "Medium",
      "problem_slug": "smallest-missing-non-negative-integer-after-operations",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K Items With the Maximum Sum",
      "problem_id": "2715",
      "frontend_id": "2600",
      "difficulty": "Easy",
      "problem_slug": "k-items-with-the-maximum-sum",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Prime Subtraction Operation",
      "problem_id": "2716",
      "frontend_id": "2601",
      "difficulty": "Medium",
      "problem_slug": "prime-subtraction-operation",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Greedy",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make All Array Elements Equal",
      "problem_id": "2718",
      "frontend_id": "2602",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-all-array-elements-equal",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Collect Coins in a Tree",
      "problem_id": "2717",
      "frontend_id": "2603",
      "difficulty": "Hard",
      "problem_slug": "collect-coins-in-a-tree",
      "topics": [
        "Array",
        "Tree",
        "Graph",
        "Topological Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Form Smallest Number From Two Digit Arrays",
      "problem_id": "2668",
      "frontend_id": "2605",
      "difficulty": "Easy",
      "problem_slug": "form-smallest-number-from-two-digit-arrays",
      "topics": [
        "Array",
        "Hash Table",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Substring With Maximum Cost",
      "problem_id": "2669",
      "frontend_id": "2606",
      "difficulty": "Medium",
      "problem_slug": "find-the-substring-with-maximum-cost",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make K-Subarray Sums Equal",
      "problem_id": "2670",
      "frontend_id": "2607",
      "difficulty": "Medium",
      "problem_slug": "make-k-subarray-sums-equal",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Sorting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Cycle in a Graph",
      "problem_id": "2671",
      "frontend_id": "2608",
      "difficulty": "Hard",
      "problem_slug": "shortest-cycle-in-a-graph",
      "topics": [
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Longest Balanced Substring of a Binary String",
      "problem_id": "2723",
      "frontend_id": "2609",
      "difficulty": "Easy",
      "problem_slug": "find-the-longest-balanced-substring-of-a-binary-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert an Array Into a 2D Array With Conditions",
      "problem_id": "2724",
      "frontend_id": "2610",
      "difficulty": "Medium",
      "problem_slug": "convert-an-array-into-a-2d-array-with-conditions",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Mice and Cheese",
      "problem_id": "2725",
      "frontend_id": "2611",
      "difficulty": "Medium",
      "problem_slug": "mice-and-cheese",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Reverse Operations",
      "problem_id": "2726",
      "frontend_id": "2612",
      "difficulty": "Hard",
      "problem_slug": "minimum-reverse-operations",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Prime In Diagonal",
      "problem_id": "2722",
      "frontend_id": "2614",
      "difficulty": "Easy",
      "problem_slug": "prime-in-diagonal",
      "topics": [
        "Array",
        "Math",
        "Matrix",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Distances",
      "problem_id": "2721",
      "frontend_id": "2615",
      "difficulty": "Medium",
      "problem_slug": "sum-of-distances",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize the Maximum Difference of Pairs",
      "problem_id": "2720",
      "frontend_id": "2616",
      "difficulty": "Medium",
      "problem_slug": "minimize-the-maximum-difference-of-pairs",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Visited Cells in a Grid",
      "problem_id": "2697",
      "frontend_id": "2617",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-visited-cells-in-a-grid",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Breadth-First Search",
        "Union Find",
        "Heap (Priority Queue)",
        "Matrix",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Object Instance of Class",
      "problem_id": "2758",
      "frontend_id": "2618",
      "difficulty": "Medium",
      "problem_slug": "check-if-object-instance-of-class",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Array Prototype Last",
      "problem_id": "2734",
      "frontend_id": "2619",
      "difficulty": "Easy",
      "problem_slug": "array-prototype-last",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Counter",
      "problem_id": "2732",
      "frontend_id": "2620",
      "difficulty": "Easy",
      "problem_slug": "counter",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Sleep",
      "problem_id": "2733",
      "frontend_id": "2621",
      "difficulty": "Easy",
      "problem_slug": "sleep",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Cache With Time Limit",
      "problem_id": "2762",
      "frontend_id": "2622",
      "difficulty": "Medium",
      "problem_slug": "cache-with-time-limit",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Memoize",
      "problem_id": "2731",
      "frontend_id": "2623",
      "difficulty": "Medium",
      "problem_slug": "memoize",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Snail Traversal",
      "problem_id": "2760",
      "frontend_id": "2624",
      "difficulty": "Medium",
      "problem_slug": "snail-traversal",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Flatten Deeply Nested Array",
      "problem_id": "2759",
      "frontend_id": "2625",
      "difficulty": "Medium",
      "problem_slug": "flatten-deeply-nested-array",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Array Reduce Transformation",
      "problem_id": "2761",
      "frontend_id": "2626",
      "difficulty": "Easy",
      "problem_slug": "array-reduce-transformation",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Debounce",
      "problem_id": "2743",
      "frontend_id": "2627",
      "difficulty": "Medium",
      "problem_slug": "debounce",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Function Composition",
      "problem_id": "2741",
      "frontend_id": "2629",
      "difficulty": "Easy",
      "problem_slug": "function-composition",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Memoize II",
      "problem_id": "2744",
      "frontend_id": "2630",
      "difficulty": "Hard",
      "problem_slug": "memoize-ii",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Group By",
      "problem_id": "2742",
      "frontend_id": "2631",
      "difficulty": "Medium",
      "problem_slug": "group-by",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Filter Elements from Array",
      "problem_id": "2746",
      "frontend_id": "2634",
      "difficulty": "Easy",
      "problem_slug": "filter-elements-from-array",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Apply Transform Over Each Element in Array",
      "problem_id": "2747",
      "frontend_id": "2635",
      "difficulty": "Easy",
      "problem_slug": "apply-transform-over-each-element-in-array",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Promise Time Limit",
      "problem_id": "2749",
      "frontend_id": "2637",
      "difficulty": "Medium",
      "problem_slug": "promise-time-limit",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Find the Width of Columns of a Grid",
      "problem_id": "2675",
      "frontend_id": "2639",
      "difficulty": "Easy",
      "problem_slug": "find-the-width-of-columns-of-a-grid",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Score of All Prefixes of an Array",
      "problem_id": "2676",
      "frontend_id": "2640",
      "difficulty": "Medium",
      "problem_slug": "find-the-score-of-all-prefixes-of-an-array",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Cousins in Binary Tree II",
      "problem_id": "2677",
      "frontend_id": "2641",
      "difficulty": "Medium",
      "problem_slug": "cousins-in-binary-tree-ii",
      "topics": [
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Graph With Shortest Path Calculator",
      "problem_id": "2678",
      "frontend_id": "2642",
      "difficulty": "Hard",
      "problem_slug": "design-graph-with-shortest-path-calculator",
      "topics": [
        "Graph",
        "Design",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Row With Maximum Ones",
      "problem_id": "2737",
      "frontend_id": "2643",
      "difficulty": "Easy",
      "problem_slug": "row-with-maximum-ones",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Divisibility Score",
      "problem_id": "2694",
      "frontend_id": "2644",
      "difficulty": "Easy",
      "problem_slug": "find-the-maximum-divisibility-score",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Additions to Make Valid String",
      "problem_id": "2736",
      "frontend_id": "2645",
      "difficulty": "Medium",
      "problem_slug": "minimum-additions-to-make-valid-string",
      "topics": [
        "String",
        "Dynamic Programming",
        "Stack",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize the Total Price of the Trips",
      "problem_id": "2739",
      "frontend_id": "2646",
      "difficulty": "Hard",
      "problem_slug": "minimize-the-total-price-of-the-trips",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Generate Fibonacci Sequence",
      "problem_id": "2775",
      "frontend_id": "2648",
      "difficulty": "Easy",
      "problem_slug": "generate-fibonacci-sequence",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Nested Array Generator",
      "problem_id": "2783",
      "frontend_id": "2649",
      "difficulty": "Medium",
      "problem_slug": "nested-array-generator",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Design Cancellable Function",
      "problem_id": "2788",
      "frontend_id": "2650",
      "difficulty": "Hard",
      "problem_slug": "design-cancellable-function",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Calculate Delayed Arrival Time",
      "problem_id": "2748",
      "frontend_id": "2651",
      "difficulty": "Easy",
      "problem_slug": "calculate-delayed-arrival-time",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum Multiples",
      "problem_id": "2752",
      "frontend_id": "2652",
      "difficulty": "Easy",
      "problem_slug": "sum-multiples",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sliding Subarray Beauty",
      "problem_id": "2751",
      "frontend_id": "2653",
      "difficulty": "Medium",
      "problem_slug": "sliding-subarray-beauty",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
      "problem_id": "2753",
      "frontend_id": "2654",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum With Exactly K Elements ",
      "problem_id": "2767",
      "frontend_id": "2656",
      "difficulty": "Easy",
      "problem_slug": "maximum-sum-with-exactly-k-elements",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Prefix Common Array of Two Arrays",
      "problem_id": "2766",
      "frontend_id": "2657",
      "difficulty": "Medium",
      "problem_slug": "find-the-prefix-common-array-of-two-arrays",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Fish in a Grid",
      "problem_id": "2764",
      "frontend_id": "2658",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-fish-in-a-grid",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Array Empty",
      "problem_id": "2765",
      "frontend_id": "2659",
      "difficulty": "Hard",
      "problem_slug": "make-array-empty",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Binary Indexed Tree",
        "Segment Tree",
        "Sorting",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Determine the Winner of a Bowling Game",
      "problem_id": "2684",
      "frontend_id": "2660",
      "difficulty": "Easy",
      "problem_slug": "determine-the-winner-of-a-bowling-game",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "First Completely Painted Row or Column",
      "problem_id": "2685",
      "frontend_id": "2661",
      "difficulty": "Medium",
      "problem_slug": "first-completely-painted-row-or-column",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost of a Path With Special Roads",
      "problem_id": "2686",
      "frontend_id": "2662",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-of-a-path-with-special-roads",
      "topics": [
        "Array",
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest Beautiful String",
      "problem_id": "2687",
      "frontend_id": "2663",
      "difficulty": "Hard",
      "problem_slug": "lexicographically-smallest-beautiful-string",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Counter II",
      "problem_id": "2789",
      "frontend_id": "2665",
      "difficulty": "Easy",
      "problem_slug": "counter-ii",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Allow One Function Call",
      "problem_id": "2796",
      "frontend_id": "2666",
      "difficulty": "Easy",
      "problem_slug": "allow-one-function-call",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Create Hello World Function",
      "problem_id": "2809",
      "frontend_id": "2667",
      "difficulty": "Easy",
      "problem_slug": "create-hello-world-function",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Find the Distinct Difference Array",
      "problem_id": "2777",
      "frontend_id": "2670",
      "difficulty": "Easy",
      "problem_slug": "find-the-distinct-difference-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Frequency Tracker",
      "problem_id": "2778",
      "frontend_id": "2671",
      "difficulty": "Medium",
      "problem_slug": "frequency-tracker",
      "topics": [
        "Hash Table",
        "Design"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Adjacent Elements With the Same Color",
      "problem_id": "2779",
      "frontend_id": "2672",
      "difficulty": "Medium",
      "problem_slug": "number-of-adjacent-elements-with-the-same-color",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Costs of Paths Equal in a Binary Tree",
      "problem_id": "2780",
      "frontend_id": "2673",
      "difficulty": "Medium",
      "problem_slug": "make-costs-of-paths-equal-in-a-binary-tree",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Tree",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Chunk Array",
      "problem_id": "2798",
      "frontend_id": "2677",
      "difficulty": "Easy",
      "problem_slug": "chunk-array",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Number of Senior Citizens",
      "problem_id": "2727",
      "frontend_id": "2678",
      "difficulty": "Easy",
      "problem_slug": "number-of-senior-citizens",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum in a Matrix",
      "problem_id": "2728",
      "frontend_id": "2679",
      "difficulty": "Medium",
      "problem_slug": "sum-in-a-matrix",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum OR",
      "problem_id": "2730",
      "frontend_id": "2680",
      "difficulty": "Medium",
      "problem_slug": "maximum-or",
      "topics": [
        "Array",
        "Greedy",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Power of Heroes",
      "problem_id": "2784",
      "frontend_id": "2681",
      "difficulty": "Hard",
      "problem_slug": "power-of-heroes",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Losers of the Circular Game",
      "problem_id": "2791",
      "frontend_id": "2682",
      "difficulty": "Easy",
      "problem_slug": "find-the-losers-of-the-circular-game",
      "topics": [
        "Array",
        "Hash Table",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Neighboring Bitwise XOR",
      "problem_id": "2792",
      "frontend_id": "2683",
      "difficulty": "Medium",
      "problem_slug": "neighboring-bitwise-xor",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Moves in a Grid",
      "problem_id": "2794",
      "frontend_id": "2684",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-moves-in-a-grid",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Complete Components",
      "problem_id": "2793",
      "frontend_id": "2685",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-complete-components",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Call Function with Custom Context",
      "problem_id": "2790",
      "frontend_id": "2693",
      "difficulty": "Medium",
      "problem_slug": "call-function-with-custom-context",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Event Emitter",
      "problem_id": "2797",
      "frontend_id": "2694",
      "difficulty": "Medium",
      "problem_slug": "event-emitter",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Array Wrapper",
      "problem_id": "2805",
      "frontend_id": "2695",
      "difficulty": "Easy",
      "problem_slug": "array-wrapper",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Minimum String Length After Removing Substrings",
      "problem_id": "2800",
      "frontend_id": "2696",
      "difficulty": "Easy",
      "problem_slug": "minimum-string-length-after-removing-substrings",
      "topics": [
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest Palindrome",
      "problem_id": "2816",
      "frontend_id": "2697",
      "difficulty": "Easy",
      "problem_slug": "lexicographically-smallest-palindrome",
      "topics": [
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Punishment Number of an Integer",
      "problem_id": "2802",
      "frontend_id": "2698",
      "difficulty": "Medium",
      "problem_slug": "find-the-punishment-number-of-an-integer",
      "topics": [
        "Math",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Modify Graph Edge Weights",
      "problem_id": "2803",
      "frontend_id": "2699",
      "difficulty": "Hard",
      "problem_slug": "modify-graph-edge-weights",
      "topics": [
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Return Length of Arguments Passed",
      "problem_id": "2820",
      "frontend_id": "2703",
      "difficulty": "Easy",
      "problem_slug": "return-length-of-arguments-passed",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "To Be Or Not To Be",
      "problem_id": "2813",
      "frontend_id": "2704",
      "difficulty": "Easy",
      "problem_slug": "to-be-or-not-to-be",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Compact Object",
      "problem_id": "2804",
      "frontend_id": "2705",
      "difficulty": "Medium",
      "problem_slug": "compact-object",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Buy Two Chocolates",
      "problem_id": "2756",
      "frontend_id": "2706",
      "difficulty": "Easy",
      "problem_slug": "buy-two-chocolates",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Extra Characters in a String",
      "problem_id": "2755",
      "frontend_id": "2707",
      "difficulty": "Medium",
      "problem_slug": "extra-characters-in-a-string",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Strength of a Group",
      "problem_id": "2754",
      "frontend_id": "2708",
      "difficulty": "Medium",
      "problem_slug": "maximum-strength-of-a-group",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Greedy",
        "Bit Manipulation",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Greatest Common Divisor Traversal",
      "problem_id": "2827",
      "frontend_id": "2709",
      "difficulty": "Hard",
      "problem_slug": "greatest-common-divisor-traversal",
      "topics": [
        "Array",
        "Math",
        "Union Find",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Trailing Zeros From a String",
      "problem_id": "2819",
      "frontend_id": "2710",
      "difficulty": "Easy",
      "problem_slug": "remove-trailing-zeros-from-a-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Difference of Number of Distinct Values on Diagonals",
      "problem_id": "2801",
      "frontend_id": "2711",
      "difficulty": "Medium",
      "problem_slug": "difference-of-number-of-distinct-values-on-diagonals",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Make All Characters Equal",
      "problem_id": "2817",
      "frontend_id": "2712",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-to-make-all-characters-equal",
      "topics": [
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Strictly Increasing Cells in a Matrix",
      "problem_id": "2818",
      "frontend_id": "2713",
      "difficulty": "Hard",
      "problem_slug": "maximum-strictly-increasing-cells-in-a-matrix",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Dynamic Programming",
        "Memoization",
        "Sorting",
        "Matrix",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Timeout Cancellation",
      "problem_id": "2821",
      "frontend_id": "2715",
      "difficulty": "Easy",
      "problem_slug": "timeout-cancellation",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Minimize String Length",
      "problem_id": "2825",
      "frontend_id": "2716",
      "difficulty": "Easy",
      "problem_slug": "minimize-string-length",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Semi-Ordered Permutation",
      "problem_id": "2785",
      "frontend_id": "2717",
      "difficulty": "Easy",
      "problem_slug": "semi-ordered-permutation",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Matrix After Queries",
      "problem_id": "2838",
      "frontend_id": "2718",
      "difficulty": "Medium",
      "problem_slug": "sum-of-matrix-after-queries",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Integers",
      "problem_id": "2757",
      "frontend_id": "2719",
      "difficulty": "Hard",
      "problem_slug": "count-of-integers",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Execute Asynchronous Functions in Parallel",
      "problem_id": "2807",
      "frontend_id": "2721",
      "difficulty": "Medium",
      "problem_slug": "execute-asynchronous-functions-in-parallel",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Join Two Arrays by ID",
      "problem_id": "2858",
      "frontend_id": "2722",
      "difficulty": "Medium",
      "problem_slug": "join-two-arrays-by-id",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Add Two Promises",
      "problem_id": "2859",
      "frontend_id": "2723",
      "difficulty": "Easy",
      "problem_slug": "add-two-promises",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Sort By",
      "problem_id": "2860",
      "frontend_id": "2724",
      "difficulty": "Easy",
      "problem_slug": "sort-by",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Interval Cancellation",
      "problem_id": "2862",
      "frontend_id": "2725",
      "difficulty": "Easy",
      "problem_slug": "interval-cancellation",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Calculator with Method Chaining",
      "problem_id": "2863",
      "frontend_id": "2726",
      "difficulty": "Easy",
      "problem_slug": "calculator-with-method-chaining",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Is Object Empty",
      "problem_id": "2864",
      "frontend_id": "2727",
      "difficulty": "Easy",
      "problem_slug": "is-object-empty",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 2
    },
    {
      "title": "Check if The Number is Fascinating",
      "problem_id": "2824",
      "frontend_id": "2729",
      "difficulty": "Easy",
      "problem_slug": "check-if-the-number-is-fascinating",
      "topics": [
        "Hash Table",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Longest Semi-Repetitive Substring",
      "problem_id": "2786",
      "frontend_id": "2730",
      "difficulty": "Medium",
      "problem_slug": "find-the-longest-semi-repetitive-substring",
      "topics": [
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Movement of Robots",
      "problem_id": "2787",
      "frontend_id": "2731",
      "difficulty": "Medium",
      "problem_slug": "movement-of-robots",
      "topics": [
        "Array",
        "Brainteaser",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find a Good Subset of the Matrix",
      "problem_id": "2826",
      "frontend_id": "2732",
      "difficulty": "Hard",
      "problem_slug": "find-a-good-subset-of-the-matrix",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Neither Minimum nor Maximum",
      "problem_id": "2836",
      "frontend_id": "2733",
      "difficulty": "Easy",
      "problem_slug": "neither-minimum-nor-maximum",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest String After Substring Operation",
      "problem_id": "2828",
      "frontend_id": "2734",
      "difficulty": "Medium",
      "problem_slug": "lexicographically-smallest-string-after-substring-operation",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Collecting Chocolates",
      "problem_id": "2810",
      "frontend_id": "2735",
      "difficulty": "Medium",
      "problem_slug": "collecting-chocolates",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum Queries",
      "problem_id": "2839",
      "frontend_id": "2736",
      "difficulty": "Hard",
      "problem_slug": "maximum-sum-queries",
      "topics": [
        "Array",
        "Binary Search",
        "Stack",
        "Binary Indexed Tree",
        "Segment Tree",
        "Sorting",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Total Distance Traveled",
      "problem_id": "2857",
      "frontend_id": "2739",
      "difficulty": "Easy",
      "problem_slug": "total-distance-traveled",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Value of the Partition",
      "problem_id": "2845",
      "frontend_id": "2740",
      "difficulty": "Medium",
      "problem_slug": "find-the-value-of-the-partition",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Special Permutations",
      "problem_id": "2848",
      "frontend_id": "2741",
      "difficulty": "Medium",
      "problem_slug": "special-permutations",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Painting the Walls",
      "problem_id": "2808",
      "frontend_id": "2742",
      "difficulty": "Hard",
      "problem_slug": "painting-the-walls",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Maximum Number of String Pairs",
      "problem_id": "2847",
      "frontend_id": "2744",
      "difficulty": "Easy",
      "problem_slug": "find-maximum-number-of-string-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct the Longest New String",
      "problem_id": "2850",
      "frontend_id": "2745",
      "difficulty": "Medium",
      "problem_slug": "construct-the-longest-new-string",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Greedy",
        "Brainteaser"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Decremental String Concatenation",
      "problem_id": "2854",
      "frontend_id": "2746",
      "difficulty": "Medium",
      "problem_slug": "decremental-string-concatenation",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Zero Request Servers",
      "problem_id": "2833",
      "frontend_id": "2747",
      "difficulty": "Medium",
      "problem_slug": "count-zero-request-servers",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Beautiful Pairs",
      "problem_id": "2831",
      "frontend_id": "2748",
      "difficulty": "Easy",
      "problem_slug": "number-of-beautiful-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make the Integer Zero",
      "problem_id": "2837",
      "frontend_id": "2749",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-the-integer-zero",
      "topics": [
        "Bit Manipulation",
        "Brainteaser",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ways to Split Array Into Good Subarrays",
      "problem_id": "2867",
      "frontend_id": "2750",
      "difficulty": "Medium",
      "problem_slug": "ways-to-split-array-into-good-subarrays",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Robot Collisions",
      "problem_id": "2846",
      "frontend_id": "2751",
      "difficulty": "Hard",
      "problem_slug": "robot-collisions",
      "topics": [
        "Array",
        "Stack",
        "Sorting",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Even Odd Subarray With Threshold",
      "problem_id": "2866",
      "frontend_id": "2760",
      "difficulty": "Easy",
      "problem_slug": "longest-even-odd-subarray-with-threshold",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Prime Pairs With Target Sum",
      "problem_id": "2873",
      "frontend_id": "2761",
      "difficulty": "Medium",
      "problem_slug": "prime-pairs-with-target-sum",
      "topics": [
        "Array",
        "Math",
        "Enumeration",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Continuous Subarrays",
      "problem_id": "2868",
      "frontend_id": "2762",
      "difficulty": "Medium",
      "problem_slug": "continuous-subarrays",
      "topics": [
        "Array",
        "Queue",
        "Sliding Window",
        "Heap (Priority Queue)",
        "Ordered Set",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Imbalance Numbers of All Subarrays",
      "problem_id": "2849",
      "frontend_id": "2763",
      "difficulty": "Hard",
      "problem_slug": "sum-of-imbalance-numbers-of-all-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Alternating Subarray",
      "problem_id": "2870",
      "frontend_id": "2765",
      "difficulty": "Easy",
      "problem_slug": "longest-alternating-subarray",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Relocate Marbles",
      "problem_id": "2834",
      "frontend_id": "2766",
      "difficulty": "Medium",
      "problem_slug": "relocate-marbles",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition String Into Minimum Beautiful Substrings",
      "problem_id": "2883",
      "frontend_id": "2767",
      "difficulty": "Medium",
      "problem_slug": "partition-string-into-minimum-beautiful-substrings",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Backtracking"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Black Blocks",
      "problem_id": "2889",
      "frontend_id": "2768",
      "difficulty": "Medium",
      "problem_slug": "number-of-black-blocks",
      "topics": [
        "Array",
        "Hash Table",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Achievable Number",
      "problem_id": "2812",
      "frontend_id": "2769",
      "difficulty": "Easy",
      "problem_slug": "find-the-maximum-achievable-number",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Jumps to Reach the Last Index",
      "problem_id": "2855",
      "frontend_id": "2770",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-jumps-to-reach-the-last-index",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Non-decreasing Subarray From Two Arrays",
      "problem_id": "2869",
      "frontend_id": "2771",
      "difficulty": "Medium",
      "problem_slug": "longest-non-decreasing-subarray-from-two-arrays",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations to Make All Array Elements Equal to Zero",
      "problem_id": "2878",
      "frontend_id": "2772",
      "difficulty": "Medium",
      "problem_slug": "apply-operations-to-make-all-array-elements-equal-to-zero",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Squares of Special Elements ",
      "problem_id": "2844",
      "frontend_id": "2778",
      "difficulty": "Easy",
      "problem_slug": "sum-of-squares-of-special-elements",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Beauty of an Array After Applying Operation",
      "problem_id": "2891",
      "frontend_id": "2779",
      "difficulty": "Medium",
      "problem_slug": "maximum-beauty-of-an-array-after-applying-operation",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Index of a Valid Split",
      "problem_id": "2888",
      "frontend_id": "2780",
      "difficulty": "Medium",
      "problem_slug": "minimum-index-of-a-valid-split",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of the Longest Valid Substring",
      "problem_id": "2884",
      "frontend_id": "2781",
      "difficulty": "Hard",
      "problem_slug": "length-of-the-longest-valid-substring",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Array is Good",
      "problem_id": "2892",
      "frontend_id": "2784",
      "difficulty": "Easy",
      "problem_slug": "check-if-array-is-good",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Vowels in a String",
      "problem_id": "2887",
      "frontend_id": "2785",
      "difficulty": "Medium",
      "problem_slug": "sort-vowels-in-a-string",
      "topics": [
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Visit Array Positions to Maximize Score",
      "problem_id": "2893",
      "frontend_id": "2786",
      "difficulty": "Medium",
      "problem_slug": "visit-array-positions-to-maximize-score",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ways to Express an Integer as Sum of Powers",
      "problem_id": "2882",
      "frontend_id": "2787",
      "difficulty": "Medium",
      "problem_slug": "ways-to-express-an-integer-as-sum-of-powers",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Strings by Separator",
      "problem_id": "2881",
      "frontend_id": "2788",
      "difficulty": "Easy",
      "problem_slug": "split-strings-by-separator",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Largest Element in an Array after Merge Operations",
      "problem_id": "2872",
      "frontend_id": "2789",
      "difficulty": "Medium",
      "problem_slug": "largest-element-in-an-array-after-merge-operations",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Groups With Increasing Length",
      "problem_id": "2919",
      "frontend_id": "2790",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-groups-with-increasing-length",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Paths That Can Form a Palindrome in a Tree",
      "problem_id": "2905",
      "frontend_id": "2791",
      "difficulty": "Hard",
      "problem_slug": "count-paths-that-can-form-a-palindrome-in-a-tree",
      "topics": [
        "Dynamic Programming",
        "Bit Manipulation",
        "Tree",
        "Depth-First Search",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Employees Who Met the Target",
      "problem_id": "2876",
      "frontend_id": "2798",
      "difficulty": "Easy",
      "problem_slug": "number-of-employees-who-met-the-target",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Complete Subarrays in an Array",
      "problem_id": "2856",
      "frontend_id": "2799",
      "difficulty": "Medium",
      "problem_slug": "count-complete-subarrays-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest String That Contains Three Strings",
      "problem_id": "2877",
      "frontend_id": "2800",
      "difficulty": "Medium",
      "problem_slug": "shortest-string-that-contains-three-strings",
      "topics": [
        "String",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Stepping Numbers in Range",
      "problem_id": "2921",
      "frontend_id": "2801",
      "difficulty": "Hard",
      "problem_slug": "count-stepping-numbers-in-range",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Account Balance After Rounded Purchase",
      "problem_id": "2955",
      "frontend_id": "2806",
      "difficulty": "Easy",
      "problem_slug": "account-balance-after-rounded-purchase",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Insert Greatest Common Divisors in Linked List",
      "problem_id": "2903",
      "frontend_id": "2807",
      "difficulty": "Medium",
      "problem_slug": "insert-greatest-common-divisors-in-linked-list",
      "topics": [
        "Linked List",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Seconds to Equalize a Circular Array",
      "problem_id": "2920",
      "frontend_id": "2808",
      "difficulty": "Medium",
      "problem_slug": "minimum-seconds-to-equalize-a-circular-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Make Array Sum At Most x",
      "problem_id": "2952",
      "frontend_id": "2809",
      "difficulty": "Hard",
      "problem_slug": "minimum-time-to-make-array-sum-at-most-x",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Faulty Keyboard",
      "problem_id": "2886",
      "frontend_id": "2810",
      "difficulty": "Easy",
      "problem_slug": "faulty-keyboard",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if it is Possible to Split Array",
      "problem_id": "2916",
      "frontend_id": "2811",
      "difficulty": "Medium",
      "problem_slug": "check-if-it-is-possible-to-split-array",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Safest Path in a Grid",
      "problem_id": "2914",
      "frontend_id": "2812",
      "difficulty": "Medium",
      "problem_slug": "find-the-safest-path-in-a-grid",
      "topics": [
        "Array",
        "Binary Search",
        "Breadth-First Search",
        "Union Find",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Elegance of a K-Length Subsequence",
      "problem_id": "2894",
      "frontend_id": "2813",
      "difficulty": "Hard",
      "problem_slug": "maximum-elegance-of-a-k-length-subsequence",
      "topics": [
        "Array",
        "Hash Table",
        "Stack",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Max Pair Sum in an Array",
      "problem_id": "2902",
      "frontend_id": "2815",
      "difficulty": "Easy",
      "problem_slug": "max-pair-sum-in-an-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Double a Number Represented as a Linked List",
      "problem_id": "2871",
      "frontend_id": "2816",
      "difficulty": "Medium",
      "problem_slug": "double-a-number-represented-as-a-linked-list",
      "topics": [
        "Linked List",
        "Math",
        "Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Absolute Difference Between Elements With Constraint",
      "problem_id": "3000",
      "frontend_id": "2817",
      "difficulty": "Medium",
      "problem_slug": "minimum-absolute-difference-between-elements-with-constraint",
      "topics": [
        "Array",
        "Binary Search",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations to Maximize Score",
      "problem_id": "3001",
      "frontend_id": "2818",
      "difficulty": "Hard",
      "problem_slug": "apply-operations-to-maximize-score",
      "topics": [
        "Array",
        "Math",
        "Stack",
        "Greedy",
        "Sorting",
        "Monotonic Stack",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs Whose Sum is Less than Target",
      "problem_id": "2917",
      "frontend_id": "2824",
      "difficulty": "Easy",
      "problem_slug": "count-pairs-whose-sum-is-less-than-target",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make String a Subsequence Using Cyclic Increments",
      "problem_id": "3018",
      "frontend_id": "2825",
      "difficulty": "Medium",
      "problem_slug": "make-string-a-subsequence-using-cyclic-increments",
      "topics": [
        "Two Pointers",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sorting Three Groups",
      "problem_id": "2904",
      "frontend_id": "2826",
      "difficulty": "Medium",
      "problem_slug": "sorting-three-groups",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Beautiful Integers in the Range",
      "problem_id": "3017",
      "frontend_id": "2827",
      "difficulty": "Hard",
      "problem_slug": "number-of-beautiful-integers-in-the-range",
      "topics": [
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if a String Is an Acronym of Words",
      "problem_id": "2977",
      "frontend_id": "2828",
      "difficulty": "Easy",
      "problem_slug": "check-if-a-string-is-an-acronym-of-words",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Determine the Minimum Sum of a k-avoiding Array",
      "problem_id": "2811",
      "frontend_id": "2829",
      "difficulty": "Medium",
      "problem_slug": "determine-the-minimum-sum-of-a-k-avoiding-array",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Profit as the Salesman",
      "problem_id": "2979",
      "frontend_id": "2830",
      "difficulty": "Medium",
      "problem_slug": "maximize-the-profit-as-the-salesman",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Longest Equal Subarray",
      "problem_id": "2832",
      "frontend_id": "2831",
      "difficulty": "Medium",
      "problem_slug": "find-the-longest-equal-subarray",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Furthest Point From Origin",
      "problem_id": "3019",
      "frontend_id": "2833",
      "difficulty": "Easy",
      "problem_slug": "furthest-point-from-origin",
      "topics": [
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Minimum Possible Sum of a Beautiful Array",
      "problem_id": "3026",
      "frontend_id": "2834",
      "difficulty": "Medium",
      "problem_slug": "find-the-minimum-possible-sum-of-a-beautiful-array",
      "topics": [
        "Math",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Form Subsequence With Target Sum",
      "problem_id": "3025",
      "frontend_id": "2835",
      "difficulty": "Hard",
      "problem_slug": "minimum-operations-to-form-subsequence-with-target-sum",
      "topics": [
        "Array",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Value of Function in a Ball Passing Game",
      "problem_id": "3032",
      "frontend_id": "2836",
      "difficulty": "Hard",
      "problem_slug": "maximize-value-of-function-in-a-ball-passing-game",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Strings Can be Made Equal With Operations I",
      "problem_id": "2999",
      "frontend_id": "2839",
      "difficulty": "Easy",
      "problem_slug": "check-if-strings-can-be-made-equal-with-operations-i",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Strings Can be Made Equal With Operations II",
      "problem_id": "2978",
      "frontend_id": "2840",
      "difficulty": "Medium",
      "problem_slug": "check-if-strings-can-be-made-equal-with-operations-ii",
      "topics": [
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum of Almost Unique Subarray",
      "problem_id": "2954",
      "frontend_id": "2841",
      "difficulty": "Medium",
      "problem_slug": "maximum-sum-of-almost-unique-subarray",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count K-Subsequences of a String With Maximum Beauty",
      "problem_id": "3057",
      "frontend_id": "2842",
      "difficulty": "Hard",
      "problem_slug": "count-k-subsequences-of-a-string-with-maximum-beauty",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Greedy",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "  Count Symmetric Integers",
      "problem_id": "2998",
      "frontend_id": "2843",
      "difficulty": "Easy",
      "problem_slug": "count-symmetric-integers",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make a Special Number",
      "problem_id": "3046",
      "frontend_id": "2844",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-a-special-number",
      "topics": [
        "Math",
        "String",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Interesting Subarrays",
      "problem_id": "2915",
      "frontend_id": "2845",
      "difficulty": "Medium",
      "problem_slug": "count-of-interesting-subarrays",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
      "problem_id": "3079",
      "frontend_id": "2846",
      "difficulty": "Hard",
      "problem_slug": "minimum-edge-weight-equilibrium-queries-in-a-tree",
      "topics": [
        "Array",
        "Tree",
        "Graph",
        "Strongly Connected Component"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Points That Intersect With Cars",
      "problem_id": "3034",
      "frontend_id": "2848",
      "difficulty": "Easy",
      "problem_slug": "points-that-intersect-with-cars",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Determine if a Cell Is Reachable at a Given Time",
      "problem_id": "3056",
      "frontend_id": "2849",
      "difficulty": "Medium",
      "problem_slug": "determine-if-a-cell-is-reachable-at-a-given-time",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Spread Stones Over Grid",
      "problem_id": "3092",
      "frontend_id": "2850",
      "difficulty": "Medium",
      "problem_slug": "minimum-moves-to-spread-stones-over-grid",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "String Transformation",
      "problem_id": "3024",
      "frontend_id": "2851",
      "difficulty": "Hard",
      "problem_slug": "string-transformation",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Right Shifts to Sort the Array",
      "problem_id": "3045",
      "frontend_id": "2855",
      "difficulty": "Easy",
      "problem_slug": "minimum-right-shifts-to-sort-the-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Array Length After Pair Removals",
      "problem_id": "3081",
      "frontend_id": "2856",
      "difficulty": "Medium",
      "problem_slug": "minimum-array-length-after-pair-removals",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs of Points With Distance k",
      "problem_id": "2953",
      "frontend_id": "2857",
      "difficulty": "Medium",
      "problem_slug": "count-pairs-of-points-with-distance-k",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Edge Reversals So Every Node Is Reachable",
      "problem_id": "3105",
      "frontend_id": "2858",
      "difficulty": "Hard",
      "problem_slug": "minimum-edge-reversals-so-every-node-is-reachable",
      "topics": [
        "Dynamic Programming",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Values at Indices With K Set Bits",
      "problem_id": "3093",
      "frontend_id": "2859",
      "difficulty": "Easy",
      "problem_slug": "sum-of-values-at-indices-with-k-set-bits",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Happy Students",
      "problem_id": "3104",
      "frontend_id": "2860",
      "difficulty": "Medium",
      "problem_slug": "happy-students",
      "topics": [
        "Array",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Alloys",
      "problem_id": "3095",
      "frontend_id": "2861",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-alloys",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Element-Sum of a Complete Subset of Indices",
      "problem_id": "3047",
      "frontend_id": "2862",
      "difficulty": "Hard",
      "problem_slug": "maximum-element-sum-of-a-complete-subset-of-indices",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Odd Binary Number",
      "problem_id": "3055",
      "frontend_id": "2864",
      "difficulty": "Easy",
      "problem_slug": "maximum-odd-binary-number",
      "topics": [
        "Math",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Beautiful Towers I",
      "problem_id": "3114",
      "frontend_id": "2865",
      "difficulty": "Medium",
      "problem_slug": "beautiful-towers-i",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Beautiful Towers II",
      "problem_id": "3113",
      "frontend_id": "2866",
      "difficulty": "Medium",
      "problem_slug": "beautiful-towers-ii",
      "topics": [
        "Array",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Valid Paths in a Tree",
      "problem_id": "3112",
      "frontend_id": "2867",
      "difficulty": "Hard",
      "problem_slug": "count-valid-paths-in-a-tree",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Collect Elements",
      "problem_id": "3044",
      "frontend_id": "2869",
      "difficulty": "Easy",
      "problem_slug": "minimum-operations-to-collect-elements",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make Array Empty",
      "problem_id": "3094",
      "frontend_id": "2870",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-make-array-empty",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split Array Into Maximum Number of Subarrays",
      "problem_id": "3080",
      "frontend_id": "2871",
      "difficulty": "Medium",
      "problem_slug": "split-array-into-maximum-number-of-subarrays",
      "topics": [
        "Array",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of K-Divisible Components",
      "problem_id": "3058",
      "frontend_id": "2872",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-k-divisible-components",
      "topics": [
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Value of an Ordered Triplet I",
      "problem_id": "3154",
      "frontend_id": "2873",
      "difficulty": "Easy",
      "problem_slug": "maximum-value-of-an-ordered-triplet-i",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Value of an Ordered Triplet II",
      "problem_id": "3152",
      "frontend_id": "2874",
      "difficulty": "Medium",
      "problem_slug": "maximum-value-of-an-ordered-triplet-ii",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Size Subarray in Infinite Array",
      "problem_id": "3141",
      "frontend_id": "2875",
      "difficulty": "Medium",
      "problem_slug": "minimum-size-subarray-in-infinite-array",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Visited Nodes in a Directed Graph",
      "problem_id": "3140",
      "frontend_id": "2876",
      "difficulty": "Hard",
      "problem_slug": "count-visited-nodes-in-a-directed-graph",
      "topics": [
        "Dynamic Programming",
        "Graph",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Create a DataFrame from List",
      "problem_id": "3062",
      "frontend_id": "2877",
      "difficulty": "Easy",
      "problem_slug": "create-a-dataframe-from-list",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Get the Size of a DataFrame",
      "problem_id": "3076",
      "frontend_id": "2878",
      "difficulty": "Easy",
      "problem_slug": "get-the-size-of-a-dataframe",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Display the First Three Rows",
      "problem_id": "3065",
      "frontend_id": "2879",
      "difficulty": "Easy",
      "problem_slug": "display-the-first-three-rows",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Select Data",
      "problem_id": "3074",
      "frontend_id": "2880",
      "difficulty": "Easy",
      "problem_slug": "select-data",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Create a New Column",
      "problem_id": "3066",
      "frontend_id": "2881",
      "difficulty": "Easy",
      "problem_slug": "create-a-new-column",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Drop Duplicate Rows",
      "problem_id": "3071",
      "frontend_id": "2882",
      "difficulty": "Easy",
      "problem_slug": "drop-duplicate-rows",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Drop Missing Data",
      "problem_id": "3075",
      "frontend_id": "2883",
      "difficulty": "Easy",
      "problem_slug": "drop-missing-data",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Modify Columns",
      "problem_id": "3067",
      "frontend_id": "2884",
      "difficulty": "Easy",
      "problem_slug": "modify-columns",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Rename Columns",
      "problem_id": "3068",
      "frontend_id": "2885",
      "difficulty": "Easy",
      "problem_slug": "rename-columns",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Change Data Type",
      "problem_id": "3069",
      "frontend_id": "2886",
      "difficulty": "Easy",
      "problem_slug": "change-data-type",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Fill Missing Data",
      "problem_id": "3070",
      "frontend_id": "2887",
      "difficulty": "Easy",
      "problem_slug": "fill-missing-data",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Reshape Data: Concatenate",
      "problem_id": "3064",
      "frontend_id": "2888",
      "difficulty": "Easy",
      "problem_slug": "reshape-data-concatenate",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Reshape Data: Pivot",
      "problem_id": "3072",
      "frontend_id": "2889",
      "difficulty": "Easy",
      "problem_slug": "reshape-data-pivot",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Reshape Data: Melt",
      "problem_id": "3073",
      "frontend_id": "2890",
      "difficulty": "Easy",
      "problem_slug": "reshape-data-melt",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Method Chaining",
      "problem_id": "3063",
      "frontend_id": "2891",
      "difficulty": "Easy",
      "problem_slug": "method-chaining",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 1
    },
    {
      "title": "Divisible and Non-divisible Sums Difference",
      "problem_id": "3172",
      "frontend_id": "2894",
      "difficulty": "Easy",
      "problem_slug": "divisible-and-non-divisible-sums-difference",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Processing Time",
      "problem_id": "3151",
      "frontend_id": "2895",
      "difficulty": "Medium",
      "problem_slug": "minimum-processing-time",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations to Make Two Strings Equal",
      "problem_id": "3033",
      "frontend_id": "2896",
      "difficulty": "Medium",
      "problem_slug": "apply-operations-to-make-two-strings-equal",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations on Array to Maximize Sum of Squares",
      "problem_id": "3153",
      "frontend_id": "2897",
      "difficulty": "Hard",
      "problem_slug": "apply-operations-on-array-to-maximize-sum-of-squares",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Last Visited Integers",
      "problem_id": "3164",
      "frontend_id": "2899",
      "difficulty": "Easy",
      "problem_slug": "last-visited-integers",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Unequal Adjacent Groups Subsequence I",
      "problem_id": "3143",
      "frontend_id": "2900",
      "difficulty": "Easy",
      "problem_slug": "longest-unequal-adjacent-groups-subsequence-i",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Unequal Adjacent Groups Subsequence II",
      "problem_id": "3142",
      "frontend_id": "2901",
      "difficulty": "Medium",
      "problem_slug": "longest-unequal-adjacent-groups-subsequence-ii",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Sub-Multisets With Bounded Sum",
      "problem_id": "3091",
      "frontend_id": "2902",
      "difficulty": "Hard",
      "problem_slug": "count-of-sub-multisets-with-bounded-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Indices With Index and Value Difference I",
      "problem_id": "3165",
      "frontend_id": "2903",
      "difficulty": "Easy",
      "problem_slug": "find-indices-with-index-and-value-difference-i",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest and Lexicographically Smallest Beautiful String",
      "problem_id": "3150",
      "frontend_id": "2904",
      "difficulty": "Medium",
      "problem_slug": "shortest-and-lexicographically-smallest-beautiful-string",
      "topics": [
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Indices With Index and Value Difference II",
      "problem_id": "3170",
      "frontend_id": "2905",
      "difficulty": "Medium",
      "problem_slug": "find-indices-with-index-and-value-difference-ii",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct Product Matrix",
      "problem_id": "3031",
      "frontend_id": "2906",
      "difficulty": "Medium",
      "problem_slug": "construct-product-matrix",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Sum of Mountain Triplets I",
      "problem_id": "3176",
      "frontend_id": "2908",
      "difficulty": "Easy",
      "problem_slug": "minimum-sum-of-mountain-triplets-i",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Sum of Mountain Triplets II",
      "problem_id": "3186",
      "frontend_id": "2909",
      "difficulty": "Medium",
      "problem_slug": "minimum-sum-of-mountain-triplets-ii",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Groups to Create a Valid Assignment",
      "problem_id": "3166",
      "frontend_id": "2910",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-groups-to-create-a-valid-assignment",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Changes to Make K Semi-palindromes",
      "problem_id": "2879",
      "frontend_id": "2911",
      "difficulty": "Hard",
      "problem_slug": "minimum-changes-to-make-k-semi-palindromes",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subarrays Distinct Element Sum of Squares I",
      "problem_id": "3163",
      "frontend_id": "2913",
      "difficulty": "Easy",
      "problem_slug": "subarrays-distinct-element-sum-of-squares-i",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Changes to Make Binary String Beautiful",
      "problem_id": "3174",
      "frontend_id": "2914",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-changes-to-make-binary-string-beautiful",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of the Longest Subsequence That Sums to Target",
      "problem_id": "3106",
      "frontend_id": "2915",
      "difficulty": "Medium",
      "problem_slug": "length-of-the-longest-subsequence-that-sums-to-target",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subarrays Distinct Element Sum of Squares II",
      "problem_id": "3139",
      "frontend_id": "2916",
      "difficulty": "Hard",
      "problem_slug": "subarrays-distinct-element-sum-of-squares-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the K-or of an Array",
      "problem_id": "3183",
      "frontend_id": "2917",
      "difficulty": "Easy",
      "problem_slug": "find-the-k-or-of-an-array",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
      "problem_id": "3171",
      "frontend_id": "2918",
      "difficulty": "Medium",
      "problem_slug": "minimum-equal-sum-of-two-arrays-after-replacing-zeros",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Increment Operations to Make Array Beautiful",
      "problem_id": "3178",
      "frontend_id": "2919",
      "difficulty": "Medium",
      "problem_slug": "minimum-increment-operations-to-make-array-beautiful",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Points After Collecting Coins From All Nodes",
      "problem_id": "3179",
      "frontend_id": "2920",
      "difficulty": "Hard",
      "problem_slug": "maximum-points-after-collecting-coins-from-all-nodes",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Tree",
        "Depth-First Search",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Champion I",
      "problem_id": "3188",
      "frontend_id": "2923",
      "difficulty": "Easy",
      "problem_slug": "find-champion-i",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Champion II",
      "problem_id": "3189",
      "frontend_id": "2924",
      "difficulty": "Medium",
      "problem_slug": "find-champion-ii",
      "topics": [
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score After Applying Operations on a Tree",
      "problem_id": "3191",
      "frontend_id": "2925",
      "difficulty": "Medium",
      "problem_slug": "maximum-score-after-applying-operations-on-a-tree",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Balanced Subsequence Sum",
      "problem_id": "3184",
      "frontend_id": "2926",
      "difficulty": "Hard",
      "problem_slug": "maximum-balanced-subsequence-sum",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Candies Among Children I",
      "problem_id": "3199",
      "frontend_id": "2928",
      "difficulty": "Easy",
      "problem_slug": "distribute-candies-among-children-i",
      "topics": [
        "Math",
        "Combinatorics",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Candies Among Children II",
      "problem_id": "3201",
      "frontend_id": "2929",
      "difficulty": "Medium",
      "problem_slug": "distribute-candies-among-children-ii",
      "topics": [
        "Math",
        "Combinatorics",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
      "problem_id": "3200",
      "frontend_id": "2930",
      "difficulty": "Medium",
      "problem_slug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Spending After Buying Items",
      "problem_id": "3107",
      "frontend_id": "2931",
      "difficulty": "Hard",
      "problem_slug": "maximum-spending-after-buying-items",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Strong Pair XOR I",
      "problem_id": "3193",
      "frontend_id": "2932",
      "difficulty": "Easy",
      "problem_slug": "maximum-strong-pair-xor-i",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Trie",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "High-Access Employees",
      "problem_id": "3202",
      "frontend_id": "2933",
      "difficulty": "Medium",
      "problem_slug": "high-access-employees",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Maximize Last Elements in Arrays",
      "problem_id": "3190",
      "frontend_id": "2934",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-maximize-last-elements-in-arrays",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Strong Pair XOR II",
      "problem_id": "3197",
      "frontend_id": "2935",
      "difficulty": "Hard",
      "problem_slug": "maximum-strong-pair-xor-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Trie",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Three Strings Equal",
      "problem_id": "3207",
      "frontend_id": "2937",
      "difficulty": "Easy",
      "problem_slug": "make-three-strings-equal",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Separate Black and White Balls",
      "problem_id": "3195",
      "frontend_id": "2938",
      "difficulty": "Medium",
      "problem_slug": "separate-black-and-white-balls",
      "topics": [
        "Two Pointers",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Xor Product",
      "problem_id": "3192",
      "frontend_id": "2939",
      "difficulty": "Medium",
      "problem_slug": "maximum-xor-product",
      "topics": [
        "Math",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Building Where Alice and Bob Can Meet",
      "problem_id": "3181",
      "frontend_id": "2940",
      "difficulty": "Hard",
      "problem_slug": "find-building-where-alice-and-bob-can-meet",
      "topics": [
        "Array",
        "Binary Search",
        "Stack",
        "Binary Indexed Tree",
        "Segment Tree",
        "Heap (Priority Queue)",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Words Containing Character",
      "problem_id": "3194",
      "frontend_id": "2942",
      "difficulty": "Easy",
      "problem_slug": "find-words-containing-character",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Area of Square Hole in Grid",
      "problem_id": "3214",
      "frontend_id": "2943",
      "difficulty": "Medium",
      "problem_slug": "maximize-area-of-square-hole-in-grid",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Coins for Fruits",
      "problem_id": "3209",
      "frontend_id": "2944",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-coins-for-fruits",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Queue",
        "Heap (Priority Queue)",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Maximum Non-decreasing Array Length",
      "problem_id": "3211",
      "frontend_id": "2945",
      "difficulty": "Hard",
      "problem_slug": "find-maximum-non-decreasing-array-length",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Stack",
        "Queue",
        "Monotonic Stack",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Matrix Similarity After Cyclic Shifts",
      "problem_id": "3215",
      "frontend_id": "2946",
      "difficulty": "Easy",
      "problem_slug": "matrix-similarity-after-cyclic-shifts",
      "topics": [
        "Array",
        "Math",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Beautiful Substrings I",
      "problem_id": "3210",
      "frontend_id": "2947",
      "difficulty": "Medium",
      "problem_slug": "count-beautiful-substrings-i",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Enumeration",
        "Number Theory",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Lexicographically Smallest Array by Swapping Elements",
      "problem_id": "3219",
      "frontend_id": "2948",
      "difficulty": "Medium",
      "problem_slug": "make-lexicographically-smallest-array-by-swapping-elements",
      "topics": [
        "Array",
        "Union Find",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Beautiful Substrings II",
      "problem_id": "3208",
      "frontend_id": "2949",
      "difficulty": "Hard",
      "problem_slug": "count-beautiful-substrings-ii",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Number Theory",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Peaks",
      "problem_id": "3221",
      "frontend_id": "2951",
      "difficulty": "Easy",
      "problem_slug": "find-the-peaks",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Coins to be Added",
      "problem_id": "3231",
      "frontend_id": "2952",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-coins-to-be-added",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Complete Substrings",
      "problem_id": "3223",
      "frontend_id": "2953",
      "difficulty": "Hard",
      "problem_slug": "count-complete-substrings",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Infection Sequences",
      "problem_id": "3224",
      "frontend_id": "2954",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-infection-sequences",
      "topics": [
        "Array",
        "Math",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Common Elements Between Two Arrays",
      "problem_id": "3206",
      "frontend_id": "2956",
      "difficulty": "Easy",
      "problem_slug": "find-common-elements-between-two-arrays",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Adjacent Almost-Equal Characters",
      "problem_id": "3230",
      "frontend_id": "2957",
      "difficulty": "Medium",
      "problem_slug": "remove-adjacent-almost-equal-characters",
      "topics": [
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of Longest Subarray With at Most K Frequency",
      "problem_id": "3225",
      "frontend_id": "2958",
      "difficulty": "Medium",
      "problem_slug": "length-of-longest-subarray-with-at-most-k-frequency",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Possible Sets of Closing Branches",
      "problem_id": "3217",
      "frontend_id": "2959",
      "difficulty": "Hard",
      "problem_slug": "number-of-possible-sets-of-closing-branches",
      "topics": [
        "Bit Manipulation",
        "Graph",
        "Heap (Priority Queue)",
        "Enumeration",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Tested Devices After Test Operations",
      "problem_id": "3220",
      "frontend_id": "2960",
      "difficulty": "Easy",
      "problem_slug": "count-tested-devices-after-test-operations",
      "topics": [
        "Array",
        "Simulation",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Double Modular Exponentiation",
      "problem_id": "3234",
      "frontend_id": "2961",
      "difficulty": "Medium",
      "problem_slug": "double-modular-exponentiation",
      "topics": [
        "Array",
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Subarrays Where Max Element Appears at Least K Times",
      "problem_id": "3213",
      "frontend_id": "2962",
      "difficulty": "Medium",
      "problem_slug": "count-subarrays-where-max-element-appears-at-least-k-times",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Good Partitions",
      "problem_id": "3212",
      "frontend_id": "2963",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-good-partitions",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Missing and Repeated Values",
      "problem_id": "3227",
      "frontend_id": "2965",
      "difficulty": "Easy",
      "problem_slug": "find-missing-and-repeated-values",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide Array Into Arrays With Max Difference",
      "problem_id": "3241",
      "frontend_id": "2966",
      "difficulty": "Medium",
      "problem_slug": "divide-array-into-arrays-with-max-difference",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Make Array Equalindromic",
      "problem_id": "3229",
      "frontend_id": "2967",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-to-make-array-equalindromic",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations to Maximize Frequency Score",
      "problem_id": "3196",
      "frontend_id": "2968",
      "difficulty": "Hard",
      "problem_slug": "apply-operations-to-maximize-frequency-score",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Incremovable Subarrays I",
      "problem_id": "3252",
      "frontend_id": "2970",
      "difficulty": "Easy",
      "problem_slug": "count-the-number-of-incremovable-subarrays-i",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Polygon With the Largest Perimeter",
      "problem_id": "3262",
      "frontend_id": "2971",
      "difficulty": "Medium",
      "problem_slug": "find-polygon-with-the-largest-perimeter",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Incremovable Subarrays II",
      "problem_id": "3248",
      "frontend_id": "2972",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-incremovable-subarrays-ii",
      "topics": [
        "Array",
        "Two Pointers",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Number of Coins to Place in Tree Nodes",
      "problem_id": "3218",
      "frontend_id": "2973",
      "difficulty": "Hard",
      "problem_slug": "find-number-of-coins-to-place-in-tree-nodes",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number Game",
      "problem_id": "3226",
      "frontend_id": "2974",
      "difficulty": "Easy",
      "problem_slug": "minimum-number-game",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Square Area by Removing Fences From a Field",
      "problem_id": "3250",
      "frontend_id": "2975",
      "difficulty": "Medium",
      "problem_slug": "maximum-square-area-by-removing-fences-from-a-field",
      "topics": [
        "Array",
        "Hash Table",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Convert String I",
      "problem_id": "3235",
      "frontend_id": "2976",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-to-convert-string-i",
      "topics": [
        "Array",
        "String",
        "Graph",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Convert String II",
      "problem_id": "3238",
      "frontend_id": "2977",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-convert-string-ii",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Graph",
        "Trie",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Bitwise OR Has Trailing Zeros",
      "problem_id": "3246",
      "frontend_id": "2980",
      "difficulty": "Easy",
      "problem_slug": "check-if-bitwise-or-has-trailing-zeros",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Longest Special Substring That Occurs Thrice I",
      "problem_id": "3267",
      "frontend_id": "2981",
      "difficulty": "Medium",
      "problem_slug": "find-longest-special-substring-that-occurs-thrice-i",
      "topics": [
        "Hash Table",
        "String",
        "Binary Search",
        "Sliding Window",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Longest Special Substring That Occurs Thrice II",
      "problem_id": "3266",
      "frontend_id": "2982",
      "difficulty": "Medium",
      "problem_slug": "find-longest-special-substring-that-occurs-thrice-ii",
      "topics": [
        "Hash Table",
        "String",
        "Binary Search",
        "Sliding Window",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Palindrome Rearrangement Queries",
      "problem_id": "3203",
      "frontend_id": "2983",
      "difficulty": "Hard",
      "problem_slug": "palindrome-rearrangement-queries",
      "topics": [
        "Hash Table",
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum",
      "problem_id": "3236",
      "frontend_id": "2996",
      "difficulty": "Easy",
      "problem_slug": "smallest-missing-integer-greater-than-sequential-prefix-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make Array XOR Equal to K",
      "problem_id": "3249",
      "frontend_id": "2997",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-make-array-xor-equal-to-k",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make X and Y Equal",
      "problem_id": "3239",
      "frontend_id": "2998",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-make-x-and-y-equal",
      "topics": [
        "Dynamic Programming",
        "Breadth-First Search",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Powerful Integers",
      "problem_id": "3243",
      "frontend_id": "2999",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-powerful-integers",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Area of Longest Diagonal Rectangle",
      "problem_id": "3251",
      "frontend_id": "3000",
      "difficulty": "Easy",
      "problem_slug": "maximum-area-of-longest-diagonal-rectangle",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Capture The Queen",
      "problem_id": "3270",
      "frontend_id": "3001",
      "difficulty": "Medium",
      "problem_slug": "minimum-moves-to-capture-the-queen",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Size of a Set After Removals",
      "problem_id": "3228",
      "frontend_id": "3002",
      "difficulty": "Medium",
      "problem_slug": "maximum-size-of-a-set-after-removals",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Number of Partitions After Operations",
      "problem_id": "3233",
      "frontend_id": "3003",
      "difficulty": "Hard",
      "problem_slug": "maximize-the-number-of-partitions-after-operations",
      "topics": [
        "String",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Elements With Maximum Frequency",
      "problem_id": "3242",
      "frontend_id": "3005",
      "difficulty": "Easy",
      "problem_slug": "count-elements-with-maximum-frequency",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Beautiful Indices in the Given Array I",
      "problem_id": "3245",
      "frontend_id": "3006",
      "difficulty": "Medium",
      "problem_slug": "find-beautiful-indices-in-the-given-array-i",
      "topics": [
        "Two Pointers",
        "String",
        "Binary Search",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
      "problem_id": "3240",
      "frontend_id": "3007",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
      "topics": [
        "Binary Search",
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Beautiful Indices in the Given Array II",
      "problem_id": "3303",
      "frontend_id": "3008",
      "difficulty": "Hard",
      "problem_slug": "find-beautiful-indices-in-the-given-array-ii",
      "topics": [
        "Two Pointers",
        "String",
        "Binary Search",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide an Array Into Subarrays With Minimum Cost I",
      "problem_id": "3263",
      "frontend_id": "3010",
      "difficulty": "Easy",
      "problem_slug": "divide-an-array-into-subarrays-with-minimum-cost-i",
      "topics": [
        "Array",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find if Array Can Be Sorted",
      "problem_id": "3291",
      "frontend_id": "3011",
      "difficulty": "Medium",
      "problem_slug": "find-if-array-can-be-sorted",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Length of Array Using Operations",
      "problem_id": "3244",
      "frontend_id": "3012",
      "difficulty": "Medium",
      "problem_slug": "minimize-length-of-array-using-operations",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Divide an Array Into Subarrays With Minimum Cost II",
      "problem_id": "3260",
      "frontend_id": "3013",
      "difficulty": "Hard",
      "problem_slug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Pushes to Type Word I",
      "problem_id": "3275",
      "frontend_id": "3014",
      "difficulty": "Easy",
      "problem_slug": "minimum-number-of-pushes-to-type-word-i",
      "topics": [
        "Math",
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Houses at a Certain Distance I",
      "problem_id": "3271",
      "frontend_id": "3015",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-houses-at-a-certain-distance-i",
      "topics": [
        "Breadth-First Search",
        "Graph",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Pushes to Type Word II",
      "problem_id": "3276",
      "frontend_id": "3016",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-pushes-to-type-word-ii",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Houses at a Certain Distance II",
      "problem_id": "3310",
      "frontend_id": "3017",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-houses-at-a-certain-distance-ii",
      "topics": [
        "Graph",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Changing Keys",
      "problem_id": "3312",
      "frontend_id": "3019",
      "difficulty": "Easy",
      "problem_slug": "number-of-changing-keys",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Number of Elements in Subset",
      "problem_id": "3299",
      "frontend_id": "3020",
      "difficulty": "Medium",
      "problem_slug": "find-the-maximum-number-of-elements-in-subset",
      "topics": [
        "Array",
        "Hash Table",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Alice and Bob Playing Flower Game",
      "problem_id": "3279",
      "frontend_id": "3021",
      "difficulty": "Medium",
      "problem_slug": "alice-and-bob-playing-flower-game",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize OR of Remaining Elements Using Operations",
      "problem_id": "3261",
      "frontend_id": "3022",
      "difficulty": "Hard",
      "problem_slug": "minimize-or-of-remaining-elements-using-operations",
      "topics": [
        "Array",
        "Greedy",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Type of Triangle",
      "problem_id": "3321",
      "frontend_id": "3024",
      "difficulty": "Easy",
      "problem_slug": "type-of-triangle",
      "topics": [
        "Array",
        "Math",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Ways to Place People I",
      "problem_id": "3278",
      "frontend_id": "3025",
      "difficulty": "Medium",
      "problem_slug": "find-the-number-of-ways-to-place-people-i",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Good Subarray Sum",
      "problem_id": "3265",
      "frontend_id": "3026",
      "difficulty": "Medium",
      "problem_slug": "maximum-good-subarray-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Ways to Place People II",
      "problem_id": "3277",
      "frontend_id": "3027",
      "difficulty": "Hard",
      "problem_slug": "find-the-number-of-ways-to-place-people-ii",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Ant on the Boundary",
      "problem_id": "3311",
      "frontend_id": "3028",
      "difficulty": "Easy",
      "problem_slug": "ant-on-the-boundary",
      "topics": [
        "Array",
        "Simulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Revert Word to Initial State I",
      "problem_id": "3297",
      "frontend_id": "3029",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-revert-word-to-initial-state-i",
      "topics": [
        "String",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Grid of Region Average",
      "problem_id": "3272",
      "frontend_id": "3030",
      "difficulty": "Medium",
      "problem_slug": "find-the-grid-of-region-average",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Revert Word to Initial State II",
      "problem_id": "3296",
      "frontend_id": "3031",
      "difficulty": "Hard",
      "problem_slug": "minimum-time-to-revert-word-to-initial-state-ii",
      "topics": [
        "String",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Modify the Matrix",
      "problem_id": "3330",
      "frontend_id": "3033",
      "difficulty": "Easy",
      "problem_slug": "modify-the-matrix",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Subarrays That Match a Pattern I",
      "problem_id": "3269",
      "frontend_id": "3034",
      "difficulty": "Medium",
      "problem_slug": "number-of-subarrays-that-match-a-pattern-i",
      "topics": [
        "Array",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Palindromes After Operations",
      "problem_id": "3317",
      "frontend_id": "3035",
      "difficulty": "Medium",
      "problem_slug": "maximum-palindromes-after-operations",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Greedy",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Subarrays That Match a Pattern II",
      "problem_id": "3290",
      "frontend_id": "3036",
      "difficulty": "Hard",
      "problem_slug": "number-of-subarrays-that-match-a-pattern-ii",
      "topics": [
        "Array",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Operations With the Same Score I",
      "problem_id": "3320",
      "frontend_id": "3038",
      "difficulty": "Easy",
      "problem_slug": "maximum-number-of-operations-with-the-same-score-i",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations to Make String Empty",
      "problem_id": "3308",
      "frontend_id": "3039",
      "difficulty": "Medium",
      "problem_slug": "apply-operations-to-make-string-empty",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Operations With the Same Score II",
      "problem_id": "3318",
      "frontend_id": "3040",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-operations-with-the-same-score-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Memoization"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Consecutive Elements in an Array After Modification",
      "problem_id": "3298",
      "frontend_id": "3041",
      "difficulty": "Hard",
      "problem_slug": "maximize-consecutive-elements-in-an-array-after-modification",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Prefix and Suffix Pairs I",
      "problem_id": "3309",
      "frontend_id": "3042",
      "difficulty": "Easy",
      "problem_slug": "count-prefix-and-suffix-pairs-i",
      "topics": [
        "Array",
        "String",
        "Trie",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Length of the Longest Common Prefix",
      "problem_id": "3329",
      "frontend_id": "3043",
      "difficulty": "Medium",
      "problem_slug": "find-the-length-of-the-longest-common-prefix",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Frequent Prime",
      "problem_id": "3314",
      "frontend_id": "3044",
      "difficulty": "Medium",
      "problem_slug": "most-frequent-prime",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Matrix",
        "Counting",
        "Enumeration",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Prefix and Suffix Pairs II",
      "problem_id": "3305",
      "frontend_id": "3045",
      "difficulty": "Hard",
      "problem_slug": "count-prefix-and-suffix-pairs-ii",
      "topics": [
        "Array",
        "String",
        "Trie",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Split the Array",
      "problem_id": "3324",
      "frontend_id": "3046",
      "difficulty": "Easy",
      "problem_slug": "split-the-array",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Largest Area of Square Inside Two Rectangles",
      "problem_id": "3325",
      "frontend_id": "3047",
      "difficulty": "Medium",
      "problem_slug": "find-the-largest-area-of-square-inside-two-rectangles",
      "topics": [
        "Array",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Earliest Second to Mark Indices I",
      "problem_id": "3292",
      "frontend_id": "3048",
      "difficulty": "Medium",
      "problem_slug": "earliest-second-to-mark-indices-i",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Earliest Second to Mark Indices II",
      "problem_id": "3289",
      "frontend_id": "3049",
      "difficulty": "Hard",
      "problem_slug": "earliest-second-to-mark-indices-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Exceed Threshold Value I",
      "problem_id": "3331",
      "frontend_id": "3065",
      "difficulty": "Easy",
      "problem_slug": "minimum-operations-to-exceed-threshold-value-i",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Exceed Threshold Value II",
      "problem_id": "3332",
      "frontend_id": "3066",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-exceed-threshold-value-ii",
      "topics": [
        "Array",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
      "problem_id": "3326",
      "frontend_id": "3067",
      "difficulty": "Medium",
      "problem_slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
      "topics": [
        "Array",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Sum of Node Values",
      "problem_id": "3307",
      "frontend_id": "3068",
      "difficulty": "Hard",
      "problem_slug": "find-the-maximum-sum-of-node-values",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Bit Manipulation",
        "Tree",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Elements Into Two Arrays I",
      "problem_id": "3347",
      "frontend_id": "3069",
      "difficulty": "Easy",
      "problem_slug": "distribute-elements-into-two-arrays-i",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Submatrices with Top-Left Element and Sum Less Than k",
      "problem_id": "3338",
      "frontend_id": "3070",
      "difficulty": "Medium",
      "problem_slug": "count-submatrices-with-top-left-element-and-sum-less-than-k",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Write the Letter Y on a Grid",
      "problem_id": "3335",
      "frontend_id": "3071",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-write-the-letter-y-on-a-grid",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Distribute Elements Into Two Arrays II",
      "problem_id": "3350",
      "frontend_id": "3072",
      "difficulty": "Hard",
      "problem_slug": "distribute-elements-into-two-arrays-ii",
      "topics": [
        "Array",
        "Binary Indexed Tree",
        "Segment Tree",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apple Redistribution into Boxes",
      "problem_id": "3334",
      "frontend_id": "3074",
      "difficulty": "Easy",
      "problem_slug": "apple-redistribution-into-boxes",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Happiness of Selected Children",
      "problem_id": "3351",
      "frontend_id": "3075",
      "difficulty": "Medium",
      "problem_slug": "maximize-happiness-of-selected-children",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Uncommon Substring in an Array",
      "problem_id": "3356",
      "frontend_id": "3076",
      "difficulty": "Medium",
      "problem_slug": "shortest-uncommon-substring-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Strength of K Disjoint Subarrays",
      "problem_id": "3313",
      "frontend_id": "3077",
      "difficulty": "Hard",
      "problem_slug": "maximum-strength-of-k-disjoint-subarrays",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Sum of Encrypted Integers",
      "problem_id": "3367",
      "frontend_id": "3079",
      "difficulty": "Easy",
      "problem_slug": "find-the-sum-of-encrypted-integers",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Mark Elements on Array by Performing Queries",
      "problem_id": "3306",
      "frontend_id": "3080",
      "difficulty": "Medium",
      "problem_slug": "mark-elements-on-array-by-performing-queries",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Replace Question Marks in String to Minimize Its Value",
      "problem_id": "3354",
      "frontend_id": "3081",
      "difficulty": "Medium",
      "problem_slug": "replace-question-marks-in-string-to-minimize-its-value",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Sum of the Power of All Subsequences",
      "problem_id": "3345",
      "frontend_id": "3082",
      "difficulty": "Hard",
      "problem_slug": "find-the-sum-of-the-power-of-all-subsequences",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Existence of a Substring in a String and Its Reverse",
      "problem_id": "3353",
      "frontend_id": "3083",
      "difficulty": "Easy",
      "problem_slug": "existence-of-a-substring-in-a-string-and-its-reverse",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings Starting and Ending with Given Character",
      "problem_id": "3337",
      "frontend_id": "3084",
      "difficulty": "Medium",
      "problem_slug": "count-substrings-starting-and-ending-with-given-character",
      "topics": [
        "Math",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Deletions to Make String K-Special",
      "problem_id": "3360",
      "frontend_id": "3085",
      "difficulty": "Medium",
      "problem_slug": "minimum-deletions-to-make-string-k-special",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Pick K Ones",
      "problem_id": "3327",
      "frontend_id": "3086",
      "difficulty": "Hard",
      "problem_slug": "minimum-moves-to-pick-k-ones",
      "topics": [
        "Array",
        "Greedy",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Length Substring With Two Occurrences",
      "problem_id": "3349",
      "frontend_id": "3090",
      "difficulty": "Easy",
      "problem_slug": "maximum-length-substring-with-two-occurrences",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
      "problem_id": "3328",
      "frontend_id": "3091",
      "difficulty": "Medium",
      "problem_slug": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k",
      "topics": [
        "Math",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Most Frequent IDs",
      "problem_id": "3363",
      "frontend_id": "3092",
      "difficulty": "Medium",
      "problem_slug": "most-frequent-ids",
      "topics": [
        "Array",
        "Hash Table",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Common Suffix Queries",
      "problem_id": "3376",
      "frontend_id": "3093",
      "difficulty": "Hard",
      "problem_slug": "longest-common-suffix-queries",
      "topics": [
        "Array",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Subarray With OR at Least K I",
      "problem_id": "3381",
      "frontend_id": "3095",
      "difficulty": "Easy",
      "problem_slug": "shortest-subarray-with-or-at-least-k-i",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Levels to Gain More Points",
      "problem_id": "3355",
      "frontend_id": "3096",
      "difficulty": "Medium",
      "problem_slug": "minimum-levels-to-gain-more-points",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Subarray With OR at Least K II",
      "problem_id": "3380",
      "frontend_id": "3097",
      "difficulty": "Medium",
      "problem_slug": "shortest-subarray-with-or-at-least-k-ii",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Sum of Subsequence Powers",
      "problem_id": "3316",
      "frontend_id": "3098",
      "difficulty": "Hard",
      "problem_slug": "find-the-sum-of-subsequence-powers",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Harshad Number",
      "problem_id": "3371",
      "frontend_id": "3099",
      "difficulty": "Easy",
      "problem_slug": "harshad-number",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Water Bottles II",
      "problem_id": "3336",
      "frontend_id": "3100",
      "difficulty": "Medium",
      "problem_slug": "water-bottles-ii",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Alternating Subarrays",
      "problem_id": "3374",
      "frontend_id": "3101",
      "difficulty": "Medium",
      "problem_slug": "count-alternating-subarrays",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Manhattan Distances",
      "problem_id": "3344",
      "frontend_id": "3102",
      "difficulty": "Hard",
      "problem_slug": "minimize-manhattan-distances",
      "topics": [
        "Array",
        "Math",
        "Geometry",
        "Sorting",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
      "problem_id": "3372",
      "frontend_id": "3105",
      "difficulty": "Easy",
      "problem_slug": "longest-strictly-increasing-or-strictly-decreasing-subarray",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest String After Operations With Constraint",
      "problem_id": "3346",
      "frontend_id": "3106",
      "difficulty": "Medium",
      "problem_slug": "lexicographically-smallest-string-after-operations-with-constraint",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Median of Array Equal to K",
      "problem_id": "3387",
      "frontend_id": "3107",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-median-of-array-equal-to-k",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost Walk in Weighted Graph",
      "problem_id": "3348",
      "frontend_id": "3108",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-walk-in-weighted-graph",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Score of a String",
      "problem_id": "3379",
      "frontend_id": "3110",
      "difficulty": "Easy",
      "problem_slug": "score-of-a-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Rectangles to Cover Points",
      "problem_id": "3390",
      "frontend_id": "3111",
      "difficulty": "Medium",
      "problem_slug": "minimum-rectangles-to-cover-points",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Visit Disappearing Nodes",
      "problem_id": "3389",
      "frontend_id": "3112",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-visit-disappearing-nodes",
      "topics": [
        "Array",
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
      "problem_id": "3382",
      "frontend_id": "3113",
      "difficulty": "Hard",
      "problem_slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum",
      "topics": [
        "Array",
        "Binary Search",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Latest Time You Can Obtain After Replacing Characters",
      "problem_id": "3361",
      "frontend_id": "3114",
      "difficulty": "Easy",
      "problem_slug": "latest-time-you-can-obtain-after-replacing-characters",
      "topics": [
        "String",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Prime Difference",
      "problem_id": "3373",
      "frontend_id": "3115",
      "difficulty": "Medium",
      "problem_slug": "maximum-prime-difference",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Smallest Amount With Single Denomination Combination",
      "problem_id": "3375",
      "frontend_id": "3116",
      "difficulty": "Hard",
      "problem_slug": "kth-smallest-amount-with-single-denomination-combination",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Bit Manipulation",
        "Combinatorics",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Sum of Values by Dividing Array",
      "problem_id": "3364",
      "frontend_id": "3117",
      "difficulty": "Hard",
      "problem_slug": "minimum-sum-of-values-by-dividing-array",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Bit Manipulation",
        "Segment Tree",
        "Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Special Characters I",
      "problem_id": "3408",
      "frontend_id": "3120",
      "difficulty": "Easy",
      "problem_slug": "count-the-number-of-special-characters-i",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Special Characters II",
      "problem_id": "3405",
      "frontend_id": "3121",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-special-characters-ii",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Satisfy Conditions",
      "problem_id": "3404",
      "frontend_id": "3122",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-satisfy-conditions",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Edges in Shortest Paths",
      "problem_id": "3386",
      "frontend_id": "3123",
      "difficulty": "Hard",
      "problem_slug": "find-edges-in-shortest-paths",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make a Square with the Same Color",
      "problem_id": "3398",
      "frontend_id": "3127",
      "difficulty": "Easy",
      "problem_slug": "make-a-square-with-the-same-color",
      "topics": [
        "Array",
        "Matrix",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Right Triangles",
      "problem_id": "3388",
      "frontend_id": "3128",
      "difficulty": "Medium",
      "problem_slug": "right-triangles",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Combinatorics",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Possible Stable Binary Arrays I",
      "problem_id": "3406",
      "frontend_id": "3129",
      "difficulty": "Medium",
      "problem_slug": "find-all-possible-stable-binary-arrays-i",
      "topics": [
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find All Possible Stable Binary Arrays II",
      "problem_id": "3407",
      "frontend_id": "3130",
      "difficulty": "Hard",
      "problem_slug": "find-all-possible-stable-binary-arrays-ii",
      "topics": [
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Integer Added to Array I",
      "problem_id": "3397",
      "frontend_id": "3131",
      "difficulty": "Easy",
      "problem_slug": "find-the-integer-added-to-array-i",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Integer Added to Array II",
      "problem_id": "3399",
      "frontend_id": "3132",
      "difficulty": "Medium",
      "problem_slug": "find-the-integer-added-to-array-ii",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Array End",
      "problem_id": "3394",
      "frontend_id": "3133",
      "difficulty": "Medium",
      "problem_slug": "minimum-array-end",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Median of the Uniqueness Array",
      "problem_id": "3362",
      "frontend_id": "3134",
      "difficulty": "Hard",
      "problem_slug": "find-the-median-of-the-uniqueness-array",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Valid Word",
      "problem_id": "3396",
      "frontend_id": "3136",
      "difficulty": "Easy",
      "problem_slug": "valid-word",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make Word K-Periodic",
      "problem_id": "3384",
      "frontend_id": "3137",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-operations-to-make-word-k-periodic",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Length of Anagram Concatenation",
      "problem_id": "3395",
      "frontend_id": "3138",
      "difficulty": "Medium",
      "problem_slug": "minimum-length-of-anagram-concatenation",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Equalize Array",
      "problem_id": "3402",
      "frontend_id": "3139",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-equalize-array",
      "topics": [
        "Array",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Grid Satisfies Conditions",
      "problem_id": "3415",
      "frontend_id": "3142",
      "difficulty": "Easy",
      "problem_slug": "check-if-grid-satisfies-conditions",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Points Inside the Square",
      "problem_id": "3419",
      "frontend_id": "3143",
      "difficulty": "Medium",
      "problem_slug": "maximum-points-inside-the-square",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Substring Partition of Equal Character Frequency",
      "problem_id": "3403",
      "frontend_id": "3144",
      "difficulty": "Medium",
      "problem_slug": "minimum-substring-partition-of-equal-character-frequency",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Products of Elements of Big Array",
      "problem_id": "3411",
      "frontend_id": "3145",
      "difficulty": "Hard",
      "problem_slug": "find-products-of-elements-of-big-array",
      "topics": [
        "Array",
        "Binary Search",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Permutation Difference between Two Strings",
      "problem_id": "3412",
      "frontend_id": "3146",
      "difficulty": "Easy",
      "problem_slug": "permutation-difference-between-two-strings",
      "topics": [
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Taking Maximum Energy From the Mystic Dungeon",
      "problem_id": "3383",
      "frontend_id": "3147",
      "difficulty": "Medium",
      "problem_slug": "taking-maximum-energy-from-the-mystic-dungeon",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Difference Score in a Grid",
      "problem_id": "3391",
      "frontend_id": "3148",
      "difficulty": "Medium",
      "problem_slug": "maximum-difference-score-in-a-grid",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Minimum Cost Array Permutation",
      "problem_id": "3431",
      "frontend_id": "3149",
      "difficulty": "Hard",
      "problem_slug": "find-the-minimum-cost-array-permutation",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Special Array I",
      "problem_id": "3429",
      "frontend_id": "3151",
      "difficulty": "Easy",
      "problem_slug": "special-array-i",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Special Array II",
      "problem_id": "3427",
      "frontend_id": "3152",
      "difficulty": "Medium",
      "problem_slug": "special-array-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Digit Differences of All Pairs",
      "problem_id": "3416",
      "frontend_id": "3153",
      "difficulty": "Medium",
      "problem_slug": "sum-of-digit-differences-of-all-pairs",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Number of Ways to Reach the K-th Stair",
      "problem_id": "3414",
      "frontend_id": "3154",
      "difficulty": "Hard",
      "problem_slug": "find-number-of-ways-to-reach-the-k-th-stair",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Bit Manipulation",
        "Memoization",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the XOR of Numbers Which Appear Twice",
      "problem_id": "3428",
      "frontend_id": "3158",
      "difficulty": "Easy",
      "problem_slug": "find-the-xor-of-numbers-which-appear-twice",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Occurrences of an Element in an Array",
      "problem_id": "3420",
      "frontend_id": "3159",
      "difficulty": "Medium",
      "problem_slug": "find-occurrences-of-an-element-in-an-array",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Distinct Colors Among the Balls",
      "problem_id": "3434",
      "frontend_id": "3160",
      "difficulty": "Medium",
      "problem_slug": "find-the-number-of-distinct-colors-among-the-balls",
      "topics": [
        "Array",
        "Hash Table",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Block Placement Queries",
      "problem_id": "3435",
      "frontend_id": "3161",
      "difficulty": "Hard",
      "problem_slug": "block-placement-queries",
      "topics": [
        "Array",
        "Binary Search",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Good Pairs I",
      "problem_id": "3446",
      "frontend_id": "3162",
      "difficulty": "Easy",
      "problem_slug": "find-the-number-of-good-pairs-i",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "String Compression III",
      "problem_id": "3451",
      "frontend_id": "3163",
      "difficulty": "Medium",
      "problem_slug": "string-compression-iii",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Good Pairs II",
      "problem_id": "3444",
      "frontend_id": "3164",
      "difficulty": "Medium",
      "problem_slug": "find-the-number-of-good-pairs-ii",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum of Subsequence With Non-adjacent Elements",
      "problem_id": "3423",
      "frontend_id": "3165",
      "difficulty": "Hard",
      "problem_slug": "maximum-sum-of-subsequence-with-non-adjacent-elements",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Dynamic Programming",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Chairs in a Waiting Room",
      "problem_id": "3426",
      "frontend_id": "3168",
      "difficulty": "Easy",
      "problem_slug": "minimum-number-of-chairs-in-a-waiting-room",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Days Without Meetings",
      "problem_id": "3430",
      "frontend_id": "3169",
      "difficulty": "Medium",
      "problem_slug": "count-days-without-meetings",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Minimum String After Removing Stars",
      "problem_id": "3445",
      "frontend_id": "3170",
      "difficulty": "Medium",
      "problem_slug": "lexicographically-minimum-string-after-removing-stars",
      "topics": [
        "Hash Table",
        "String",
        "Stack",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Subarray With Bitwise OR Closest to K",
      "problem_id": "3436",
      "frontend_id": "3171",
      "difficulty": "Hard",
      "problem_slug": "find-subarray-with-bitwise-or-closest-to-k",
      "topics": [
        "Array",
        "Binary Search",
        "Bit Manipulation",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Clear Digits",
      "problem_id": "3447",
      "frontend_id": "3174",
      "difficulty": "Easy",
      "problem_slug": "clear-digits",
      "topics": [
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find The First Player to win K Games in a Row",
      "problem_id": "3413",
      "frontend_id": "3175",
      "difficulty": "Medium",
      "problem_slug": "find-the-first-player-to-win-k-games-in-a-row",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Length of a Good Subsequence I",
      "problem_id": "3456",
      "frontend_id": "3176",
      "difficulty": "Medium",
      "problem_slug": "find-the-maximum-length-of-a-good-subsequence-i",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Length of a Good Subsequence II",
      "problem_id": "3452",
      "frontend_id": "3177",
      "difficulty": "Hard",
      "problem_slug": "find-the-maximum-length-of-a-good-subsequence-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Child Who Has the Ball After K Seconds",
      "problem_id": "3450",
      "frontend_id": "3178",
      "difficulty": "Easy",
      "problem_slug": "find-the-child-who-has-the-ball-after-k-seconds",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the N-th Value After K Seconds",
      "problem_id": "3422",
      "frontend_id": "3179",
      "difficulty": "Medium",
      "problem_slug": "find-the-n-th-value-after-k-seconds",
      "topics": [
        "Array",
        "Math",
        "Simulation",
        "Combinatorics",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Total Reward Using Operations I",
      "problem_id": "3442",
      "frontend_id": "3180",
      "difficulty": "Medium",
      "problem_slug": "maximum-total-reward-using-operations-i",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Total Reward Using Operations II",
      "problem_id": "3443",
      "frontend_id": "3181",
      "difficulty": "Hard",
      "problem_slug": "maximum-total-reward-using-operations-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs That Form a Complete Day I",
      "problem_id": "3421",
      "frontend_id": "3184",
      "difficulty": "Easy",
      "problem_slug": "count-pairs-that-form-a-complete-day-i",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Pairs That Form a Complete Day II",
      "problem_id": "3418",
      "frontend_id": "3185",
      "difficulty": "Medium",
      "problem_slug": "count-pairs-that-form-a-complete-day-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Total Damage With Spell Casting",
      "problem_id": "3437",
      "frontend_id": "3186",
      "difficulty": "Medium",
      "problem_slug": "maximum-total-damage-with-spell-casting",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "Binary Search",
        "Dynamic Programming",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Peaks in Array",
      "problem_id": "3438",
      "frontend_id": "3187",
      "difficulty": "Hard",
      "problem_slug": "peaks-in-array",
      "topics": [
        "Array",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum Operations to Make All Elements Divisible by Three",
      "problem_id": "3476",
      "frontend_id": "3190",
      "difficulty": "Easy",
      "problem_slug": "find-minimum-operations-to-make-all-elements-divisible-by-three",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Binary Array Elements Equal to One I",
      "problem_id": "3475",
      "frontend_id": "3191",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-i",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Queue",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Binary Array Elements Equal to One II",
      "problem_id": "3477",
      "frontend_id": "3192",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Inversions",
      "problem_id": "3460",
      "frontend_id": "3193",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-inversions",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Average of Smallest and Largest Elements",
      "problem_id": "3471",
      "frontend_id": "3194",
      "difficulty": "Easy",
      "problem_slug": "minimum-average-of-smallest-and-largest-elements",
      "topics": [
        "Array",
        "Two Pointers",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Minimum Area to Cover All Ones I",
      "problem_id": "3461",
      "frontend_id": "3195",
      "difficulty": "Medium",
      "problem_slug": "find-the-minimum-area-to-cover-all-ones-i",
      "topics": [
        "Array",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Total Cost of Alternating Subarrays",
      "problem_id": "3464",
      "frontend_id": "3196",
      "difficulty": "Medium",
      "problem_slug": "maximize-total-cost-of-alternating-subarrays",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Minimum Area to Cover All Ones II",
      "problem_id": "3459",
      "frontend_id": "3197",
      "difficulty": "Hard",
      "problem_slug": "find-the-minimum-area-to-cover-all-ones-ii",
      "topics": [
        "Array",
        "Matrix",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Height of a Triangle",
      "problem_id": "3469",
      "frontend_id": "3200",
      "difficulty": "Easy",
      "problem_slug": "maximum-height-of-a-triangle",
      "topics": [
        "Array",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Length of Valid Subsequence I",
      "problem_id": "3490",
      "frontend_id": "3201",
      "difficulty": "Medium",
      "problem_slug": "find-the-maximum-length-of-valid-subsequence-i",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Length of Valid Subsequence II",
      "problem_id": "3491",
      "frontend_id": "3202",
      "difficulty": "Medium",
      "problem_slug": "find-the-maximum-length-of-valid-subsequence-ii",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum Diameter After Merging Two Trees",
      "problem_id": "3439",
      "frontend_id": "3203",
      "difficulty": "Hard",
      "problem_slug": "find-minimum-diameter-after-merging-two-trees",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Alternating Groups I",
      "problem_id": "3463",
      "frontend_id": "3206",
      "difficulty": "Easy",
      "problem_slug": "alternating-groups-i",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Points After Enemy Battles",
      "problem_id": "3264",
      "frontend_id": "3207",
      "difficulty": "Medium",
      "problem_slug": "maximum-points-after-enemy-battles",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Alternating Groups II",
      "problem_id": "3483",
      "frontend_id": "3208",
      "difficulty": "Medium",
      "problem_slug": "alternating-groups-ii",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Subarrays With AND Value of K",
      "problem_id": "3466",
      "frontend_id": "3209",
      "difficulty": "Hard",
      "problem_slug": "number-of-subarrays-with-and-value-of-k",
      "topics": [
        "Array",
        "Binary Search",
        "Bit Manipulation",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Encrypted String",
      "problem_id": "3468",
      "frontend_id": "3210",
      "difficulty": "Easy",
      "problem_slug": "find-the-encrypted-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Generate Binary Strings Without Adjacent Zeros",
      "problem_id": "3453",
      "frontend_id": "3211",
      "difficulty": "Medium",
      "problem_slug": "generate-binary-strings-without-adjacent-zeros",
      "topics": [
        "String",
        "Backtracking",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Submatrices With Equal Frequency of X and Y",
      "problem_id": "3492",
      "frontend_id": "3212",
      "difficulty": "Medium",
      "problem_slug": "count-submatrices-with-equal-frequency-of-x-and-y",
      "topics": [
        "Array",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct String with Minimum Cost",
      "problem_id": "3482",
      "frontend_id": "3213",
      "difficulty": "Hard",
      "problem_slug": "construct-string-with-minimum-cost",
      "topics": [
        "Array",
        "String",
        "Dynamic Programming",
        "Suffix Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest String After a Swap",
      "problem_id": "3484",
      "frontend_id": "3216",
      "difficulty": "Easy",
      "problem_slug": "lexicographically-smallest-string-after-a-swap",
      "topics": [
        "String",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Delete Nodes From Linked List Present in Array",
      "problem_id": "3501",
      "frontend_id": "3217",
      "difficulty": "Medium",
      "problem_slug": "delete-nodes-from-linked-list-present-in-array",
      "topics": [
        "Array",
        "Hash Table",
        "Linked List"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost for Cutting Cake I",
      "problem_id": "3494",
      "frontend_id": "3218",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-for-cutting-cake-i",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost for Cutting Cake II",
      "problem_id": "3500",
      "frontend_id": "3219",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-for-cutting-cake-ii",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Odd and Even Transactions",
      "problem_id": "3530",
      "frontend_id": "3220",
      "difficulty": "Medium",
      "problem_slug": "odd-and-even-transactions",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find the Winning Player in Coin Game",
      "problem_id": "3511",
      "frontend_id": "3222",
      "difficulty": "Easy",
      "problem_slug": "find-the-winning-player-in-coin-game",
      "topics": [
        "Math",
        "Simulation",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Length of String After Operations",
      "problem_id": "3455",
      "frontend_id": "3223",
      "difficulty": "Medium",
      "problem_slug": "minimum-length-of-string-after-operations",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Array Changes to Make Differences Equal",
      "problem_id": "3498",
      "frontend_id": "3224",
      "difficulty": "Medium",
      "problem_slug": "minimum-array-changes-to-make-differences-equal",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score From Grid Operations",
      "problem_id": "3470",
      "frontend_id": "3225",
      "difficulty": "Hard",
      "problem_slug": "maximum-score-from-grid-operations",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Bit Changes to Make Two Integers Equal",
      "problem_id": "3508",
      "frontend_id": "3226",
      "difficulty": "Easy",
      "problem_slug": "number-of-bit-changes-to-make-two-integers-equal",
      "topics": [
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Vowels Game in a String",
      "problem_id": "3462",
      "frontend_id": "3227",
      "difficulty": "Medium",
      "problem_slug": "vowels-game-in-a-string",
      "topics": [
        "Math",
        "String",
        "Brainteaser",
        "Game Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Operations to Move Ones to the End",
      "problem_id": "3493",
      "frontend_id": "3228",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-operations-to-move-ones-to-the-end",
      "topics": [
        "String",
        "Greedy",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Array Equal to Target",
      "problem_id": "3454",
      "frontend_id": "3229",
      "difficulty": "Hard",
      "problem_slug": "minimum-operations-to-make-array-equal-to-target",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find if Digit Game Can Be Won",
      "problem_id": "3515",
      "frontend_id": "3232",
      "difficulty": "Easy",
      "problem_slug": "find-if-digit-game-can-be-won",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Count of Numbers Which Are Not Special",
      "problem_id": "3507",
      "frontend_id": "3233",
      "difficulty": "Medium",
      "problem_slug": "find-the-count-of-numbers-which-are-not-special",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Substrings With Dominant Ones",
      "problem_id": "3479",
      "frontend_id": "3234",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-substrings-with-dominant-ones",
      "topics": [
        "String",
        "Sliding Window",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if the Rectangle Corner Is Reachable",
      "problem_id": "3478",
      "frontend_id": "3235",
      "difficulty": "Hard",
      "problem_slug": "check-if-the-rectangle-corner-is-reachable",
      "topics": [
        "Array",
        "Math",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Winning Players",
      "problem_id": "3519",
      "frontend_id": "3238",
      "difficulty": "Easy",
      "problem_slug": "find-the-number-of-winning-players",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Flips to Make Binary Grid Palindromic I",
      "problem_id": "3526",
      "frontend_id": "3239",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-flips-to-make-binary-grid-palindromic-i",
      "topics": [
        "Array",
        "Two Pointers",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Flips to Make Binary Grid Palindromic II",
      "problem_id": "3524",
      "frontend_id": "3240",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-flips-to-make-binary-grid-palindromic-ii",
      "topics": [
        "Array",
        "Two Pointers",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Time Taken to Mark All Nodes",
      "problem_id": "3532",
      "frontend_id": "3241",
      "difficulty": "Hard",
      "problem_slug": "time-taken-to-mark-all-nodes",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Neighbor Sum Service",
      "problem_id": "3516",
      "frontend_id": "3242",
      "difficulty": "Easy",
      "problem_slug": "design-neighbor-sum-service",
      "topics": [
        "Array",
        "Hash Table",
        "Design",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Distance After Road Addition Queries I",
      "problem_id": "3517",
      "frontend_id": "3243",
      "difficulty": "Medium",
      "problem_slug": "shortest-distance-after-road-addition-queries-i",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Distance After Road Addition Queries II",
      "problem_id": "3514",
      "frontend_id": "3244",
      "difficulty": "Hard",
      "problem_slug": "shortest-distance-after-road-addition-queries-ii",
      "topics": [
        "Array",
        "Greedy",
        "Graph",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Alternating Groups III",
      "problem_id": "3527",
      "frontend_id": "3245",
      "difficulty": "Hard",
      "problem_slug": "alternating-groups-iii",
      "topics": [
        "Array",
        "Binary Indexed Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Snake in Matrix",
      "problem_id": "3533",
      "frontend_id": "3248",
      "difficulty": "Easy",
      "problem_slug": "snake-in-matrix",
      "topics": [
        "Array",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Good Nodes",
      "problem_id": "3486",
      "frontend_id": "3249",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-good-nodes",
      "topics": [
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Count of Monotonic Pairs I",
      "problem_id": "3535",
      "frontend_id": "3250",
      "difficulty": "Hard",
      "problem_slug": "find-the-count-of-monotonic-pairs-i",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Combinatorics",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Count of Monotonic Pairs II",
      "problem_id": "3536",
      "frontend_id": "3251",
      "difficulty": "Hard",
      "problem_slug": "find-the-count-of-monotonic-pairs-ii",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Combinatorics",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Power of K-Size Subarrays I",
      "problem_id": "3522",
      "frontend_id": "3254",
      "difficulty": "Medium",
      "problem_slug": "find-the-power-of-k-size-subarrays-i",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Power of K-Size Subarrays II",
      "problem_id": "3523",
      "frontend_id": "3255",
      "difficulty": "Medium",
      "problem_slug": "find-the-power-of-k-size-subarrays-ii",
      "topics": [
        "Array",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Value Sum by Placing Three Rooks I",
      "problem_id": "3550",
      "frontend_id": "3256",
      "difficulty": "Hard",
      "problem_slug": "maximum-value-sum-by-placing-three-rooks-i",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Value Sum by Placing Three Rooks II",
      "problem_id": "3542",
      "frontend_id": "3257",
      "difficulty": "Hard",
      "problem_slug": "maximum-value-sum-by-placing-three-rooks-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings That Satisfy K-Constraint I",
      "problem_id": "3543",
      "frontend_id": "3258",
      "difficulty": "Easy",
      "problem_slug": "count-substrings-that-satisfy-k-constraint-i",
      "topics": [
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Energy Boost From Two Drinks",
      "problem_id": "3525",
      "frontend_id": "3259",
      "difficulty": "Medium",
      "problem_slug": "maximum-energy-boost-from-two-drinks",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Largest Palindrome Divisible by K",
      "problem_id": "3552",
      "frontend_id": "3260",
      "difficulty": "Hard",
      "problem_slug": "find-the-largest-palindrome-divisible-by-k",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming",
        "Greedy",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings That Satisfy K-Constraint II",
      "problem_id": "3546",
      "frontend_id": "3261",
      "difficulty": "Hard",
      "problem_slug": "count-substrings-that-satisfy-k-constraint-ii",
      "topics": [
        "Array",
        "String",
        "Binary Search",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Final Array State After K Multiplication Operations I",
      "problem_id": "3555",
      "frontend_id": "3264",
      "difficulty": "Easy",
      "problem_slug": "final-array-state-after-k-multiplication-operations-i",
      "topics": [
        "Array",
        "Math",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Almost Equal Pairs I",
      "problem_id": "3534",
      "frontend_id": "3265",
      "difficulty": "Medium",
      "problem_slug": "count-almost-equal-pairs-i",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Final Array State After K Multiplication Operations II",
      "problem_id": "3556",
      "frontend_id": "3266",
      "difficulty": "Hard",
      "problem_slug": "final-array-state-after-k-multiplication-operations-ii",
      "topics": [
        "Array",
        "Heap (Priority Queue)",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Almost Equal Pairs II",
      "problem_id": "3544",
      "frontend_id": "3267",
      "difficulty": "Hard",
      "problem_slug": "count-almost-equal-pairs-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting",
        "Counting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Key of the Numbers",
      "problem_id": "3568",
      "frontend_id": "3270",
      "difficulty": "Easy",
      "problem_slug": "find-the-key-of-the-numbers",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Hash Divided String",
      "problem_id": "3540",
      "frontend_id": "3271",
      "difficulty": "Medium",
      "problem_slug": "hash-divided-string",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Count of Good Integers",
      "problem_id": "3548",
      "frontend_id": "3272",
      "difficulty": "Hard",
      "problem_slug": "find-the-count-of-good-integers",
      "topics": [
        "Hash Table",
        "Math",
        "Combinatorics",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Amount of Damage Dealt to Bob",
      "problem_id": "3531",
      "frontend_id": "3273",
      "difficulty": "Hard",
      "problem_slug": "minimum-amount-of-damage-dealt-to-bob",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Two Chessboard Squares Have the Same Color",
      "problem_id": "3553",
      "frontend_id": "3274",
      "difficulty": "Easy",
      "problem_slug": "check-if-two-chessboard-squares-have-the-same-color",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-th Nearest Obstacle Queries",
      "problem_id": "3495",
      "frontend_id": "3275",
      "difficulty": "Medium",
      "problem_slug": "k-th-nearest-obstacle-queries",
      "topics": [
        "Array",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Select Cells in Grid With Maximum Score",
      "problem_id": "3563",
      "frontend_id": "3276",
      "difficulty": "Hard",
      "problem_slug": "select-cells-in-grid-with-maximum-score",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Matrix",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum XOR Score Subarray Queries",
      "problem_id": "3551",
      "frontend_id": "3277",
      "difficulty": "Hard",
      "problem_slug": "maximum-xor-score-subarray-queries",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Convert Date to Binary",
      "problem_id": "3567",
      "frontend_id": "3280",
      "difficulty": "Easy",
      "problem_slug": "convert-date-to-binary",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Score of Numbers in Ranges",
      "problem_id": "3485",
      "frontend_id": "3281",
      "difficulty": "Medium",
      "problem_slug": "maximize-score-of-numbers-in-ranges",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reach End of Array With Max Score",
      "problem_id": "3528",
      "frontend_id": "3282",
      "difficulty": "Medium",
      "problem_slug": "reach-end-of-array-with-max-score",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Moves to Kill All Pawns",
      "problem_id": "3560",
      "frontend_id": "3283",
      "difficulty": "Hard",
      "problem_slug": "maximum-number-of-moves-to-kill-all-pawns",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation",
        "Breadth-First Search",
        "Game Theory",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Indices of Stable Mountains",
      "problem_id": "3582",
      "frontend_id": "3285",
      "difficulty": "Easy",
      "problem_slug": "find-indices-of-stable-mountains",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find a Safe Walk Through a Grid",
      "problem_id": "3558",
      "frontend_id": "3286",
      "difficulty": "Medium",
      "problem_slug": "find-a-safe-walk-through-a-grid",
      "topics": [
        "Array",
        "Breadth-First Search",
        "Graph",
        "Heap (Priority Queue)",
        "Matrix",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Sequence Value of Array",
      "problem_id": "3575",
      "frontend_id": "3287",
      "difficulty": "Hard",
      "problem_slug": "find-the-maximum-sequence-value-of-array",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of the Longest Increasing Path",
      "problem_id": "3571",
      "frontend_id": "3288",
      "difficulty": "Hard",
      "problem_slug": "length-of-the-longest-increasing-path",
      "topics": [
        "Array",
        "Binary Search",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "The Two Sneaky Numbers of Digitville",
      "problem_id": "3581",
      "frontend_id": "3289",
      "difficulty": "Easy",
      "problem_slug": "the-two-sneaky-numbers-of-digitville",
      "topics": [
        "Array",
        "Hash Table",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Multiplication Score",
      "problem_id": "3518",
      "frontend_id": "3290",
      "difficulty": "Medium",
      "problem_slug": "maximum-multiplication-score",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Valid Strings to Form Target I",
      "problem_id": "3559",
      "frontend_id": "3291",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-valid-strings-to-form-target-i",
      "topics": [
        "Array",
        "String",
        "Binary Search",
        "Dynamic Programming",
        "Trie",
        "Segment Tree",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Valid Strings to Form Target II",
      "problem_id": "3557",
      "frontend_id": "3292",
      "difficulty": "Hard",
      "problem_slug": "minimum-number-of-valid-strings-to-form-target-ii",
      "topics": [
        "Array",
        "String",
        "Binary Search",
        "Dynamic Programming",
        "Segment Tree",
        "Rolling Hash",
        "String Matching",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Report Spam Message",
      "problem_id": "3541",
      "frontend_id": "3295",
      "difficulty": "Medium",
      "problem_slug": "report-spam-message",
      "topics": [
        "Array",
        "Hash Table",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Seconds to Make Mountain Height Zero",
      "problem_id": "3496",
      "frontend_id": "3296",
      "difficulty": "Medium",
      "problem_slug": "minimum-number-of-seconds-to-make-mountain-height-zero",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Greedy",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings That Can Be Rearranged to Contain a String I",
      "problem_id": "3573",
      "frontend_id": "3297",
      "difficulty": "Medium",
      "problem_slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-i",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings That Can Be Rearranged to Contain a String II",
      "problem_id": "3572",
      "frontend_id": "3298",
      "difficulty": "Hard",
      "problem_slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-ii",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Element After Replacement With Digit Sum",
      "problem_id": "3606",
      "frontend_id": "3300",
      "difficulty": "Easy",
      "problem_slug": "minimum-element-after-replacement-with-digit-sum",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Total Height of Unique Towers",
      "problem_id": "3510",
      "frontend_id": "3301",
      "difficulty": "Medium",
      "problem_slug": "maximize-the-total-height-of-unique-towers",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Lexicographically Smallest Valid Sequence",
      "problem_id": "3584",
      "frontend_id": "3302",
      "difficulty": "Medium",
      "problem_slug": "find-the-lexicographically-smallest-valid-sequence",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Occurrence of First Almost Equal Substring",
      "problem_id": "3580",
      "frontend_id": "3303",
      "difficulty": "Hard",
      "problem_slug": "find-the-occurrence-of-first-almost-equal-substring",
      "topics": [
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the K-th Character in String Game I",
      "problem_id": "3600",
      "frontend_id": "3304",
      "difficulty": "Easy",
      "problem_slug": "find-the-k-th-character-in-string-game-i",
      "topics": [
        "Math",
        "Bit Manipulation",
        "Recursion",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Substrings Containing Every Vowel and K Consonants I",
      "problem_id": "3570",
      "frontend_id": "3305",
      "difficulty": "Medium",
      "problem_slug": "count-of-substrings-containing-every-vowel-and-k-consonants-i",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count of Substrings Containing Every Vowel and K Consonants II",
      "problem_id": "3569",
      "frontend_id": "3306",
      "difficulty": "Medium",
      "problem_slug": "count-of-substrings-containing-every-vowel-and-k-consonants-ii",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the K-th Character in String Game II",
      "problem_id": "3601",
      "frontend_id": "3307",
      "difficulty": "Hard",
      "problem_slug": "find-the-k-th-character-in-string-game-ii",
      "topics": [
        "Math",
        "Bit Manipulation",
        "Recursion"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Possible Number by Binary Concatenation",
      "problem_id": "3579",
      "frontend_id": "3309",
      "difficulty": "Medium",
      "problem_slug": "maximum-possible-number-by-binary-concatenation",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Remove Methods From Project",
      "problem_id": "3561",
      "frontend_id": "3310",
      "difficulty": "Medium",
      "problem_slug": "remove-methods-from-project",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct 2D Grid Matching Graph Layout",
      "problem_id": "3578",
      "frontend_id": "3311",
      "difficulty": "Hard",
      "problem_slug": "construct-2d-grid-matching-graph-layout",
      "topics": [
        "Array",
        "Hash Table",
        "Graph",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sorted GCD Pair Queries",
      "problem_id": "3583",
      "frontend_id": "3312",
      "difficulty": "Hard",
      "problem_slug": "sorted-gcd-pair-queries",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Binary Search",
        "Combinatorics",
        "Counting",
        "Number Theory",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct the Minimum Bitwise Array I",
      "problem_id": "3605",
      "frontend_id": "3314",
      "difficulty": "Easy",
      "problem_slug": "construct-the-minimum-bitwise-array-i",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Construct the Minimum Bitwise Array II",
      "problem_id": "3611",
      "frontend_id": "3315",
      "difficulty": "Medium",
      "problem_slug": "construct-the-minimum-bitwise-array-ii",
      "topics": [
        "Array",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Maximum Removals From Source String",
      "problem_id": "3487",
      "frontend_id": "3316",
      "difficulty": "Medium",
      "problem_slug": "find-maximum-removals-from-source-string",
      "topics": [
        "Array",
        "Hash Table",
        "Two Pointers",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Possible Ways for an Event",
      "problem_id": "3604",
      "frontend_id": "3317",
      "difficulty": "Hard",
      "problem_slug": "find-the-number-of-possible-ways-for-an-event",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find X-Sum of All K-Long Subarrays I",
      "problem_id": "3610",
      "frontend_id": "3318",
      "difficulty": "Easy",
      "problem_slug": "find-x-sum-of-all-k-long-subarrays-i",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "K-th Largest Perfect Subtree Size in Binary Tree",
      "problem_id": "3509",
      "frontend_id": "3319",
      "difficulty": "Medium",
      "problem_slug": "k-th-largest-perfect-subtree-size-in-binary-tree",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Sorting",
        "Binary Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count The Number of Winning Sequences",
      "problem_id": "3588",
      "frontend_id": "3320",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-winning-sequences",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find X-Sum of All K-Long Subarrays II",
      "problem_id": "3592",
      "frontend_id": "3321",
      "difficulty": "Hard",
      "problem_slug": "find-x-sum-of-all-k-long-subarrays-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Sliding Window",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Sequence of Strings Appeared on the Screen",
      "problem_id": "3566",
      "frontend_id": "3324",
      "difficulty": "Medium",
      "problem_slug": "find-the-sequence-of-strings-appeared-on-the-screen",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings With K-Frequency Characters I",
      "problem_id": "3502",
      "frontend_id": "3325",
      "difficulty": "Medium",
      "problem_slug": "count-substrings-with-k-frequency-characters-i",
      "topics": [
        "Hash Table",
        "String",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Division Operations to Make Array Non Decreasing",
      "problem_id": "3607",
      "frontend_id": "3326",
      "difficulty": "Medium",
      "problem_slug": "minimum-division-operations-to-make-array-non-decreasing",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if DFS Strings Are Palindromes",
      "problem_id": "3603",
      "frontend_id": "3327",
      "difficulty": "Hard",
      "problem_slug": "check-if-dfs-strings-are-palindromes",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Tree",
        "Depth-First Search",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Original Typed String I",
      "problem_id": "3617",
      "frontend_id": "3330",
      "difficulty": "Easy",
      "problem_slug": "find-the-original-typed-string-i",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Subtree Sizes After Changes",
      "problem_id": "3576",
      "frontend_id": "3331",
      "difficulty": "Medium",
      "problem_slug": "find-subtree-sizes-after-changes",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Points Tourist Can Earn",
      "problem_id": "3587",
      "frontend_id": "3332",
      "difficulty": "Medium",
      "problem_slug": "maximum-points-tourist-can-earn",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Original Typed String II",
      "problem_id": "3618",
      "frontend_id": "3333",
      "difficulty": "Hard",
      "problem_slug": "find-the-original-typed-string-ii",
      "topics": [
        "String",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Factor Score of Array",
      "problem_id": "3593",
      "frontend_id": "3334",
      "difficulty": "Medium",
      "problem_slug": "find-the-maximum-factor-score-of-array",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Total Characters in String After Transformations I",
      "problem_id": "3629",
      "frontend_id": "3335",
      "difficulty": "Medium",
      "problem_slug": "total-characters-in-string-after-transformations-i",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Dynamic Programming",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Subsequences With Equal GCD",
      "problem_id": "3608",
      "frontend_id": "3336",
      "difficulty": "Hard",
      "problem_slug": "find-the-number-of-subsequences-with-equal-gcd",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Total Characters in String After Transformations II",
      "problem_id": "3630",
      "frontend_id": "3337",
      "difficulty": "Hard",
      "problem_slug": "total-characters-in-string-after-transformations-ii",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Dynamic Programming",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check Balanced String",
      "problem_id": "3636",
      "frontend_id": "3340",
      "difficulty": "Easy",
      "problem_slug": "check-balanced-string",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum Time to Reach Last Room I",
      "problem_id": "3627",
      "frontend_id": "3341",
      "difficulty": "Medium",
      "problem_slug": "find-minimum-time-to-reach-last-room-i",
      "topics": [
        "Array",
        "Graph",
        "Heap (Priority Queue)",
        "Matrix",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum Time to Reach Last Room II",
      "problem_id": "3628",
      "frontend_id": "3342",
      "difficulty": "Medium",
      "problem_slug": "find-minimum-time-to-reach-last-room-ii",
      "topics": [
        "Array",
        "Graph",
        "Heap (Priority Queue)",
        "Matrix",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Balanced Permutations",
      "problem_id": "3637",
      "frontend_id": "3343",
      "difficulty": "Hard",
      "problem_slug": "count-number-of-balanced-permutations",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Divisible Digit Product I",
      "problem_id": "3626",
      "frontend_id": "3345",
      "difficulty": "Easy",
      "problem_slug": "smallest-divisible-digit-product-i",
      "topics": [
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Frequency of an Element After Performing Operations I",
      "problem_id": "3622",
      "frontend_id": "3346",
      "difficulty": "Medium",
      "problem_slug": "maximum-frequency-of-an-element-after-performing-operations-i",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Frequency of an Element After Performing Operations II",
      "problem_id": "3640",
      "frontend_id": "3347",
      "difficulty": "Hard",
      "problem_slug": "maximum-frequency-of-an-element-after-performing-operations-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Sliding Window",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Divisible Digit Product II",
      "problem_id": "3635",
      "frontend_id": "3348",
      "difficulty": "Hard",
      "problem_slug": "smallest-divisible-digit-product-ii",
      "topics": [
        "Math",
        "String",
        "Backtracking",
        "Greedy",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Adjacent Increasing Subarrays Detection I",
      "problem_id": "3612",
      "frontend_id": "3349",
      "difficulty": "Easy",
      "problem_slug": "adjacent-increasing-subarrays-detection-i",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Adjacent Increasing Subarrays Detection II",
      "problem_id": "3619",
      "frontend_id": "3350",
      "difficulty": "Medium",
      "problem_slug": "adjacent-increasing-subarrays-detection-ii",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Good Subsequences",
      "problem_id": "3646",
      "frontend_id": "3351",
      "difficulty": "Hard",
      "problem_slug": "sum-of-good-subsequences",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count K-Reducible Numbers Less Than N",
      "problem_id": "3631",
      "frontend_id": "3352",
      "difficulty": "Hard",
      "problem_slug": "count-k-reducible-numbers-less-than-n",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Array Elements Equal to Zero",
      "problem_id": "3616",
      "frontend_id": "3354",
      "difficulty": "Easy",
      "problem_slug": "make-array-elements-equal-to-zero",
      "topics": [
        "Array",
        "Simulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Zero Array Transformation I",
      "problem_id": "3639",
      "frontend_id": "3355",
      "difficulty": "Medium",
      "problem_slug": "zero-array-transformation-i",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Zero Array Transformation II",
      "problem_id": "3643",
      "frontend_id": "3356",
      "difficulty": "Medium",
      "problem_slug": "zero-array-transformation-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize the Maximum Adjacent Element Difference",
      "problem_id": "3658",
      "frontend_id": "3357",
      "difficulty": "Hard",
      "problem_slug": "minimize-the-maximum-adjacent-element-difference",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Stone Removal Game",
      "problem_id": "3625",
      "frontend_id": "3360",
      "difficulty": "Easy",
      "problem_slug": "stone-removal-game",
      "topics": [
        "Math",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shift Distance Between Two Strings",
      "problem_id": "3591",
      "frontend_id": "3361",
      "difficulty": "Medium",
      "problem_slug": "shift-distance-between-two-strings",
      "topics": [
        "Array",
        "String",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Zero Array Transformation III",
      "problem_id": "3647",
      "frontend_id": "3362",
      "difficulty": "Medium",
      "problem_slug": "zero-array-transformation-iii",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Maximum Number of Fruits Collected",
      "problem_id": "3648",
      "frontend_id": "3363",
      "difficulty": "Hard",
      "problem_slug": "find-the-maximum-number-of-fruits-collected",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Positive Sum Subarray ",
      "problem_id": "3644",
      "frontend_id": "3364",
      "difficulty": "Easy",
      "problem_slug": "minimum-positive-sum-subarray",
      "topics": [
        "Array",
        "Sliding Window",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Rearrange K Substrings to Form Target String",
      "problem_id": "3595",
      "frontend_id": "3365",
      "difficulty": "Medium",
      "problem_slug": "rearrange-k-substrings-to-form-target-string",
      "topics": [
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Array Sum",
      "problem_id": "3654",
      "frontend_id": "3366",
      "difficulty": "Medium",
      "problem_slug": "minimum-array-sum",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Sum of Weights after Edge Removals",
      "problem_id": "3675",
      "frontend_id": "3367",
      "difficulty": "Hard",
      "problem_slug": "maximize-sum-of-weights-after-edge-removals",
      "topics": [
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Number With All Set Bits",
      "problem_id": "3676",
      "frontend_id": "3370",
      "difficulty": "Easy",
      "problem_slug": "smallest-number-with-all-set-bits",
      "topics": [
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Identify the Largest Outlier in an Array",
      "problem_id": "3594",
      "frontend_id": "3371",
      "difficulty": "Medium",
      "problem_slug": "identify-the-largest-outlier-in-an-array",
      "topics": [
        "Array",
        "Hash Table",
        "Counting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Number of Target Nodes After Connecting Trees I",
      "problem_id": "3633",
      "frontend_id": "3372",
      "difficulty": "Medium",
      "problem_slug": "maximize-the-number-of-target-nodes-after-connecting-trees-i",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Number of Target Nodes After Connecting Trees II",
      "problem_id": "3645",
      "frontend_id": "3373",
      "difficulty": "Hard",
      "problem_slug": "maximize-the-number-of-target-nodes-after-connecting-trees-ii",
      "topics": [
        "Tree",
        "Depth-First Search",
        "Breadth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "First Letter Capitalization II",
      "problem_id": "3711",
      "frontend_id": "3374",
      "difficulty": "Hard",
      "problem_slug": "first-letter-capitalization-ii",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Minimum Operations to Make Array Values Equal to K",
      "problem_id": "3621",
      "frontend_id": "3375",
      "difficulty": "Easy",
      "problem_slug": "minimum-operations-to-make-array-values-equal-to-k",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Break Locks I",
      "problem_id": "3649",
      "frontend_id": "3376",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-break-locks-i",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Backtracking",
        "Bit Manipulation",
        "Depth-First Search",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Digit Operations to Make Two Integers Equal",
      "problem_id": "3655",
      "frontend_id": "3377",
      "difficulty": "Medium",
      "problem_slug": "digit-operations-to-make-two-integers-equal",
      "topics": [
        "Math",
        "Graph",
        "Heap (Priority Queue)",
        "Number Theory",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Connected Components in LCM Graph",
      "problem_id": "3680",
      "frontend_id": "3378",
      "difficulty": "Hard",
      "problem_slug": "count-connected-components-in-lcm-graph",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Union Find",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Transformed Array",
      "problem_id": "3651",
      "frontend_id": "3379",
      "difficulty": "Easy",
      "problem_slug": "transformed-array",
      "topics": [
        "Array",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Area Rectangle With Point Constraints I",
      "problem_id": "3681",
      "frontend_id": "3380",
      "difficulty": "Medium",
      "problem_slug": "maximum-area-rectangle-with-point-constraints-i",
      "topics": [
        "Array",
        "Math",
        "Binary Indexed Tree",
        "Segment Tree",
        "Geometry",
        "Sorting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Subarray Sum With Length Divisible by K",
      "problem_id": "3653",
      "frontend_id": "3381",
      "difficulty": "Medium",
      "problem_slug": "maximum-subarray-sum-with-length-divisible-by-k",
      "topics": [
        "Array",
        "Hash Table",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Area Rectangle With Point Constraints II",
      "problem_id": "3689",
      "frontend_id": "3382",
      "difficulty": "Hard",
      "problem_slug": "maximum-area-rectangle-with-point-constraints-ii",
      "topics": [
        "Array",
        "Math",
        "Binary Indexed Tree",
        "Segment Tree",
        "Geometry",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Button with Longest Push Time",
      "problem_id": "3632",
      "frontend_id": "3386",
      "difficulty": "Easy",
      "problem_slug": "button-with-longest-push-time",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Amount After Two Days of Conversions",
      "problem_id": "3613",
      "frontend_id": "3387",
      "difficulty": "Medium",
      "problem_slug": "maximize-amount-after-two-days-of-conversions",
      "topics": [
        "Array",
        "String",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Beautiful Splits in an Array",
      "problem_id": "3686",
      "frontend_id": "3388",
      "difficulty": "Medium",
      "problem_slug": "count-beautiful-splits-in-an-array",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Character Frequencies Equal",
      "problem_id": "3638",
      "frontend_id": "3389",
      "difficulty": "Hard",
      "problem_slug": "minimum-operations-to-make-character-frequencies-equal",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Counting",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Subarrays of Length Three With a Condition",
      "problem_id": "3685",
      "frontend_id": "3392",
      "difficulty": "Easy",
      "problem_slug": "count-subarrays-of-length-three-with-a-condition",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Paths With the Given XOR Value",
      "problem_id": "3659",
      "frontend_id": "3393",
      "difficulty": "Medium",
      "problem_slug": "count-paths-with-the-given-xor-value",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Grid can be Cut into Sections",
      "problem_id": "3657",
      "frontend_id": "3394",
      "difficulty": "Medium",
      "problem_slug": "check-if-grid-can-be-cut-into-sections",
      "topics": [
        "Array",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subsequences with a Unique Middle Mode I",
      "problem_id": "3700",
      "frontend_id": "3395",
      "difficulty": "Hard",
      "problem_slug": "subsequences-with-a-unique-middle-mode-i",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Number of Operations to Make Elements in Array Distinct",
      "problem_id": "3656",
      "frontend_id": "3396",
      "difficulty": "Easy",
      "problem_slug": "minimum-number-of-operations-to-make-elements-in-array-distinct",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Distinct Elements After Operations",
      "problem_id": "3620",
      "frontend_id": "3397",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-distinct-elements-after-operations",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Substring With Identical Characters I",
      "problem_id": "3690",
      "frontend_id": "3398",
      "difficulty": "Hard",
      "problem_slug": "smallest-substring-with-identical-characters-i",
      "topics": [
        "Array",
        "Binary Search",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Substring With Identical Characters II",
      "problem_id": "3706",
      "frontend_id": "3399",
      "difficulty": "Hard",
      "problem_slug": "smallest-substring-with-identical-characters-ii",
      "topics": [
        "String",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Columns Strictly Increasing",
      "problem_id": "3691",
      "frontend_id": "3402",
      "difficulty": "Easy",
      "problem_slug": "minimum-operations-to-make-columns-strictly-increasing",
      "topics": [
        "Array",
        "Greedy",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Lexicographically Largest String From the Box I",
      "problem_id": "3683",
      "frontend_id": "3403",
      "difficulty": "Medium",
      "problem_slug": "find-the-lexicographically-largest-string-from-the-box-i",
      "topics": [
        "Two Pointers",
        "String",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Special Subsequences",
      "problem_id": "3699",
      "frontend_id": "3404",
      "difficulty": "Medium",
      "problem_slug": "count-special-subsequences",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Arrays with K Matching Adjacent Elements",
      "problem_id": "3682",
      "frontend_id": "3405",
      "difficulty": "Hard",
      "problem_slug": "count-the-number-of-arrays-with-k-matching-adjacent-elements",
      "topics": [
        "Math",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Substring Matching Pattern",
      "problem_id": "3684",
      "frontend_id": "3407",
      "difficulty": "Easy",
      "problem_slug": "substring-matching-pattern",
      "topics": [
        "String",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Task Manager",
      "problem_id": "3678",
      "frontend_id": "3408",
      "difficulty": "Medium",
      "problem_slug": "design-task-manager",
      "topics": [
        "Hash Table",
        "Design",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Subsequence With Decreasing Adjacent Difference",
      "problem_id": "3716",
      "frontend_id": "3409",
      "difficulty": "Medium",
      "problem_slug": "longest-subsequence-with-decreasing-adjacent-difference",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Subarray Sum After Removing All Occurrences of One Element",
      "problem_id": "3688",
      "frontend_id": "3410",
      "difficulty": "Hard",
      "problem_slug": "maximize-subarray-sum-after-removing-all-occurrences-of-one-element",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Subarray With Equal Products",
      "problem_id": "3702",
      "frontend_id": "3411",
      "difficulty": "Easy",
      "problem_slug": "maximum-subarray-with-equal-products",
      "topics": [
        "Array",
        "Math",
        "Sliding Window",
        "Enumeration",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Mirror Score of a String",
      "problem_id": "3634",
      "frontend_id": "3412",
      "difficulty": "Medium",
      "problem_slug": "find-mirror-score-of-a-string",
      "topics": [
        "Hash Table",
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Coins From K Consecutive Bags",
      "problem_id": "3715",
      "frontend_id": "3413",
      "difficulty": "Medium",
      "problem_slug": "maximum-coins-from-k-consecutive-bags",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Sliding Window",
        "Sorting",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Score of Non-overlapping Intervals",
      "problem_id": "3562",
      "frontend_id": "3414",
      "difficulty": "Hard",
      "problem_slug": "maximum-score-of-non-overlapping-intervals",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Zigzag Grid Traversal With Skip",
      "problem_id": "3708",
      "frontend_id": "3417",
      "difficulty": "Easy",
      "problem_slug": "zigzag-grid-traversal-with-skip",
      "topics": [
        "Array",
        "Matrix",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Amount of Money Robot Can Earn",
      "problem_id": "3677",
      "frontend_id": "3418",
      "difficulty": "Medium",
      "problem_slug": "maximum-amount-of-money-robot-can-earn",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize the Maximum Edge Weight of Graph",
      "problem_id": "3720",
      "frontend_id": "3419",
      "difficulty": "Medium",
      "problem_slug": "minimize-the-maximum-edge-weight-of-graph",
      "topics": [
        "Binary Search",
        "Depth-First Search",
        "Breadth-First Search",
        "Graph",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Non-Decreasing Subarrays After K Operations",
      "problem_id": "3674",
      "frontend_id": "3420",
      "difficulty": "Hard",
      "problem_slug": "count-non-decreasing-subarrays-after-k-operations",
      "topics": [
        "Array",
        "Stack",
        "Segment Tree",
        "Queue",
        "Sliding Window",
        "Monotonic Stack",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Students Who Improved",
      "problem_id": "3767",
      "frontend_id": "3421",
      "difficulty": "Medium",
      "problem_slug": "find-students-who-improved",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximum Difference Between Adjacent Elements in a Circular Array",
      "problem_id": "3747",
      "frontend_id": "3423",
      "difficulty": "Easy",
      "problem_slug": "maximum-difference-between-adjacent-elements-in-a-circular-array",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Make Arrays Identical",
      "problem_id": "3712",
      "frontend_id": "3424",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-to-make-arrays-identical",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Special Path",
      "problem_id": "3687",
      "frontend_id": "3425",
      "difficulty": "Hard",
      "problem_slug": "longest-special-path",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Manhattan Distances of All Arrangements of Pieces",
      "problem_id": "3739",
      "frontend_id": "3426",
      "difficulty": "Hard",
      "problem_slug": "manhattan-distances-of-all-arrangements-of-pieces",
      "topics": [
        "Math",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of Variable Length Subarrays",
      "problem_id": "3731",
      "frontend_id": "3427",
      "difficulty": "Easy",
      "problem_slug": "sum-of-variable-length-subarrays",
      "topics": [
        "Array",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum and Minimum Sums of at Most Size K Subsequences",
      "problem_id": "3714",
      "frontend_id": "3428",
      "difficulty": "Medium",
      "problem_slug": "maximum-and-minimum-sums-of-at-most-size-k-subsequences",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Sorting",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Paint House IV",
      "problem_id": "3737",
      "frontend_id": "3429",
      "difficulty": "Medium",
      "problem_slug": "paint-house-iv",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum and Minimum Sums of at Most Size K Subarrays",
      "problem_id": "3725",
      "frontend_id": "3430",
      "difficulty": "Hard",
      "problem_slug": "maximum-and-minimum-sums-of-at-most-size-k-subarrays",
      "topics": [
        "Array",
        "Math",
        "Stack",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Partitions with Even Sum Difference",
      "problem_id": "3704",
      "frontend_id": "3432",
      "difficulty": "Easy",
      "problem_slug": "count-partitions-with-even-sum-difference",
      "topics": [
        "Array",
        "Math",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Mentions Per User",
      "problem_id": "3721",
      "frontend_id": "3433",
      "difficulty": "Medium",
      "problem_slug": "count-mentions-per-user",
      "topics": [
        "Array",
        "Math",
        "Sorting",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Frequency After Subarray Operation",
      "problem_id": "3751",
      "frontend_id": "3434",
      "difficulty": "Medium",
      "problem_slug": "maximum-frequency-after-subarray-operation",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming",
        "Greedy",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Frequencies of Shortest Supersequences",
      "problem_id": "3713",
      "frontend_id": "3435",
      "difficulty": "Hard",
      "problem_slug": "frequencies-of-shortest-supersequences",
      "topics": [
        "Array",
        "String",
        "Bit Manipulation",
        "Graph",
        "Topological Sort",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Valid Emails",
      "problem_id": "3782",
      "frontend_id": "3436",
      "difficulty": "Easy",
      "problem_slug": "find-valid-emails",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Find Valid Pair of Adjacent Digits in String",
      "problem_id": "3736",
      "frontend_id": "3438",
      "difficulty": "Easy",
      "problem_slug": "find-valid-pair-of-adjacent-digits-in-string",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reschedule Meetings for Maximum Free Time I",
      "problem_id": "3743",
      "frontend_id": "3439",
      "difficulty": "Medium",
      "problem_slug": "reschedule-meetings-for-maximum-free-time-i",
      "topics": [
        "Array",
        "Greedy",
        "Sliding Window"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Reschedule Meetings for Maximum Free Time II",
      "problem_id": "3741",
      "frontend_id": "3440",
      "difficulty": "Medium",
      "problem_slug": "reschedule-meetings-for-maximum-free-time-ii",
      "topics": [
        "Array",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost Good Caption",
      "problem_id": "3701",
      "frontend_id": "3441",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-good-caption",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Difference Between Even and Odd Frequency I",
      "problem_id": "3753",
      "frontend_id": "3442",
      "difficulty": "Easy",
      "problem_slug": "maximum-difference-between-even-and-odd-frequency-i",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Manhattan Distance After K Changes",
      "problem_id": "3754",
      "frontend_id": "3443",
      "difficulty": "Medium",
      "problem_slug": "maximum-manhattan-distance-after-k-changes",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Increments for Target Multiples in an Array",
      "problem_id": "3697",
      "frontend_id": "3444",
      "difficulty": "Hard",
      "problem_slug": "minimum-increments-for-target-multiples-in-an-array",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Bit Manipulation",
        "Number Theory",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Difference Between Even and Odd Frequency II",
      "problem_id": "3761",
      "frontend_id": "3445",
      "difficulty": "Hard",
      "problem_slug": "maximum-difference-between-even-and-odd-frequency-ii",
      "topics": [
        "String",
        "Sliding Window",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sort Matrix by Diagonals",
      "problem_id": "3748",
      "frontend_id": "3446",
      "difficulty": "Medium",
      "problem_slug": "sort-matrix-by-diagonals",
      "topics": [
        "Array",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Assign Elements to Groups with Constraints",
      "problem_id": "3760",
      "frontend_id": "3447",
      "difficulty": "Medium",
      "problem_slug": "assign-elements-to-groups-with-constraints",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Substrings Divisible By Last Digit",
      "problem_id": "3696",
      "frontend_id": "3448",
      "difficulty": "Hard",
      "problem_slug": "count-substrings-divisible-by-last-digit",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Minimum Game Score",
      "problem_id": "3762",
      "frontend_id": "3449",
      "difficulty": "Hard",
      "problem_slug": "maximize-the-minimum-game-score",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Invalid IP Addresses",
      "problem_id": "3792",
      "frontend_id": "3451",
      "difficulty": "Hard",
      "problem_slug": "find-invalid-ip-addresses",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Sum of Good Numbers",
      "problem_id": "3723",
      "frontend_id": "3452",
      "difficulty": "Easy",
      "problem_slug": "sum-of-good-numbers",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Separate Squares I",
      "problem_id": "3763",
      "frontend_id": "3453",
      "difficulty": "Medium",
      "problem_slug": "separate-squares-i",
      "topics": [
        "Array",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Separate Squares II",
      "problem_id": "3775",
      "frontend_id": "3454",
      "difficulty": "Hard",
      "problem_slug": "separate-squares-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Segment Tree",
        "Line Sweep"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Matching Substring",
      "problem_id": "3692",
      "frontend_id": "3455",
      "difficulty": "Hard",
      "problem_slug": "shortest-matching-substring",
      "topics": [
        "Two Pointers",
        "String",
        "Binary Search",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Special Substring of Length K",
      "problem_id": "3709",
      "frontend_id": "3456",
      "difficulty": "Easy",
      "problem_slug": "find-special-substring-of-length-k",
      "topics": [
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Eat Pizzas!",
      "problem_id": "3779",
      "frontend_id": "3457",
      "difficulty": "Medium",
      "problem_slug": "eat-pizzas",
      "topics": [
        "Array",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Select K Disjoint Special Substrings",
      "problem_id": "3771",
      "frontend_id": "3458",
      "difficulty": "Medium",
      "problem_slug": "select-k-disjoint-special-substrings",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Greedy",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Length of Longest V-Shaped Diagonal Segment",
      "problem_id": "3733",
      "frontend_id": "3459",
      "difficulty": "Hard",
      "problem_slug": "length-of-longest-v-shaped-diagonal-segment",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Memoization",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If Digits Are Equal in String After Operations I",
      "problem_id": "3768",
      "frontend_id": "3461",
      "difficulty": "Easy",
      "problem_slug": "check-if-digits-are-equal-in-string-after-operations-i",
      "topics": [
        "Math",
        "String",
        "Simulation",
        "Combinatorics",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum With at Most K Elements",
      "problem_id": "3764",
      "frontend_id": "3462",
      "difficulty": "Medium",
      "problem_slug": "maximum-sum-with-at-most-k-elements",
      "topics": [
        "Array",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check If Digits Are Equal in String After Operations II",
      "problem_id": "3774",
      "frontend_id": "3463",
      "difficulty": "Hard",
      "problem_slug": "check-if-digits-are-equal-in-string-after-operations-ii",
      "topics": [
        "Math",
        "String",
        "Combinatorics",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize the Distance Between Points on a Square",
      "problem_id": "3781",
      "frontend_id": "3464",
      "difficulty": "Hard",
      "problem_slug": "maximize-the-distance-between-points-on-a-square",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Products with Valid Serial Numbers",
      "problem_id": "3803",
      "frontend_id": "3465",
      "difficulty": "Easy",
      "problem_slug": "find-products-with-valid-serial-numbers",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Transform Array by Parity",
      "problem_id": "3778",
      "frontend_id": "3467",
      "difficulty": "Easy",
      "problem_slug": "transform-array-by-parity",
      "topics": [
        "Array",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Number of Copy Arrays",
      "problem_id": "3785",
      "frontend_id": "3468",
      "difficulty": "Medium",
      "problem_slug": "find-the-number-of-copy-arrays",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum Cost to Remove Array Elements",
      "problem_id": "3776",
      "frontend_id": "3469",
      "difficulty": "Medium",
      "problem_slug": "find-minimum-cost-to-remove-array-elements",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Permutations IV",
      "problem_id": "3783",
      "frontend_id": "3470",
      "difficulty": "Hard",
      "problem_slug": "permutations-iv",
      "topics": [
        "Array",
        "Math",
        "Combinatorics",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Largest Almost Missing Integer",
      "problem_id": "3705",
      "frontend_id": "3471",
      "difficulty": "Easy",
      "problem_slug": "find-the-largest-almost-missing-integer",
      "topics": [
        "Array",
        "Hash Table"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindromic Subsequence After at Most K Operations",
      "problem_id": "3786",
      "frontend_id": "3472",
      "difficulty": "Medium",
      "problem_slug": "longest-palindromic-subsequence-after-at-most-k-operations",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Sum of K Subarrays With Length at Least M",
      "problem_id": "3722",
      "frontend_id": "3473",
      "difficulty": "Medium",
      "problem_slug": "sum-of-k-subarrays-with-length-at-least-m",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest Generated String",
      "problem_id": "3770",
      "frontend_id": "3474",
      "difficulty": "Hard",
      "problem_slug": "lexicographically-smallest-generated-string",
      "topics": [
        "String",
        "Greedy",
        "String Matching"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "DNA Pattern Recognition ",
      "problem_id": "3816",
      "frontend_id": "3475",
      "difficulty": "Medium",
      "problem_slug": "dna-pattern-recognition",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Fruits Into Baskets II",
      "problem_id": "3790",
      "frontend_id": "3477",
      "difficulty": "Easy",
      "problem_slug": "fruits-into-baskets-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Segment Tree",
        "Simulation",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Choose K Elements With Maximum Sum",
      "problem_id": "3759",
      "frontend_id": "3478",
      "difficulty": "Medium",
      "problem_slug": "choose-k-elements-with-maximum-sum",
      "topics": [
        "Array",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fruits Into Baskets III",
      "problem_id": "3791",
      "frontend_id": "3479",
      "difficulty": "Medium",
      "problem_slug": "fruits-into-baskets-iii",
      "topics": [
        "Array",
        "Binary Search",
        "Segment Tree",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Subarrays After Removing One Conflicting Pair",
      "problem_id": "3789",
      "frontend_id": "3480",
      "difficulty": "Hard",
      "problem_slug": "maximize-subarrays-after-removing-one-conflicting-pair",
      "topics": [
        "Array",
        "Segment Tree",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Analyze Organization Hierarchy",
      "problem_id": "3828",
      "frontend_id": "3482",
      "difficulty": "Hard",
      "problem_slug": "analyze-organization-hierarchy",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Unique 3-Digit Even Numbers",
      "problem_id": "3799",
      "frontend_id": "3483",
      "difficulty": "Easy",
      "problem_slug": "unique-3-digit-even-numbers",
      "topics": [
        "Array",
        "Hash Table",
        "Recursion",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Design Spreadsheet",
      "problem_id": "3797",
      "frontend_id": "3484",
      "difficulty": "Medium",
      "problem_slug": "design-spreadsheet",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Design",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Common Prefix of K Strings After Removal",
      "problem_id": "3784",
      "frontend_id": "3485",
      "difficulty": "Hard",
      "problem_slug": "longest-common-prefix-of-k-strings-after-removal",
      "topics": [
        "Array",
        "String",
        "Trie"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Special Path II",
      "problem_id": "3798",
      "frontend_id": "3486",
      "difficulty": "Hard",
      "problem_slug": "longest-special-path-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Tree",
        "Depth-First Search",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Unique Subarray Sum After Deletion",
      "problem_id": "3788",
      "frontend_id": "3487",
      "difficulty": "Easy",
      "problem_slug": "maximum-unique-subarray-sum-after-deletion",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Closest Equal Element Queries",
      "problem_id": "3750",
      "frontend_id": "3488",
      "difficulty": "Medium",
      "problem_slug": "closest-equal-element-queries",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Zero Array Transformation IV",
      "problem_id": "3795",
      "frontend_id": "3489",
      "difficulty": "Medium",
      "problem_slug": "zero-array-transformation-iv",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Beautiful Numbers",
      "problem_id": "3801",
      "frontend_id": "3490",
      "difficulty": "Hard",
      "problem_slug": "count-beautiful-numbers",
      "topics": [
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Containers on a Ship",
      "problem_id": "3817",
      "frontend_id": "3492",
      "difficulty": "Easy",
      "problem_slug": "maximum-containers-on-a-ship",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Properties Graph",
      "problem_id": "3809",
      "frontend_id": "3493",
      "difficulty": "Medium",
      "problem_slug": "properties-graph",
      "topics": [
        "Array",
        "Hash Table",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Minimum Amount of Time to Brew Potions",
      "problem_id": "3794",
      "frontend_id": "3494",
      "difficulty": "Medium",
      "problem_slug": "find-the-minimum-amount-of-time-to-brew-potions",
      "topics": [
        "Array",
        "Simulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Array Elements Zero",
      "problem_id": "3744",
      "frontend_id": "3495",
      "difficulty": "Hard",
      "problem_slug": "minimum-operations-to-make-array-elements-zero",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Analyze Subscription Conversion ",
      "problem_id": "3848",
      "frontend_id": "3497",
      "difficulty": "Medium",
      "problem_slug": "analyze-subscription-conversion",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Reverse Degree of a String",
      "problem_id": "3811",
      "frontend_id": "3498",
      "difficulty": "Easy",
      "problem_slug": "reverse-degree-of-a-string",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Active Section with Trade I",
      "problem_id": "3805",
      "frontend_id": "3499",
      "difficulty": "Medium",
      "problem_slug": "maximize-active-section-with-trade-i",
      "topics": [
        "String",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Divide Array Into Subarrays",
      "problem_id": "3765",
      "frontend_id": "3500",
      "difficulty": "Hard",
      "problem_slug": "minimum-cost-to-divide-array-into-subarrays",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Active Section with Trade II",
      "problem_id": "3804",
      "frontend_id": "3501",
      "difficulty": "Hard",
      "problem_slug": "maximize-active-section-with-trade-ii",
      "topics": [
        "Array",
        "String",
        "Binary Search",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost to Reach Every Position",
      "problem_id": "3832",
      "frontend_id": "3502",
      "difficulty": "Easy",
      "problem_slug": "minimum-cost-to-reach-every-position",
      "topics": [
        "Array"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindrome After Substring Concatenation I",
      "problem_id": "3793",
      "frontend_id": "3503",
      "difficulty": "Medium",
      "problem_slug": "longest-palindrome-after-substring-concatenation-i",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindrome After Substring Concatenation II",
      "problem_id": "3808",
      "frontend_id": "3504",
      "difficulty": "Hard",
      "problem_slug": "longest-palindrome-after-substring-concatenation-ii",
      "topics": [
        "Two Pointers",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Elements Within K Subarrays Equal",
      "problem_id": "3717",
      "frontend_id": "3505",
      "difficulty": "Hard",
      "problem_slug": "minimum-operations-to-make-elements-within-k-subarrays-equal",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Dynamic Programming",
        "Sliding Window",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Pair Removal to Sort Array I",
      "problem_id": "3773",
      "frontend_id": "3507",
      "difficulty": "Easy",
      "problem_slug": "minimum-pair-removal-to-sort-array-i",
      "topics": [
        "Array",
        "Hash Table",
        "Linked List",
        "Heap (Priority Queue)",
        "Simulation",
        "Doubly-Linked List",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Implement Router",
      "problem_id": "3827",
      "frontend_id": "3508",
      "difficulty": "Medium",
      "problem_slug": "implement-router",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Design",
        "Queue",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of Subsequences With an Alternating Sum Equal to K",
      "problem_id": "3777",
      "frontend_id": "3509",
      "difficulty": "Hard",
      "problem_slug": "maximum-product-of-subsequences-with-an-alternating-sum-equal-to-k",
      "topics": [
        "Array",
        "Hash Table",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Pair Removal to Sort Array II",
      "problem_id": "3772",
      "frontend_id": "3510",
      "difficulty": "Hard",
      "problem_slug": "minimum-pair-removal-to-sort-array-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Linked List",
        "Heap (Priority Queue)",
        "Simulation",
        "Doubly-Linked List",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Make Array Sum Divisible by K",
      "problem_id": "3846",
      "frontend_id": "3512",
      "difficulty": "Easy",
      "problem_slug": "minimum-operations-to-make-array-sum-divisible-by-k",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Unique XOR Triplets I",
      "problem_id": "3824",
      "frontend_id": "3513",
      "difficulty": "Medium",
      "problem_slug": "number-of-unique-xor-triplets-i",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Unique XOR Triplets II",
      "problem_id": "3820",
      "frontend_id": "3514",
      "difficulty": "Medium",
      "problem_slug": "number-of-unique-xor-triplets-ii",
      "topics": [
        "Array",
        "Math",
        "Bit Manipulation",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Shortest Path in a Weighted Tree",
      "problem_id": "3829",
      "frontend_id": "3515",
      "difficulty": "Hard",
      "problem_slug": "shortest-path-in-a-weighted-tree",
      "topics": [
        "Array",
        "Tree",
        "Depth-First Search",
        "Binary Indexed Tree",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Closest Person",
      "problem_id": "3830",
      "frontend_id": "3516",
      "difficulty": "Easy",
      "problem_slug": "find-closest-person",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Palindromic Rearrangement I",
      "problem_id": "3812",
      "frontend_id": "3517",
      "difficulty": "Medium",
      "problem_slug": "smallest-palindromic-rearrangement-i",
      "topics": [
        "String",
        "Sorting",
        "Counting Sort"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Palindromic Rearrangement II",
      "problem_id": "3813",
      "frontend_id": "3518",
      "difficulty": "Hard",
      "problem_slug": "smallest-palindromic-rearrangement-ii",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Combinatorics",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Numbers with Non-Decreasing Digits ",
      "problem_id": "3810",
      "frontend_id": "3519",
      "difficulty": "Hard",
      "problem_slug": "count-numbers-with-non-decreasing-digits",
      "topics": [
        "Math",
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Product Recommendation Pairs",
      "problem_id": "3865",
      "frontend_id": "3521",
      "difficulty": "Medium",
      "problem_slug": "find-product-recommendation-pairs",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Calculate Score After Performing Instructions",
      "problem_id": "3732",
      "frontend_id": "3522",
      "difficulty": "Medium",
      "problem_slug": "calculate-score-after-performing-instructions",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Make Array Non-decreasing",
      "problem_id": "3738",
      "frontend_id": "3523",
      "difficulty": "Medium",
      "problem_slug": "make-array-non-decreasing",
      "topics": [
        "Array",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find X Value of Array I",
      "problem_id": "3831",
      "frontend_id": "3524",
      "difficulty": "Medium",
      "problem_slug": "find-x-value-of-array-i",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find X Value of Array II",
      "problem_id": "3840",
      "frontend_id": "3525",
      "difficulty": "Hard",
      "problem_slug": "find-x-value-of-array-ii",
      "topics": [
        "Array",
        "Math",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find the Most Common Response",
      "problem_id": "3707",
      "frontend_id": "3527",
      "difficulty": "Medium",
      "problem_slug": "find-the-most-common-response",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Unit Conversion I",
      "problem_id": "3729",
      "frontend_id": "3528",
      "difficulty": "Medium",
      "problem_slug": "unit-conversion-i",
      "topics": [
        "Depth-First Search",
        "Breadth-First Search",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Cells in Overlapping Horizontal and Vertical Substrings",
      "problem_id": "3821",
      "frontend_id": "3529",
      "difficulty": "Medium",
      "problem_slug": "count-cells-in-overlapping-horizontal-and-vertical-substrings",
      "topics": [
        "Array",
        "String",
        "Rolling Hash",
        "String Matching",
        "Matrix",
        "Hash Function"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Profit from Valid Topological Order in DAG",
      "problem_id": "3826",
      "frontend_id": "3530",
      "difficulty": "Hard",
      "problem_slug": "maximum-profit-from-valid-topological-order-in-dag",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Graph",
        "Topological Sort",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Covered Buildings",
      "problem_id": "3819",
      "frontend_id": "3531",
      "difficulty": "Medium",
      "problem_slug": "count-covered-buildings",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path Existence Queries in a Graph I",
      "problem_id": "3838",
      "frontend_id": "3532",
      "difficulty": "Medium",
      "problem_slug": "path-existence-queries-in-a-graph-i",
      "topics": [
        "Array",
        "Hash Table",
        "Binary Search",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Concatenated Divisibility",
      "problem_id": "3841",
      "frontend_id": "3533",
      "difficulty": "Hard",
      "problem_slug": "concatenated-divisibility",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Path Existence Queries in a Graph II",
      "problem_id": "3852",
      "frontend_id": "3534",
      "difficulty": "Hard",
      "problem_slug": "path-existence-queries-in-a-graph-ii",
      "topics": [
        "Array",
        "Binary Search",
        "Greedy",
        "Graph",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of Two Digits",
      "problem_id": "3859",
      "frontend_id": "3536",
      "difficulty": "Easy",
      "problem_slug": "maximum-product-of-two-digits",
      "topics": [
        "Math",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Fill a Special Grid",
      "problem_id": "3822",
      "frontend_id": "3537",
      "difficulty": "Medium",
      "problem_slug": "fill-a-special-grid",
      "topics": [
        "Array",
        "Divide and Conquer",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Merge Operations for Minimum Travel Time",
      "problem_id": "3833",
      "frontend_id": "3538",
      "difficulty": "Hard",
      "problem_slug": "merge-operations-for-minimum-travel-time",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Sum of Array Product of Magical Sequences",
      "problem_id": "3851",
      "frontend_id": "3539",
      "difficulty": "Hard",
      "problem_slug": "find-sum-of-array-product-of-magical-sequences",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Bit Manipulation",
        "Combinatorics",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Most Frequent Vowel and Consonant",
      "problem_id": "3872",
      "frontend_id": "3541",
      "difficulty": "Easy",
      "problem_slug": "find-most-frequent-vowel-and-consonant",
      "topics": [
        "Hash Table",
        "String",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Operations to Convert All Elements to Zero",
      "problem_id": "3834",
      "frontend_id": "3542",
      "difficulty": "Medium",
      "problem_slug": "minimum-operations-to-convert-all-elements-to-zero",
      "topics": [
        "Array",
        "Hash Table",
        "Stack",
        "Greedy",
        "Monotonic Stack"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Weighted K-Edge Path",
      "problem_id": "3856",
      "frontend_id": "3543",
      "difficulty": "Medium",
      "problem_slug": "maximum-weighted-k-edge-path",
      "topics": [
        "Hash Table",
        "Dynamic Programming",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Subtree Inversion Sum",
      "problem_id": "3858",
      "frontend_id": "3544",
      "difficulty": "Hard",
      "problem_slug": "subtree-inversion-sum",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Deletions for At Most K Distinct Characters",
      "problem_id": "3871",
      "frontend_id": "3545",
      "difficulty": "Easy",
      "problem_slug": "minimum-deletions-for-at-most-k-distinct-characters",
      "topics": [
        "Hash Table",
        "String",
        "Greedy",
        "Sorting",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Equal Sum Grid Partition I",
      "problem_id": "3849",
      "frontend_id": "3546",
      "difficulty": "Medium",
      "problem_slug": "equal-sum-grid-partition-i",
      "topics": [
        "Array",
        "Matrix",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Sum of Edge Values in a Graph",
      "problem_id": "3845",
      "frontend_id": "3547",
      "difficulty": "Hard",
      "problem_slug": "maximum-sum-of-edge-values-in-a-graph",
      "topics": [
        "Greedy",
        "Depth-First Search",
        "Graph",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Equal Sum Grid Partition II",
      "problem_id": "3850",
      "frontend_id": "3548",
      "difficulty": "Hard",
      "problem_slug": "equal-sum-grid-partition-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Matrix",
        "Enumeration",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Smallest Index With Digit Sum Equal to Index",
      "problem_id": "3869",
      "frontend_id": "3550",
      "difficulty": "Easy",
      "problem_slug": "smallest-index-with-digit-sum-equal-to-index",
      "topics": [
        "Array",
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Swaps to Sort by Digit Sum",
      "problem_id": "3847",
      "frontend_id": "3551",
      "difficulty": "Medium",
      "problem_slug": "minimum-swaps-to-sort-by-digit-sum",
      "topics": [
        "Array",
        "Hash Table",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Grid Teleportation Traversal",
      "problem_id": "3837",
      "frontend_id": "3552",
      "difficulty": "Medium",
      "problem_slug": "grid-teleportation-traversal",
      "topics": [
        "Array",
        "Hash Table",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Weighted Subgraph With the Required Paths II",
      "problem_id": "3853",
      "frontend_id": "3553",
      "difficulty": "Hard",
      "problem_slug": "minimum-weighted-subgraph-with-the-required-paths-ii",
      "topics": [
        "Array",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Category Recommendation Pairs",
      "problem_id": "3891",
      "frontend_id": "3554",
      "difficulty": "Hard",
      "problem_slug": "find-category-recommendation-pairs",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Sum of Largest Prime Substrings",
      "problem_id": "3815",
      "frontend_id": "3556",
      "difficulty": "Medium",
      "problem_slug": "sum-of-largest-prime-substrings",
      "topics": [
        "Hash Table",
        "Math",
        "String",
        "Sorting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Maximum Number of Non Intersecting Substrings",
      "problem_id": "3857",
      "frontend_id": "3557",
      "difficulty": "Medium",
      "problem_slug": "find-maximum-number-of-non-intersecting-substrings",
      "topics": [
        "Hash Table",
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Assign Edge Weights I",
      "problem_id": "3844",
      "frontend_id": "3558",
      "difficulty": "Medium",
      "problem_slug": "number-of-ways-to-assign-edge-weights-i",
      "topics": [
        "Math",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Ways to Assign Edge Weights II",
      "problem_id": "3842",
      "frontend_id": "3559",
      "difficulty": "Hard",
      "problem_slug": "number-of-ways-to-assign-edge-weights-ii",
      "topics": [
        "Array",
        "Math",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Minimum Log Transportation Cost",
      "problem_id": "3879",
      "frontend_id": "3560",
      "difficulty": "Easy",
      "problem_slug": "find-minimum-log-transportation-cost",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Resulting String After Adjacent Removals",
      "problem_id": "3860",
      "frontend_id": "3561",
      "difficulty": "Medium",
      "problem_slug": "resulting-string-after-adjacent-removals",
      "topics": [
        "String",
        "Stack",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Profit from Trading Stocks with Discounts",
      "problem_id": "3854",
      "frontend_id": "3562",
      "difficulty": "Hard",
      "problem_slug": "maximum-profit-from-trading-stocks-with-discounts",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Lexicographically Smallest String After Adjacent Removals",
      "problem_id": "3867",
      "frontend_id": "3563",
      "difficulty": "Hard",
      "problem_slug": "lexicographically-smallest-string-after-adjacent-removals",
      "topics": [
        "String",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Seasonal Sales Analysis",
      "problem_id": "3898",
      "frontend_id": "3564",
      "difficulty": "Medium",
      "problem_slug": "seasonal-sales-analysis",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Partition Array into Two Equal Product Subsets",
      "problem_id": "3843",
      "frontend_id": "3566",
      "difficulty": "Medium",
      "problem_slug": "partition-array-into-two-equal-product-subsets",
      "topics": [
        "Array",
        "Bit Manipulation",
        "Recursion",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Absolute Difference in Sliding Submatrix",
      "problem_id": "3884",
      "frontend_id": "3567",
      "difficulty": "Medium",
      "problem_slug": "minimum-absolute-difference-in-sliding-submatrix",
      "topics": [
        "Array",
        "Sorting",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Clean the Classroom",
      "problem_id": "3870",
      "frontend_id": "3568",
      "difficulty": "Medium",
      "problem_slug": "minimum-moves-to-clean-the-classroom",
      "topics": [
        "Array",
        "Hash Table",
        "Bit Manipulation",
        "Breadth-First Search",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Count of Distinct Primes After Split",
      "problem_id": "3878",
      "frontend_id": "3569",
      "difficulty": "Hard",
      "problem_slug": "maximize-count-of-distinct-primes-after-split",
      "topics": [
        "Array",
        "Math",
        "Segment Tree",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Books with No Available Copies",
      "problem_id": "3910",
      "frontend_id": "3570",
      "difficulty": "Easy",
      "problem_slug": "find-books-with-no-available-copies",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximize Y‑Sum by Picking a Triplet of Distinct X‑Values",
      "problem_id": "3894",
      "frontend_id": "3572",
      "difficulty": "Medium",
      "problem_slug": "maximize-ysum-by-picking-a-triplet-of-distinct-xvalues",
      "topics": [
        "Array",
        "Hash Table",
        "Greedy",
        "Sorting",
        "Heap (Priority Queue)"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Best Time to Buy and Sell Stock V",
      "problem_id": "3892",
      "frontend_id": "3573",
      "difficulty": "Medium",
      "problem_slug": "best-time-to-buy-and-sell-stock-v",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Subarray GCD Score",
      "problem_id": "3888",
      "frontend_id": "3574",
      "difficulty": "Hard",
      "problem_slug": "maximize-subarray-gcd-score",
      "topics": [
        "Array",
        "Math",
        "Enumeration",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Good Subtree Score",
      "problem_id": "3875",
      "frontend_id": "3575",
      "difficulty": "Hard",
      "problem_slug": "maximum-good-subtree-score",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Tree",
        "Depth-First Search",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Transform Array to All Equal Elements",
      "problem_id": "3876",
      "frontend_id": "3576",
      "difficulty": "Medium",
      "problem_slug": "transform-array-to-all-equal-elements",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count the Number of Computer Unlocking Permutations",
      "problem_id": "3864",
      "frontend_id": "3577",
      "difficulty": "Medium",
      "problem_slug": "count-the-number-of-computer-unlocking-permutations",
      "topics": [
        "Array",
        "Math",
        "Brainteaser",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Partitions With Max-Min Difference at Most K",
      "problem_id": "3835",
      "frontend_id": "3578",
      "difficulty": "Medium",
      "problem_slug": "count-partitions-with-max-min-difference-at-most-k",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Queue",
        "Sliding Window",
        "Prefix Sum",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Steps to Convert String with Operations",
      "problem_id": "3866",
      "frontend_id": "3579",
      "difficulty": "Hard",
      "problem_slug": "minimum-steps-to-convert-string-with-operations",
      "topics": [
        "String",
        "Dynamic Programming",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Consistently Improving Employees",
      "problem_id": "3921",
      "frontend_id": "3580",
      "difficulty": "Medium",
      "problem_slug": "find-consistently-improving-employees",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Generate Tag for Video Caption",
      "problem_id": "3893",
      "frontend_id": "3582",
      "difficulty": "Easy",
      "problem_slug": "generate-tag-for-video-caption",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Special Triplets",
      "problem_id": "3885",
      "frontend_id": "3583",
      "difficulty": "Medium",
      "problem_slug": "count-special-triplets",
      "topics": [
        "Array",
        "Hash Table",
        "Counting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Product of First and Last Elements of a Subsequence",
      "problem_id": "3755",
      "frontend_id": "3584",
      "difficulty": "Medium",
      "problem_slug": "maximum-product-of-first-and-last-elements-of-a-subsequence",
      "topics": [
        "Array",
        "Two Pointers"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Weighted Median Node in Tree",
      "problem_id": "3900",
      "frontend_id": "3585",
      "difficulty": "Hard",
      "problem_slug": "find-weighted-median-node-in-tree",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find COVID Recovery Patients",
      "problem_id": "3932",
      "frontend_id": "3586",
      "difficulty": "Medium",
      "problem_slug": "find-covid-recovery-patients",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Minimum Adjacent Swaps to Alternate Parity",
      "problem_id": "3904",
      "frontend_id": "3587",
      "difficulty": "Medium",
      "problem_slug": "minimum-adjacent-swaps-to-alternate-parity",
      "topics": [
        "Array",
        "Greedy"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Maximum Area of a Triangle",
      "problem_id": "3868",
      "frontend_id": "3588",
      "difficulty": "Medium",
      "problem_slug": "find-maximum-area-of-a-triangle",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Greedy",
        "Geometry",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Prime-Gap Balanced Subarrays",
      "problem_id": "3907",
      "frontend_id": "3589",
      "difficulty": "Medium",
      "problem_slug": "count-prime-gap-balanced-subarrays",
      "topics": [
        "Array",
        "Math",
        "Queue",
        "Sliding Window",
        "Number Theory",
        "Monotonic Queue"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Kth Smallest Path XOR Sum",
      "problem_id": "3906",
      "frontend_id": "3590",
      "difficulty": "Hard",
      "problem_slug": "kth-smallest-path-xor-sum",
      "topics": [
        "Array",
        "Tree",
        "Depth-First Search",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check if Any Element Has Prime Frequency",
      "problem_id": "3914",
      "frontend_id": "3591",
      "difficulty": "Easy",
      "problem_slug": "check-if-any-element-has-prime-frequency",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Counting",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Inverse Coin Change",
      "problem_id": "3903",
      "frontend_id": "3592",
      "difficulty": "Medium",
      "problem_slug": "inverse-coin-change",
      "topics": [
        "Array",
        "Dynamic Programming"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Increments to Equalize Leaf Paths",
      "problem_id": "3909",
      "frontend_id": "3593",
      "difficulty": "Medium",
      "problem_slug": "minimum-increments-to-equalize-leaf-paths",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Tree",
        "Depth-First Search"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Transport All Individuals",
      "problem_id": "3896",
      "frontend_id": "3594",
      "difficulty": "Hard",
      "problem_slug": "minimum-time-to-transport-all-individuals",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition String ",
      "problem_id": "3905",
      "frontend_id": "3597",
      "difficulty": "Medium",
      "problem_slug": "partition-string",
      "topics": [
        "Hash Table",
        "String",
        "Trie",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Common Prefix Between Adjacent Strings After Removals",
      "problem_id": "3800",
      "frontend_id": "3598",
      "difficulty": "Medium",
      "problem_slug": "longest-common-prefix-between-adjacent-strings-after-removals",
      "topics": [
        "Array",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array to Minimize XOR",
      "problem_id": "3913",
      "frontend_id": "3599",
      "difficulty": "Medium",
      "problem_slug": "partition-array-to-minimize-xor",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Bit Manipulation",
        "Prefix Sum"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximize Spanning Tree Stability with Upgrades",
      "problem_id": "3902",
      "frontend_id": "3600",
      "difficulty": "Hard",
      "problem_slug": "maximize-spanning-tree-stability-with-upgrades",
      "topics": [
        "Binary Search",
        "Greedy",
        "Union Find",
        "Graph",
        "Minimum Spanning Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Drivers with Improved Fuel Efficiency",
      "problem_id": "3942",
      "frontend_id": "3601",
      "difficulty": "Medium",
      "problem_slug": "find-drivers-with-improved-fuel-efficiency",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Hexadecimal and Hexatrigesimal Conversion",
      "problem_id": "3912",
      "frontend_id": "3602",
      "difficulty": "Easy",
      "problem_slug": "hexadecimal-and-hexatrigesimal-conversion",
      "topics": [
        "Math",
        "String"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Cost Path with Alternating Directions II",
      "problem_id": "3927",
      "frontend_id": "3603",
      "difficulty": "Medium",
      "problem_slug": "minimum-cost-path-with-alternating-directions-ii",
      "topics": [
        "Array",
        "Dynamic Programming",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Reach Destination in Directed Graph",
      "problem_id": "3916",
      "frontend_id": "3604",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-reach-destination-in-directed-graph",
      "topics": [
        "Graph",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Stability Factor of Array",
      "problem_id": "3920",
      "frontend_id": "3605",
      "difficulty": "Hard",
      "problem_slug": "minimum-stability-factor-of-array",
      "topics": [
        "Array",
        "Math",
        "Binary Search",
        "Greedy",
        "Segment Tree",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Coupon Code Validator",
      "problem_id": "3934",
      "frontend_id": "3606",
      "difficulty": "Easy",
      "problem_slug": "coupon-code-validator",
      "topics": [
        "Array",
        "Hash Table",
        "String",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Power Grid Maintenance",
      "problem_id": "3863",
      "frontend_id": "3607",
      "difficulty": "Medium",
      "problem_slug": "power-grid-maintenance",
      "topics": [
        "Array",
        "Hash Table",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Graph",
        "Heap (Priority Queue)",
        "Ordered Set"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time for K Connected Components",
      "problem_id": "3908",
      "frontend_id": "3608",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-for-k-connected-components",
      "topics": [
        "Binary Search",
        "Union Find",
        "Graph",
        "Sorting"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Moves to Reach Target in Grid",
      "problem_id": "3922",
      "frontend_id": "3609",
      "difficulty": "Hard",
      "problem_slug": "minimum-moves-to-reach-target-in-grid",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Overbooked Employees",
      "problem_id": "3943",
      "frontend_id": "3611",
      "difficulty": "Medium",
      "problem_slug": "find-overbooked-employees",
      "topics": [
        "Database"
      ],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Process String with Special Operations I",
      "problem_id": "3931",
      "frontend_id": "3612",
      "difficulty": "Medium",
      "problem_slug": "process-string-with-special-operations-i",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimize Maximum Component Cost",
      "problem_id": "3881",
      "frontend_id": "3613",
      "difficulty": "Medium",
      "problem_slug": "minimize-maximum-component-cost",
      "topics": [
        "Binary Search",
        "Sort",
        "Union Find",
        "Graph"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Process String with Special Operations II",
      "problem_id": "3939",
      "frontend_id": "3614",
      "difficulty": "Hard",
      "problem_slug": "process-string-with-special-operations-ii",
      "topics": [
        "String",
        "Simulation"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Longest Palindromic Path in Graph",
      "problem_id": "3930",
      "frontend_id": "3615",
      "difficulty": "Hard",
      "problem_slug": "longest-palindromic-path-in-graph",
      "topics": [
        "String",
        "Dynamic Programming",
        "Bit Manipulation",
        "Graph",
        "Bitmask"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Students with Study Spiral Pattern",
      "problem_id": "3961",
      "frontend_id": "3617",
      "difficulty": "Hard",
      "problem_slug": "find-students-with-study-spiral-pattern",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Split Array by Prime Indices",
      "problem_id": "3936",
      "frontend_id": "3618",
      "difficulty": "Medium",
      "problem_slug": "split-array-by-prime-indices",
      "topics": [
        "Array",
        "Math",
        "Number Theory"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Islands With Total Value Divisible by K",
      "problem_id": "3823",
      "frontend_id": "3619",
      "difficulty": "Medium",
      "problem_slug": "count-islands-with-total-value-divisible-by-k",
      "topics": [
        "Array",
        "Depth-First Search",
        "Breadth-First Search",
        "Union Find",
        "Matrix"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Network Recovery Pathways",
      "problem_id": "3919",
      "frontend_id": "3620",
      "difficulty": "Hard",
      "problem_slug": "network-recovery-pathways",
      "topics": [
        "Array",
        "Binary Search",
        "Dynamic Programming",
        "Graph",
        "Topological Sort",
        "Heap (Priority Queue)",
        "Shortest Path"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Integers With Popcount-Depth Equal to K I",
      "problem_id": "3937",
      "frontend_id": "3621",
      "difficulty": "Hard",
      "problem_slug": "number-of-integers-with-popcount-depth-equal-to-k-i",
      "topics": [
        "Math",
        "Dynamic Programming",
        "Combinatorics"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Check Divisibility by Digit Sum and Product",
      "problem_id": "3918",
      "frontend_id": "3622",
      "difficulty": "Easy",
      "problem_slug": "check-divisibility-by-digit-sum-and-product",
      "topics": [
        "Math"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Trapezoids I",
      "problem_id": "3886",
      "frontend_id": "3623",
      "difficulty": "Medium",
      "problem_slug": "count-number-of-trapezoids-i",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Number of Integers With Popcount-Depth Equal to K II",
      "problem_id": "3941",
      "frontend_id": "3624",
      "difficulty": "Hard",
      "problem_slug": "number-of-integers-with-popcount-depth-equal-to-k-ii",
      "topics": [
        "Array",
        "Segment Tree"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Count Number of Trapezoids II",
      "problem_id": "3897",
      "frontend_id": "3625",
      "difficulty": "Hard",
      "problem_slug": "count-number-of-trapezoids-ii",
      "topics": [
        "Array",
        "Hash Table",
        "Math",
        "Geometry"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Find Stores with Inventory Imbalance",
      "problem_id": "3971",
      "frontend_id": "3626",
      "difficulty": "Medium",
      "problem_slug": "find-stores-with-inventory-imbalance",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 5
    },
    {
      "title": "Maximum Median Sum of Subsequences of Size 3",
      "problem_id": "3766",
      "frontend_id": "3627",
      "difficulty": "Medium",
      "problem_slug": "maximum-median-sum-of-subsequences-of-size-3",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Number of Subsequences After One Inserting",
      "problem_id": "3948",
      "frontend_id": "3628",
      "difficulty": "Medium",
      "problem_slug": "maximum-number-of-subsequences-after-one-inserting",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Jumps to Reach End via Prime Teleportation",
      "problem_id": "3933",
      "frontend_id": "3629",
      "difficulty": "Medium",
      "problem_slug": "minimum-jumps-to-reach-end-via-prime-teleportation",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Partition Array for Maximum XOR and AND",
      "problem_id": "3882",
      "frontend_id": "3630",
      "difficulty": "Hard",
      "problem_slug": "partition-array-for-maximum-xor-and-and",
      "topics": [
        "Array",
        "Math",
        "Greedy",
        "Enumeration"
      ],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Earliest Finish Time for Land and Water Rides I",
      "problem_id": "3965",
      "frontend_id": "3633",
      "difficulty": "Easy",
      "problem_slug": "earliest-finish-time-for-land-and-water-rides-i",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Removals to Balance Array",
      "problem_id": "3958",
      "frontend_id": "3634",
      "difficulty": "Medium",
      "problem_slug": "minimum-removals-to-balance-array",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Earliest Finish Time for Land and Water Rides II",
      "problem_id": "3967",
      "frontend_id": "3635",
      "difficulty": "Medium",
      "problem_slug": "earliest-finish-time-for-land-and-water-rides-ii",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Threshold Majority Queries",
      "problem_id": "3955",
      "frontend_id": "3636",
      "difficulty": "Hard",
      "problem_slug": "threshold-majority-queries",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Trionic Array I",
      "problem_id": "3952",
      "frontend_id": "3637",
      "difficulty": "Easy",
      "problem_slug": "trionic-array-i",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Maximum Balanced Shipments",
      "problem_id": "3954",
      "frontend_id": "3638",
      "difficulty": "Medium",
      "problem_slug": "maximum-balanced-shipments",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Minimum Time to Activate String",
      "problem_id": "3944",
      "frontend_id": "3639",
      "difficulty": "Medium",
      "problem_slug": "minimum-time-to-activate-string",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    },
    {
      "title": "Trionic Array II",
      "problem_id": "3956",
      "frontend_id": "3640",
      "difficulty": "Hard",
      "problem_slug": "trionic-array-ii",
      "topics": [],
      "follow_ups": false,
      "code_snippets": 19
    }
  ]
}